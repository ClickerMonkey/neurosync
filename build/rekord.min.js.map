{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","batch.js","Gate.js","Database.js","Model.js","Map.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Promise.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","dynamic.js","events.js","files.js","timestamps.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","findOrCreate.js","get.js","grab.js","grabAll.js","methods.js","persist.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","parsedChain","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","p","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","parseDate","utc","saveNumberResolver","numbers","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","escape","splits","ae","joined","saveWhere","where","createWhere","Wheres","promise","get","isComplete","results","Events","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","convertDate","date","Timestamp","Millis","Seconds","formatDate","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","source","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","online","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","removeKey","buildKey","buildKeys","relationName","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","isDependent","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","src","dst","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n","\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  function EA() {}\n\n  if ( extendArraySupported.supported === undefined )\n  {\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {}\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    var events = toArray( eventsInput, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n}\n","\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( defaultProperty + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( defaultProperty, option );\n    }\n    else\n    {\n      setProperty( defaultProperty, copy( defaultValue ) );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      setProperty( optionProperty, options[ optionProperty ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( utc )\n    {\n      x += ' UTC';\n    }\n\n    x = Date.parse ? Date.parse( x ) : new Date( x );\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    return x;\n  }\n\n  return false;\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  var resolver = createNumberResolver( numbers );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  var resolver = createPropertyResolver( properties, delim );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var splits = x.split( delimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')(); // jshint ignore:line\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n","\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (e)\n  {\n    throw e;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        this.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      this.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      for (var relationName in this.relations)\n      {\n        if ( relationName in input )\n        {\n          this.relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    this.buildKeyFromRelations( model );\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n    var off;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save( cascade );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$set( props );\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents[ related.$uid() ] = related;\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var foreign = this.model.Database.key;\n\n      if ( isArray( key ) )\n      {\n        for (var i = 0; i < key.length; i++)\n        {\n          var field = key[ i ];\n\n          if ( !isValue( input[ field ] ) && isValue( related[ foreign[ i ] ] ) )\n          {\n            input[ field ] = related[ foreign[ i ] ];\n          }\n        }\n      }\n      else\n      {\n        if ( !isValue( input[ key ] ) && isValue( related[ foreign ] ) )\n        {\n          input[ key ] = related[ foreign ];\n        }\n      }\n    }\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      if ( isObject( initialValue ) && relation.child )\n      {\n        var src = toArray( this.local );\n        var dst = toArray( this.model.Database.key );\n\n        for (var k = 0; k < src.length; k++)\n        {\n          initialValue[ dst[ k ] ] = model[ src[ k ] ];\n        }\n      }\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeFormat = options.timestampFormat || Database.Defaults.timestampFormat;\n  var timeType = options.timestampType || Database.Defaults.timestampType;\n  var timeUTC = options.timestampUTC || Database.Defaults.timestampUTC;\n  var timeCurrent = options.timestampCurrent || Database.Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDatabase.Defaults.timestampFormat = Timestamp.Millis;\nDatabase.Defaults.timestampType = Timestamp.Date;\nDatabase.Defaults.timestampUTC = false;\nDatabase.Defaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n\n  // 33\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = global.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (global.addEventListener)\n  {\n    global.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    global.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    global.document.body.ononline = Rekord.setOnline;\n    global.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = global.navigator.onLine;\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.parse = parse;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}