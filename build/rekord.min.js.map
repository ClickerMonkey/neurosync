{"version":3,"sources":["rekord.min.js"],"names":["root","factory","define","amd","module","exports","global","Rekord","this","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","create","collectArray","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","isDefined","isFunction","constructor","apply","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","func","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","addPlugin","callback","beforeCreation","on","Events","Options","Plugins","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","target","functionName","events","secret","off","eventFunction","listener","result","subject","unlistener","unlistened","$methods","Class","method","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","push","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","ex","Error","methods","$on","$once","$after","$off","$trigger","props","applyOptions","options","defaults","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","copyValues","grabbed","p","pull","pulledValue","pulled","transfer","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","value","tester","exprEqualsTester","expression","exprEquals","isExpr","not","oneOf","input","AP","promise","get","isComplete","results","database","dynamic","className","classes","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","modelsCached","models","ModelCollection","allCached","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","contextIndex","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","discriminator","init","save","projectionName","projections","Projection","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","off2","off3","status","reject","noline","Local","Map","keys","indices","Dependents","map","addProjection","Context","databases","alls","add","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","HasReference","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","win","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","mapKeyChangeListener","oldKey","newKey","index","mapKeyChangePut","Map_put","$db","keyChanges","KeyChange","mapKeyChangeRemove","removeAt","enableKeyChanges","disableKeyChanges","Map_remove","convertDate","date","Timestamp","Millis","Seconds","formatDate","window","construct","build","extend","parent","override","parentCopy","copyConstructor","instanceFactory","nativeArray","Settings","parentInstance","code","DynamicClass","Function","propThis","methodThis","replaceThis","methodName","writable","propertyName","methodFactory","existingMethod","F","now","RekordSettings","document","currentScript","script","getAttribute","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","removeListeners","failOnPendingChanges","hasPending","singularity","Initialized","Online","Offline","Cache","None","All","NoLive","Live","NoRest","Remote","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","Save","Key","Keys","Store","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASREFERENCE_INIT","HASREFERENCE_NINJA_REMOVE","HASREFERENCE_INITIAL_PULLED","HASREFERENCE_INITIAL","HASREFERENCE_CLEAR_MODEL","HASREFERENCE_SET_MODEL","HASREFERENCE_CLEAR_KEY","HASREFERENCE_UPDATE_KEY","HASREFERENCE_LOADED","HASREFERENCE_QUERY","HASREFERENCE_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANY_UPDATE_KEY","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASMANYTHRU_UPDATE_KEY","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setLive","liveSet","isOnline","navigator","onLine","online","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","body","ononline","onoffline","checkNetworkStatus","setRest","restSet","put","record","records","setStore","storeSet","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","saveAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","noReferences","allOptions","fetchOptions","getOptions","updateOptions","createOptions","saveOptions","removeOptions","queryOptions","prune","active","max","keepAlive","removeLocal","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","clearAll","contains","$isPending","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","addReference","getKey","decoded","revisionRejected","hasKeyChange","$setKey","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","saveReference","createModel","$status","$invalid","destroyModel","modelKey","pruneModel","RemoteAndRemove","removeReference","hasPruning","pruneModels","youngestAllowed","$remove","isTooYoung","$touched","youngest","minModel","eachWhere","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","delaySort","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$savedState","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$hasRelation","$get","$decode","$sync","removeUnrelated","sync","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$hasKey","$touch","$exists","$autoRefresh","callRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$updated","quietly","$keys","getKeys","$uid","skipApplication","applyKey","$isSynced","$isSaving","$isSavedLocally","$isNew","$project","projectionInput","projection","project","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","$resumeOptions","JSON","stringify","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","toObject","handleKeyChange","prefix","updateForeignKey","isSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","alias","aliasIndex","ALIAS_DELIMITER","word","words","tokens","types","resolvers","processWord","token","TOKEN_HANDLER","unshift","post","processToken","pre","TOKENS",".","?","|","#","(",")","[","]","{",":","}","@","=","sourceType","fieldIndex","filterName","Filters","resolveName","whereName","whereFrom","aggregateProperty","aggregateFunction","aggregateFrom","subEnd","pluckValueEnd","pluck","pluckObjectEnd","originalInput","start","getApplied","applied","each","applyDatabase","discard","discardDatabase","destroy","destroyDatabase","iterator","dbs","buildKey","join","otherFields","akey","bkey","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","insertAt","removed","shift","removing","element","removeAll","removeWhere","deleteCount","adding","startingValue","min","maxModel","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","valuesResolver","keysResolver","callbackContext","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","setFilter","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","pages","ceil","can","canFirst","canPrev","canLast","canNext","forceApply","end","more","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","hasChanges","getChanges","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$total","$getTotal","$pages","$page","$can","$canFirst","$canPrev","$canLast","$canNext","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","promiseOrContext","contextOrCallback","callbackOrNull","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","grabAlways","publish","always","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","autoCascade","autoOptions","preserve","clearKey","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","initial","grabInitial","grabModels","pending","setProperty","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","getTargetFields","getSourceFields","targetKey","targetKeyHandler","debugUpdateKey","targetNewKey","clearForeignKey","debugClearKey","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","clearModel","setRelated","clearRelated","setModel","dontClear","onSaved","onRemoved","dirty","isDependent","handleModel","ignoreLoaded","isRelatedFactory","modelDatabase","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","saveParentCascade","saveParentOptions","belongsTo","cascadeRemoveOptions","postRemove","onKeyUpdate","relatedValue","modelFields","relatedFields","hasOne","saveCascade","child","preSave","populateInitial","src","dst","relatedClone","hasMany","listenForRelated","loadRelated","cascadeRemove","cascadeSave","cascadeSaveOptions","onChange","postSave","preRemove","handleModelAdded","handleLazyLoad","onRelated","existingModel","relatedClones","hasManyThrough","through","cascadeSaveRelated","cascadeSaveRelatedOptions","cascadeRemoveThroughOptions","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","existingThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","added","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","hasReference","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","fileToValue","find","findOrCreate","created","grabAll","persist","searchAt","paging","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent","extendArray","addMethod","addMethods","replaceMethod"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.4.10 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define('rekord', [], function() { // jshint ignore:line\n      return factory(root);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global);  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root);\n  }\n}(this, function(global, undefined)\n{\n\n  var win = typeof window !== 'undefined' ? window : global;   // jshint ignore:line\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.create( values );\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collectArray(1, 2, 3, 4);\n * Rekord.collectArray([1, 2, 3, 4]); // same as above\n * Rekord.collectArray();\n * Rekord.collectArray([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collectArray(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.native( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\n// Class.create( construct, methods )\n// Class.extend( parent, construct, override )\n// Class.prop( target, name, value )\n// Class.props( target, properties )\n// Class.method( construct, methodName, method )\n// Class.method( construct, methods )\n// Class.replace( construct, methodName, methodFactory(super) )\n\n// constructor.create( ... )\n// constructor.native( ... ) // for arrays\n// constructor.$constuctor\n// constructor.prototype.$super\n// constructor.$methods\n// constructor.$prop( name, value ) // add to prototype\n// constructor.$method( methodName, method ) // add to prototype\n// constructor.$replace( methodName, methodFactory(super) )\n\nvar Class =\n{\n\n  create: function( construct, methods )\n  {\n    Class.prop( construct, 'create', Class.factory( construct ) );\n    Class.build( construct, methods, noop );\n  },\n\n  extend: function( parent, construct, override )\n  {\n    var methods = collapse( override, parent.$methods );\n    var parentCopy = Class.copyConstructor( parent );\n\n    construct.prototype = new parentCopy();\n\n    var instanceFactory = Class.factory( construct );\n\n    if ( Class.isArray( parent ) )\n    {\n      var nativeArray = function()\n      {\n        var arr = [];\n        Class.props( arr, methods );\n        construct.apply( arr, arguments );\n        return arr;\n      };\n\n      Class.prop( construct, 'native', nativeArray );\n      Class.prop( construct, 'create', Settings.nativeArray ? nativeArray : instanceFactory );\n    }\n    else\n    {\n      Class.prop( construct, 'create', instanceFactory );\n    }\n\n    Class.build( construct, methods, parent );\n  },\n\n  dynamic: function(parent, parentInstance, className, code)\n  {\n    var DynamicClass = new Function('return function ' + className + code)(); // jshint ignore:line\n\n    DynamicClass.prototype = parentInstance;\n\n    Class.build( DynamicClass, {}, parent );\n\n    return DynamicClass;\n  },\n\n  build: function(construct, methods, parent)\n  {\n    Class.prop( construct, '$methods', methods );\n    Class.prop( construct, '$prop', Class.propThis );\n    Class.prop( construct, '$method', Class.methodThis );\n    Class.prop( construct, '$replace', Class.replaceThis );\n    Class.prop( construct.prototype, '$super', parent );\n    Class.prop( construct.prototype, 'constructor', construct );\n    Class.props( construct.prototype, methods );\n  },\n\n  isArray: function( construct )\n  {\n    return Array === construct || construct.prototype instanceof Array;\n  },\n\n  method: function( construct, methodName, method )\n  {\n    if (construct.$methods)\n    {\n      construct.$methods[ methodName ] = method;\n    }\n\n    Class.prop( construct.prototype, methodName, method );\n  },\n\n  methodThis: function( methodName, method )\n  {\n    Class.method( this, methodName, method );\n  },\n\n  methods: function( construct, methods )\n  {\n    for (var methodName in methods)\n    {\n      Class.method( construct, methodName, methods[ methodName ] );\n    }\n  },\n\n  prop: (function()\n  {\n    if (Object.defineProperty)\n    {\n      return function( target, property, value )\n      {\n        Object.defineProperty( target, property, {\n          configurable: true,\n          enumerable: false,\n          writable: true,\n          value: value\n        });\n      };\n    }\n    else\n    {\n      return function( target, property, value )\n      {\n        target[ property ] = value;\n      };\n    }\n  })(),\n\n  propThis: function( property, value )\n  {\n    Class.prop( this.prototype, property, value );\n  },\n\n  props: function( target, properties )\n  {\n    for (var propertyName in properties)\n    {\n      Class.prop( target, propertyName, properties[ propertyName ] );\n    }\n  },\n\n  replace: function( target, methodName, methodFactory )\n  {\n    var existingMethod = target.prototype[ methodName ] || target[ methodName ] || noop;\n\n    Class.method( target, methodName, methodFactory( existingMethod ) );\n  },\n\n  replaceThis: function( methodName, methodFactory )\n  {\n    Class.replace( this, methodName, methodFactory );\n  },\n\n  copyConstructor: function(construct)\n  {\n    function F()\n    {\n\n    }\n\n    F.prototype = construct.prototype;\n\n    return F;\n  },\n\n  factory: function(construct)\n  {\n    function F(args)\n    {\n      construct.apply( this, args );\n    }\n\n    F.prototype = construct.prototype;\n\n    return function()\n    {\n      return new F( arguments );\n    };\n  }\n\n};\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    return func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nvar now = Date.now || function()\n{\n  return new Date().getTime();\n};\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy, context)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return context ? x.apply( context ) : x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\nfunction addPlugin( callback, beforeCreation )\n{\n  if ( beforeCreation )\n  {\n    return Rekord.on( Rekord.Events.Options, callback ); // (options)\n  }\n  else\n  {\n    return Rekord.on( Rekord.Events.Plugins, callback ); // (model, db, options)\n  }\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  var eventFunction = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n\n  if (target.$methods)\n  {\n    Class.method( target, functionName, eventFunction );\n  }\n  else\n  {\n    Class.prop( target, functionName, eventFunction );\n  }\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      Class.prop( $this, property, listeners = {} );\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[ i ];\n\n        triggerListeners( this.$$on, e, args, false );\n        triggerListeners( this.$$once, e, args, true );\n        triggerListeners( this.$$after, e, args, false );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  var methods = null;\n\n  if ( secret )\n  {\n    methods = {\n      $on: on,\n      $once: once,\n      $after: after,\n      $off: off,\n      $trigger: trigger\n    };\n  }\n  else\n  {\n    methods = {\n      on: on,\n      once: once,\n      after: after,\n      off: off,\n      trigger: trigger\n    };\n  }\n\n  if ( target.$methods )\n  {\n    Class.methods( target, methods );\n  }\n  else\n  {\n    Class.props( target, methods );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      target[ defaultProperty ] = option;\n    }\n    else\n    {\n      target[ defaultProperty ] = copy( defaultValue );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      target[ optionProperty ] = options[ optionProperty ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1 || x.indexOf('(') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true, base );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    if ( utc )\n    {\n      x = new Date( x.getUTCFullYear(), x.getUTCMonth(), x.getUTCDate(), x.getUTCHours(), x.getUTCMinutes(), x.getUTCSeconds() );\n    }\n\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nvar Settings = global.RekordSettings || win.RekordSettings || {};\n\nif ( win.document && win.document.currentScript )\n{\n  var script = win.document.currentScript;\n\n  if (script.getAttribute('native-array') !== null)\n  {\n    Settings.nativeArray = true;\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var props = [];\n\n    for (var prop in properties)\n    {\n      props.push({\n        tester:   exprEqualsTester( properties[ prop ], equality ),\n        resolver: createPropertyResolver( prop )\n      });\n    }\n\n    return function whereEqualsObject(model)\n    {\n      for (var i = 0; i < props.length; i++)\n      {\n        var prop = props[ i ];\n\n        if ( !prop.tester( prop.resolver( model ) ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      var tester = exprEqualsTester( value, equality );\n\n      return function whereEqualsValue(model)\n      {\n        return tester( resolver( model ) );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nfunction expr(func)\n{\n  func.expression = true;\n\n  return func;\n}\n\nfunction exprEquals(value, test, equals)\n{\n  return isExpr( value ) ? value( test, equals ) : equals( value, test );\n}\n\nfunction exprEqualsTester(value, equals)\n{\n  if ( isExpr( value ) )\n  {\n    return function tester(test)\n    {\n      return value( test, equals );\n    };\n  }\n\n  return function tester(test)\n  {\n    return equals( value, test );\n  };\n}\n\nfunction isExpr(x)\n{\n  return isFunction( x ) && x.expression;\n}\n\nfunction not(x)\n{\n  if ( isExpr( x ) )\n  {\n    return expr(function notExpr(value, equals)\n    {\n      return !x( value, equals );\n    });\n  }\n\n  if ( isFunction( x ) )\n  {\n    return function notWhere(value)\n    {\n      return !x( value );\n    };\n  }\n\n  return expr(function notValue(value, equals)\n  {\n    return !equals( value, x );\n  });\n}\n\nfunction oneOf(input)\n{\n  var values = isArray( input ) ? input : AP.slice.call( arguments );\n\n  return expr(function oneOfValue(value, equals)\n  {\n    for (var i = 0; i < values.length; i++)\n    {\n      if (exprEquals( values[ i ], value, equals ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = Class.dynamic(\n    Model,\n    new Model( database ),\n    database.className,\n    '(props, remoteData) { this.$init( props, remoteData ) }'\n  );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\nRekord.export = function()\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    win[ className ] = classes[ className ];\n  }\n};\n\nRekord.clear = function(removeListeners)\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    classes[ className ].clear( removeListeners );\n  }\n};\n\nRekord.reset = function(failOnPendingChanges, removeListeners)\n{\n  var classes = Rekord.classes;\n\n  if ( failOnPendingChanges )\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      if ( db.hasPending() )\n      {\n        return Promise.reject( db );\n      }\n    }\n  }\n\n  return Promise.singularity(this, function()\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      db.reset( false, removeListeners );\n    }\n  });\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\n\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              options: options,\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              options: options,\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, targetFields, Model, sourceFields\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, targetFields, Model, sourceFields\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASREFERENCE_INIT: 131,      // HasOne\n  HASREFERENCE_NINJA_REMOVE: 132, // Model, relation\n  HASREFERENCE_INITIAL_PULLED: 133, // Model, initial\n  HASREFERENCE_INITIAL: 134,    // Model, initial\n  HASREFERENCE_CLEAR_MODEL: 135, // relation\n  HASREFERENCE_SET_MODEL: 136,  // relation\n  HASREFERENCE_CLEAR_KEY: 137,  // Model, local\n  HASREFERENCE_UPDATE_KEY: 138, // Model, targetFields, Model, sourceFields\n  HASREFERENCE_LOADED: 139,     // Model, relation, [Model]\n  HASREFERENCE_QUERY: 140,      // Model, RemoteQuery, queryOption, query\n  HASREFERENCE_QUERY_RESULTS: 141, // Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n  HASMANY_UPDATE_KEY: 129,      // Model, targetFields, Model, sourceFields\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n  HASMANYTHRU_UPDATE_KEY: 130,      // Model, targetFields, Model, sourceFields\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\n\nRekord.isOnline = function()\n{\n  return !win.navigator || win.navigator.onLine !== false;\n};\n\nRekord.online = Rekord.isOnline();\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (win.addEventListener)\n  {\n    win.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    win.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    win.document.body.ononline = Rekord.setOnline;\n    win.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = Rekord.isOnline();\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( options, success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, options, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, options, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, options, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model,options,  success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, options, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.modelsCached = this.models = ModelCollection.create( this );\n  this.allCached = this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n  this.context = null;\n  this.contextIndex = -1;\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      if ( isString( relationOptions ) )\n      {\n        relationOptions = {\n          model: relationOptions\n        };\n      }\n      else if ( !isObject( relationOptions ) )\n      {\n        relationOptions = {};\n      }\n\n      if ( !relationOptions.model && !relationOptions.discriminator )\n      {\n        relationOptions.model = name;\n      }\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n\n  // Projections\n  for (var projectionName in this.projections)\n  {\n    this.projections[ projectionName ] = Projection.parse( this, projectionName );\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  saveAlways:           [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  noReferences:         false,\n  encodings:            {},\n  decodings:            {},\n  projections:          {},\n  allOptions:           null,\n  fetchOptions:         null,\n  getOptions:           null,\n  updateOptions:        null,\n  createOptions:        null,\n  saveOptions:          null,\n  removeOptions:        null,\n  queryOptions:         null,\n  prune:                {active: false, max: 0, keepAlive: 0, removeLocal: false},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nClass.create( Database,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  clearAll: function()\n  {\n    var db = this;\n\n    if (db.context)\n    {\n      db.context.clear( this );\n    }\n    else\n    {\n      db.allCached = db.all = {};\n    }\n  },\n\n  clear: function(removeListeners)\n  {\n    var db = this;\n\n    db.clearAll();\n    db.models.clear();\n\n    if ( removeListeners )\n    {\n      db.off();\n    }\n\n    return db;\n  },\n\n  hasPending: function()\n  {\n    return this.models.contains(function(model)\n    {\n      return model.$isPending();\n    });\n  },\n\n  reset: function(failOnPendingChanges, removeListeners)\n  {\n    var db = this;\n    var promise = new Rekord.Promise();\n\n    if ( failOnPendingChanges && db.hasPending() )\n    {\n      promise.reject( db );\n    }\n    else\n    {\n      db.clear( removeListeners );\n\n      db.store.reset( [], [],\n        function()\n        {\n          promise.resolve( db );\n        },\n        function()\n        {\n          promise.reject( db );\n        }\n      );\n    }\n\n    return promise;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh( Cascade.All, db.fetchOptions );\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.clearAll();\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.addReference( models[ i ], keys[ i ] );\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        key = model.$setKey( db.keyHandler.getKey( decoded, true ) );\n      }\n\n      db.addReference( model, key );\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.saveReference( model, key );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    this.pruneModel( model, modelKey );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, this, model );\n  },\n\n  pruneModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    db.removeReference( key );\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n  },\n\n  removeReference: function(key)\n  {\n    delete this.all[ key ];\n  },\n\n  hasPruning: function()\n  {\n    return this.prune.max || this.prune.keepAlive;\n  },\n\n  pruneModels: function()\n  {\n    var db = this;\n    var prune = db.prune;\n    var models = db.models;\n\n    if (prune.max || prune.keepAlive)\n    {\n      if (prune.active)\n      {\n        var youngestAllowed = now() - prune.keepAlive;\n\n        var pruneModel = function(model)\n        {\n          if (prune.removeLocal)\n          {\n            model.$remove( Cascade.Local );\n          }\n          else\n          {\n            db.pruneModel( model );\n          }\n        };\n\n        var isTooYoung = function(model)\n        {\n          return model.$touched <= youngestAllowed;\n        };\n\n        while ( prune.max && models.length > prune.max )\n        {\n          var youngest = models.minModel('$touched');\n\n          if (youngest)\n          {\n            pruneModel( youngest );\n          }\n        }\n\n        if ( prune.keepAlive )\n        {\n          models.eachWhere( pruneModel, isTooYoung );\n        }\n      }\n    }\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.saveReference( model, key, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.addReference( model, key );\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( this.allOptions, success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model, key)\n  {\n    if (!this.noReferences)\n    {\n      this.all[ key || model.$key() ] = model;\n    }\n  },\n\n  saveReference: function(model, key, delaySort)\n  {\n    if ( !this.noReferences )\n    {\n      this.models.put( key || model.$key(), model, delaySort );\n    }\n  },\n\n  // Save the model\n  save: function(model, cascade, options)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade, options );\n  },\n\n  // Remove the model\n  remove: function(model, cascade, options)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade, options );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database );\n\naddEventFunction( Database, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  Class.prop( this, '$db', db );\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  KeyChange:            'key-change',\n  Changes:              'saved remote-update key-update relation-update removed key-change change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nClass.create( Model,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n\n    Class.props(this, {\n      $operation: null,\n      $relations: {},\n      $dependents: new Dependents( this ),\n      $savedState: false,\n      $saved: false,\n      $local: false,\n      $touched: now()\n    });\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        Class.prop( this, '$invalid', true );\n\n        return;\n      }\n\n      this.$db.addReference( this, key );\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.addReference( this, key );\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var exists = this.$hasRelation( props );\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        if ( exists )\n        {\n          relation.set( this, value, remoteData );\n        }\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $sync: function(prop, removeUnrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.sync( this, removeUnrelated );\n    }\n  },\n\n  $relate: function(prop, relate, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate, remoteData );\n    }\n  },\n\n  $unrelate: function(prop, unrelated, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated, remoteData );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $hasRelation: function(prop)\n  {\n    return prop in this.$relations;\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade, options)\n  {\n    if ( isObject( setProperties ) )\n    {\n      options = cascade;\n      cascade = setValue;\n      setValue = undefined;\n    }\n    else if ( isNumber( setProperties ) )\n    {\n      options = setValue;\n      cascade = setProperties;\n      setValue = undefined;\n      setProperties = undefined;\n    }\n\n    if ( !isNumber( cascade ) )\n    {\n      cascade = this.$db.cascade;\n    }\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$touch();\n\n        this.$db.addReference( this );\n\n        if ( setProperties !== undefined )\n        {\n          this.$set( setProperties, setValue );\n        }\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade, options );\n\n        this.$db.pruneModels();\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade, options)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade, options );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade, options)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade, options );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade, options );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function(cascade, options)\n  {\n    var callRefresh = function()\n    {\n      this.$refresh( cascade, options );\n    };\n\n    Rekord.on( Rekord.Events.Online, callRefresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset, options)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved, this.$db.cascade, options );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    this.$savedState = false;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade, options)\n  {\n    var operation = new OperationType( this, cascade, options );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $updated: function()\n  {\n    this.$changed();\n    this.$db.trigger( Database.Events.ModelUpdated, [this] );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $setKey: function(key, skipApplication)\n  {\n    var db = this.$db;\n    var newKey = db.keyHandler.buildKeyFromInput(key);\n    var oldKey = this.$$key;\n\n    if (newKey !== oldKey)\n    {\n      if (!db.keyChanges)\n      {\n        throw 'Key changes are not supported, see the documentation on how to enable key changes.';\n      }\n\n      db.removeReference( oldKey );\n      db.addReference( this, newKey );\n\n      this.$$key = newKey;\n\n      if ( !skipApplication )\n      {\n        db.keyHandler.applyKey( newKey, this );\n      }\n\n      this.$trigger( Model.Events.KeyChange, [this, oldKey, newKey] );\n    }\n\n    return newKey;\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $touch: function()\n  {\n    if ( this.$db.hasPruning() )\n    {\n      this.$touched = now();\n    }\n  },\n\n  $project: function(projectionInput)\n  {\n    var projection = Projection.parse( this.$db, projectionInput );\n\n    return projection.project( this );\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade, options)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    Class.props(this,\n    {\n      $resumeCascade: cascade,\n      $resumeOptions: options\n    });\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade, this.$resumeOptions );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade, this.$resumeOptions );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model, true );\n\naddEventFunction( Model, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nClass.create( Map,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  },\n\n  /**\n   * Builds an object contain the keys and values in this map.\n   *\n   * @return {Object} -\n   *         The built object.\n   */\n  toObject: function(out)\n  {\n    var target = out || {};\n    var keys = this.keys;\n    var values = this.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      target[ keys[ i ] ] = values[ i ];\n    }\n\n    return target;\n  }\n\n});\n\n\nfunction Dependents(subject)\n{\n  this.map = {};\n  this.listeners = {};\n\n  this.subject = subject;\n}\n\nClass.create( Dependents,\n{\n\n  add: function(model, relator)\n  {\n    var key = model.$uid();\n\n    this.map[ key ] = model;\n\n    if ( model.$db.keyChanges && !this.listeners[ key ] )\n    {\n      var listener = this.handleKeyChange( relator );\n\n      this.listeners[ key ] = model.$on( Model.Events.KeyChange, listener, this );\n    }\n  },\n\n  remove: function(model)\n  {\n    var key = model.$uid();\n\n    evaluate( this.listeners[ key ] );\n\n    delete this.listeners[ key ];\n    delete this.map[ key ];\n  },\n\n  handleKeyChange: function(relator)\n  {\n    return function(model, oldKey, newKey)\n    {\n      var prefix = model.$db.name + '$';\n\n      oldKey = prefix + oldKey;\n      newKey = prefix + newKey;\n\n      this.listeners[ newKey ] = this.listeners[ oldKey ];\n      this.map[ newKey ] = this.map[ oldKey ];\n\n      delete this.listeners[ oldKey ];\n      delete this.map[ oldKey ];\n\n      relator.updateForeignKey( this.subject, model, true );\n    };\n  },\n\n  isSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.map;\n    var off = noop;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n});\n\n\n// field\n// relation.field\n// relations[pluckValue]\n// relations?savedWhere[pluckValue]\n// relations{pluckKey: pluckValue}\n// relation(subprojection)\n// relations(subprojection)\n// relations?savedWhere(subprojection)\n// expression|filter\n// expression?savedWhere\n// alias:expression\n// expression#resolve\n// relations@sum=field\n\nfunction Projection(database, input)\n{\n  this.database = database;\n  this.input = input;\n  this.projections = {};\n\n  for (var i = 0; i < input.length; i++)\n  {\n    this.addProjection( input[ i ] );\n  }\n}\n\nClass.create( Projection,\n{\n\n  addProjection: function(input)\n  {\n    var projection = this;\n    var alias = input;\n    var aliasIndex = input.indexOf( Projection.ALIAS_DELIMITER );\n\n    if (aliasIndex > 0)\n    {\n      alias = input.substring( 0, aliasIndex );\n      input = input.substring( aliasIndex + 1 );\n    }\n\n    var word = '';\n    var words = [];\n    var tokens = ['property'];\n    var types = [this.database];\n    var i = 0;\n    var resolvers = [];\n\n    var processWord = function(word)\n    {\n      if (!word)\n      {\n        return;\n      }\n\n      var token = tokens[0];\n      var handler = Projection.TOKEN_HANDLER[ token ];\n\n      words.unshift( word );\n\n      if (handler && handler.post)\n      {\n        resolvers.push( handler.post( words, tokens, types, projection ) );\n      }\n    };\n\n    var processToken = function(token)\n    {\n      var handler = Projection.TOKEN_HANDLER[ token ];\n\n      tokens.unshift( token );\n\n      if (handler && handler.pre)\n      {\n        resolvers.push( handler.pre( words, tokens, types, projection ) );\n      }\n    };\n\n    for (var i = 0; i < input.length; i++)\n    {\n      var c = input.charAt( i );\n      var token = Projection.TOKENS[ c ];\n\n      if (token)\n      {\n        processWord( word );\n        processToken( token );\n\n        word = '';\n      }\n      else\n      {\n        word += c;\n      }\n    }\n\n    processWord( word );\n\n    var resolver = function(value) {\n      return value;\n    };\n\n    for (var i = resolvers.length - 1; i >= 0; i--) {\n      resolver = resolvers[ i ]( resolver );\n    }\n\n    this.projections[ alias ] = resolver;\n  },\n\n  project: function(model)\n  {\n    var out = {};\n\n    for (var alias in this.projections)\n    {\n      out[ alias ] = this.projections[ alias ]( model );\n    }\n\n    return out;\n  }\n\n});\n\nProjection.TOKENS =\n{\n  '.': 'property',\n  '?': 'where',\n  '|': 'filter',\n  '#': 'resolve',\n  '(': 'subStart',\n  ')': 'subEnd',\n  '[': 'pluckValueStart',\n  ']': 'pluckValueEnd',\n  '{': 'pluckObjectStart',\n  ':': 'pluckObjectDelimiter',\n  '}': 'pluckObjectEnd',\n  '@': 'aggregateStart',\n  '=': 'aggregateProperty'\n};\n\nProjection.TOKEN_HANDLER =\n{\n\n  property:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var propertyName = words[0];\n      var sourceType = types[0];\n\n      if (!(sourceType instanceof Database))\n      {\n        throw ('The property ' + propertyName + ' can only be taken from a Model');\n      }\n\n      var relation = sourceType.relations[ propertyName ];\n\n      if (relation)\n      {\n        if (relation instanceof RelationSingle)\n        {\n          types.unshift( relation.model.Database );\n        }\n        else\n        {\n          types.unshift( relation );\n        }\n      }\n\n      var fieldIndex = indexOf( sourceType.fields, propertyName );\n\n      if (fieldIndex === false && !relation)\n      {\n        throw ('The property ' + propertyName + ' does not exist as a field or relation on the Model ' + sourceType.name );\n      }\n\n      return function(resolver)\n      {\n        return function(model)\n        {\n          if ( !isValue( model ) )\n          {\n            return null;\n          }\n\n          return resolver( model.$get( propertyName ) );\n        };\n      };\n    }\n  },\n\n  filter:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var filterName = words[0];\n      var filter = Rekord.Filters[ filterName ];\n\n      if (!filter)\n      {\n        throw (filterName + ' is not a valid filter function');\n      }\n\n      return function(resolver)\n      {\n        return function(value)\n        {\n          if ( !isValue( value ) )\n          {\n            return null;\n          }\n\n          return resolver( filter( value ) );\n        };\n      };\n    }\n  },\n\n  resolve:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var resolveName = words[0];\n\n      return function(resolver)\n      {\n        return function(source)\n        {\n          if ( !isValue( source ) )\n          {\n            return null;\n          }\n\n          var value = source[ resolveName ];\n\n          if ( isFunction( value ) )\n          {\n            value = value.apply( source );\n          }\n\n          return resolver( value );\n        };\n      };\n    }\n  },\n\n  where:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var whereName = words[0];\n      var whereFrom = types[0];\n      var where = Rekord.Wheres[ whereName ];\n\n      if (!where)\n      {\n        throw (whereName + ' is not a valid where expression');\n      }\n\n      if (!(whereFrom instanceof RelationMultiple))\n      {\n        throw (whereName + ' where expressions can only be used on relations');\n      }\n\n      return function(resolver)\n      {\n        return function(relation)\n        {\n          if ( !isValue( relation ) )\n          {\n            return null;\n          }\n\n          return resolver( relation.where( where ) );\n        };\n      };\n    }\n  },\n\n  aggregateProperty:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var property = words[0];\n      var aggregateFunction = words[1];\n      var aggregateFrom = types[0];\n\n      if (tokens[1] !== 'aggregateStart')\n      {\n        throw ('Aggregate function syntax error, a = must follow a @');\n      }\n\n      if (!(aggregateFrom instanceof Relation))\n      {\n        throw ('Aggregate functions like ' + aggregateFunction + ' from ' + aggregateFrom + ' can only be used on relations');\n      }\n\n      return function (resolver)\n      {\n        return function (relation)\n        {\n          if ( !isValue( relation ) )\n          {\n            return null;\n          }\n\n          return resolver( relation[ aggregateFunction ]( property ) );\n        };\n      };\n    }\n  },\n\n  subEnd:\n  {\n    pre: function(words, tokens, types, projection)\n    {\n      var projectionName = words[0];\n      var whereFrom = types[0];\n\n      if (tokens[1] !== 'subStart')\n      {\n        throw ('Sub projection syntax error, an ending ) requires a starting (');\n      }\n\n      if (!(whereFrom instanceof Relation))\n      {\n        throw ('Sub projections like ' + projectionName + ' from ' + words[1] + ' can only be used on relations');\n      }\n\n      if (!whereFrom.model.Database.projections[ projectionName ])\n      {\n        throw ('The projection ' + projectionName + ' does not exist on ' + whereFrom.model.Database.name);\n      }\n\n      if (whereFrom instanceof RelationSingle)\n      {\n        return function(resolver)\n        {\n          return function (relation)\n          {\n            if ( !isValue( relation ) )\n            {\n              return null;\n            }\n\n            return resolver( relation.$project( projectionName ) );\n          };\n        };\n      }\n      else\n      {\n        return function(resolver)\n        {\n          return function(relations)\n          {\n            if ( !isValue( relations ) )\n            {\n              return null;\n            }\n\n            return resolver( relations.project( projectionName ) );\n          };\n        };\n      }\n    }\n  },\n\n  pluckValueEnd:\n  {\n    pre: function(words, tokens, types, projection)\n    {\n      var properties = words[0];\n      var whereFrom = types[0];\n\n      if (tokens[1] !== 'pluckValueStart')\n      {\n        throw ('Pluck value syntax error, an ending ] requires a starting [');\n      }\n\n      if (!(whereFrom instanceof RelationMultiple))\n      {\n        throw ('Pluck values like ' + properties + ' from ' + words[1] + ' can only be used on relations');\n      }\n\n      return function (resolver)\n      {\n        return function (relations)\n        {\n          if ( !isValue( relations ) )\n          {\n            return null;\n          }\n\n          return resolver( relations.pluck( properties ) );\n        };\n      };\n    }\n  },\n\n  pluckObjectEnd:\n  {\n    pre: function(words, tokens, types, projection)\n    {\n      var properties = words[0];\n      var keys = words[1];\n      var whereFrom = types[0];\n\n      if (tokens[1] !== 'pluckObjectDelimiter' || tokens[2] !== 'pluckObjectStart')\n      {\n        throw ('Pluck object syntax error, must be {key: value}');\n      }\n\n      if (!(whereFrom instanceof RelationMultiple))\n      {\n        throw ('Pluck values like ' + properties + ' from ' + words[1] + ' can only be used on relations');\n      }\n\n      return function (resolver)\n      {\n        return function (relations)\n        {\n          if ( !isValue( relations ) )\n          {\n            return null;\n          }\n\n          return resolver( relations.pluck( properties, keys ) );\n        };\n      };\n    }\n  }\n};\n\nProjection.ALIAS_DELIMITER = ':';\n\nProjection.parse = function(database, input)\n{\n  var originalInput = input;\n\n  if ( isString( input ) )\n  {\n    input = database.projections[ input ];\n  }\n\n  if ( isArray( input ) )\n  {\n    input = new Projection( database, input );\n  }\n\n  if (!(input instanceof Projection))\n  {\n    throw (originalInput + ' is not a valid projection');\n  }\n\n  return input;\n};\n\n\nfunction Context(models)\n{\n  this.databases = [];\n  this.alls = [];\n  this.models = [];\n\n  if ( isEmpty( models ) )\n  {\n    for (var name in Rekord.classes)\n    {\n      this.add( name );\n    }\n  }\n  else if ( isArray( models ) )\n  {\n    for (var i = 0; i < models.length; i++)\n    {\n      this.add( models[ i ] );\n    }\n  }\n}\n\nContext.start = function(models)\n{\n  var context = new Context( models );\n\n  context.apply();\n\n  return context;\n};\n\nClass.create( Context,\n{\n\n  add: function(type)\n  {\n    if ( isString( type ) )\n    {\n      type = Rekord.classes[ type ];\n    }\n\n    if ( isRekord( type ) )\n    {\n      type = type.Database;\n    }\n\n    if ( type instanceof Database )\n    {\n      this.databases.push( type );\n      this.alls.push( {} );\n      this.models.push( new ModelCollection( type ) );\n    }\n  },\n\n  getApplied: function()\n  {\n    var applied = 0;\n\n    this.each(function(db)\n    {\n      if (db.context === this)\n      {\n        applied++;\n      }\n    });\n\n    return applied / this.databases.length;\n  },\n\n  apply: function()\n  {\n    this.each( this.applyDatabase );\n  },\n\n  applyDatabase: function(db, all, models, i)\n  {\n    db.all = all;\n    db.models = models;\n    db.context = this;\n    db.contextIndex = i;\n  },\n\n  discard: function()\n  {\n    this.each( this.discardDatabase );\n  },\n\n  discardDatabase: function(db)\n  {\n    if (db.context === this)\n    {\n      db.all = db.allCached;\n      db.models = db.modelsCached;\n      db.context = null;\n      db.contextIndex = -1;\n    }\n  },\n\n  destroy: function()\n  {\n    this.each( this.destroyDatabase );\n\n    this.databases.length = 0;\n    this.alls.length = 0;\n    this.models.length = 0;\n  },\n\n  destroyDatabase: function(db, alls, models, i)\n  {\n    this.discardDatabase( db );\n\n    this.databases[ i ] = null;\n    this.alls[ i ] = null;\n    this.models[ i ].clear();\n    this.models[ i ] = null;\n  },\n\n  clear: function(db)\n  {\n    this.alls[ db.contextIndex ] = {};\n  },\n\n  each: function(iterator)\n  {\n    var dbs = this.databases;\n    var alls = this.alls;\n    var models = this.models;\n\n    for (var i = 0; i < dbs.length; i++)\n    {\n      iterator.call( this, dbs[ i ], alls[ i ], models[ i ], i );\n    }\n  }\n\n});\n\n\nfunction KeyHandler()\n{\n\n}\n\nClass.create( KeyHandler,\n{\n\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n\n});\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( field[ i ] === this.key )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    target[ this.key ] = input;\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( indexOf( this.key, field[ i ] ) !== false )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    var fields = this.key;\n\n    if ( isString( input ) )\n    {\n      input = input.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      target[ fields[ i ] ] = input[ i ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nClass.extend( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredCollection.create( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( callbackContext, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return this.constructor.create( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return this.constructor.create();\n  }\n\n});\n\naddEventful( Collection );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    Class.props(this, {\n      onAdd:      bind( this, Filtering.handleAdd ),\n      onAdds:     bind( this, Filtering.handleAdds ),\n      onRemove:   bind( this, Filtering.handleRemove ),\n      onRemoves:  bind( this, Filtering.handleRemoves ),\n      onReset:    bind( this, Filtering.handleReset ),\n      onUpdates:  bind( this, Filtering.handleUpdates ),\n      onCleared:  bind( this, Filtering.handleCleared )\n    });\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      Class.prop( this, 'base', base );\n\n      this.connect();\n    }\n\n    Class.prop( this, 'filter', filter );\n\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nClass.extend( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = this.page( pageIndex );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  total: function()\n  {\n    return this.collection.length;\n  },\n\n  pages: function()\n  {\n    return Math.ceil( this.total() / this.pageSize );\n  },\n\n  page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.pages() - 1 ) );\n  },\n\n  can: function(index)\n  {\n    return this.total() && index >= 0 && index < this.pageCount;\n  },\n\n  canFirst: function()\n  {\n    return this.canPrev();\n  },\n\n  canLast: function()\n  {\n    return this.canNext();\n  },\n\n  canPrev: function()\n  {\n    return this.total() && this.pageIndex > 0;\n  },\n\n  canNext: function()\n  {\n    return this.total() && this.pageIndex < this.pageCount - 1;\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var pageCount = this.pages();\n    var pageIndex = this.page( this.pageIndex );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page );\n\naddEventFunction( Page, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nClass.extend( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    Class.props(this, {\n      database: database,\n      map: new Map()\n    });\n\n    this.map.values = this;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredModelCollection.create( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort, cascade, options)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove( cascade, options );\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade, options)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save( cascade, options );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade, options)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade, options );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals, cascade, options)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh( cascade, options );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade, options)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade, options );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection has at least one model with changes. An\n   * additional where expression can be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Boolean} -\n   *    True if at least one model has changes, otherwise false.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   */\n  hasChanges: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    var hasChanges = function( model )\n    {\n      return where( model ) && model.$hasChanges();\n    };\n\n    return this.contains( hasChanges );\n  },\n\n  /**\n   * Returns a collection of all changes for each model. The changes are keyed\n   * into the collection by the models key. An additional where expression can\n   * be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Rekord.ModelCollection} [out] -\n   *    The collection to add the changes to.\n   * @return {Rekord.ModelCollection} -\n   *    The collection with all changes to models in this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   * @see Rekord.Model#$getChanges\n   */\n  getChanges: function(properties, value, equals, out)\n  {\n    var where = createWhere( properties, value, equals );\n    var changes = out && out instanceof ModelCollection ? out : this.cloneEmpty();\n\n    this.each(function(model)\n    {\n      if ( where( model ) && model.$hasChanges() )\n      {\n        changes.put( model.$key(), model.$getChanges() );\n      }\n    });\n\n    return changes;\n  },\n\n  // TODO\n  project: function(projectionInput, out)\n  {\n    var target = out || [];\n    var projection = Projection.parse( this.database, projectionInput );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      target.push( projection.project( this[ i ] ) );\n    }\n\n    return target;\n  },\n\n  /**\n   * Converts this collection into an object where the keys of the models are\n   * the object properties and the models are the values.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Object} [out] -\n   *    The object to place the models in.\n   * @return {Object} -\n   *    The object containing the models in this collection.\n   */\n  toObject: function(out)\n  {\n    return this.map.toObject( out );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return ModelCollection.create( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return ModelCollection.create( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    Class.props(this, {\n      onModelUpdated: bind( this, this.handleModelUpdate )\n    });\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  Class.props(this, {\n    model:    model,\n    relator:  relator\n  });\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nClass.extend( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input, remoteData)\n  {\n    this.relator.set( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input, remoteData)\n  {\n    this.relator.relate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input, remoteData)\n  {\n    this.relator.unrelate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Syncrhonizes the related models in this collection by re-evaluating all\n   * models for a relationship.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {boolean} [removeUnrelated=false] -\n   *    Whether to remove models that are no longer related. The $remove\n   *    function is not called on these models.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  sync: function(removeUnrelated)\n  {\n    this.relator.sync( this.model, removeUnrelated );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  Class.props( collection,\n  {\n    discriminator: discriminator,\n    discriminatorsToModel: discriminatorsToModel\n  });\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  Class.props( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\nClass.create( Search,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    Class.prop( this, '$db', database );\n\n    this.$append = false;\n    this.$url = url;\n    this.$set( props );\n    this.$results = ModelCollection.create( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n    var options = this.$options || this.$db.queryOptions;\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, options, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nClass.extend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $total: function()\n  {\n    return this.$getTotal();\n  },\n\n  $pages: function()\n  {\n    return this.$getPageCount();\n  },\n\n  $page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.$pages() - 1 ) );\n  },\n\n  $can: function(index)\n  {\n    return this.$getTotal() && index >= 0 && index < this.$getPageCount();\n  },\n\n  $canFirst: function()\n  {\n    return this.$canPrev();\n  },\n\n  $canLast: function()\n  {\n    return this.$canNext();\n  },\n\n  $canPrev: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() > 0;\n  },\n\n  $canNext: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() < this.$getPageCount() - 1;\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.cancelable = cancelable !== false;\n\n  Class.prop( this, 'results', null );\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promiseOrContext, contextOrCallback, callbackOrNull)\n  {\n    var promise = promiseOrContext;\n    var context = contextOrCallback;\n    var callback = callbackOrNull;\n\n    if (!(promise instanceof Promise))\n    {\n      promise = false;\n      context = promiseOrContext;\n      callback = contextOrCallback;\n    }\n\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      callback.call( context, singularity );\n    }\n\n    if (promiseCount === 0)\n    {\n      singularity.resolve();\n    }\n\n    return singularity;\n  };\n\n})();\n\nClass.create( Promise,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise );\n\n\nfunction Operation()\n{\n}\n\nClass.create( Operation,\n{\n\n  reset: function(model, cascade, options)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.options = options;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade, this.options );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade, this.options );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.options || db.getOptions, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved && this.canCascade( Cascade.Rest ) )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade, this.options );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade, this.options );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.options || this.removeOptions, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    db.removeReference( key );\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : this.grabAlways( db.saveAlways, changes, remote );\n    var publish = db.fullPublish ? remote : this.grabAlways( db.publishAlways, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  grabAlways: function(always, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( always.length )\n    {\n      for (var i = 0; i < always.length; i++)\n      {\n        var prop = always[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$dependents.isSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.options || db.updateOptions || db.saveOptions, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.options || db.createOptions || db.saveOptions, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveLocal, this.cascade, this.options );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.create( Relation,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      Class.props( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return RelationCollection.create( this.model.Database, model, this );\n  },\n\n  createCollection: function(initial)\n  {\n    return ModelCollection.create( this.model.Database, initial );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n\n        relation.lastRelated = relation.related;\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade || this.autoCascade, this.autoOptions );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save( this.autoCascade, this.autoOptions );\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateForeignKey: function(target, source, remoteData)\n  {\n    var targetFields = this.getTargetFields( target );\n    var sourceFields = this.getSourceFields( source );\n    var targetKey = target.$key();\n    var targetKeyHandler = target.$db.keyHandler;\n    var keyChanges = target.$db.keyChanges;\n\n    Rekord.debug( this.debugUpdateKey, this, target, targetFields, source, sourceFields );\n\n    this.updateFields( target, targetFields, source, sourceFields, remoteData );\n\n    if ( keyChanges && remoteData )\n    {\n      var targetNewKey = targetKeyHandler.getKey( target, true );\n\n      if ( targetKeyHandler.inKey( targetFields ) && targetNewKey !== targetKey )\n      {\n        target.$setKey( targetNewKey, true );\n      }\n    }\n  },\n\n  clearForeignKey: function(related, remoteData)\n  {\n    var key = this.getTargetFields( related );\n\n    Rekord.debug( this.debugClearKey, this, related, key );\n\n    this.clearFields( related, key, remoteData );\n  },\n\n  getTargetFields: function(target)\n  {\n    return target.$db.key;\n  },\n\n  getSourceFields: function(source)\n  {\n    return source.$db.key;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\nClass.extend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && relation.related !== related )\n      {\n        this.clearModel( relation, remoteData );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related && relation.related !== related )\n    {\n      this.clearModel( relation, remoteData );\n      this.setRelated( relation, related, remoteData );\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData, dontClear)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation, remoteData, dontClear );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, remoteData, dontClear)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( !dontClear && !remoteData )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n      }\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents.add( related, this );\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false || ignoreLoaded )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\nClass.extend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save( this.saveParentCascade, this.saveParentOptions );\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending || ignoreLoaded )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  cascadeRemoveOptions: null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade, this.cascadeRemoveOptions );\n        this.clearRelated( relation, false, true );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          this.clearRelated( relation, false, true );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation, false, true );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  saveCascade:          Cascade.All,\n  saveOptions:          null,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  cascadeRemoveOptions: null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.populateInitial( initialValue, relation, model );\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  populateInitial: function(initialValue, relation, model)\n  {\n    if ( isObject( initialValue ) && relation.child )\n    {\n      var src = toArray( this.local );\n      var dst = toArray( this.model.Database.key );\n\n      for (var k = 0; k < src.length; k++)\n      {\n        initialValue[ dst[ k ] ] = model[ src[ k ] ];\n      }\n    }\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.populateInitial( relatedValue, relation, model );\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save( this.saveCascade, this.saveOptions );\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, remoteData)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade, this.cascadeRemoveOptions );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( this.clearKey )\n      {\n        this.clearForeignKey( relation.parent, remoteData );\n      }\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  saveParentCascade:    Cascade.All,\n  saveParentOptions:    null,\n  cascadeRemove:        Cascade.Local,\n  cascadeRemoveOptions: null,\n  cascadeSave:          Cascade.None,\n  cascadeSaveOptions:   null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANY_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      this.listenToModelAdded( this.handleModelAdded( relation ) );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.related;\n      var remoteData = true;\n      var dontClear = true;\n      var relator = this;\n\n      var onRelated = function(related)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( related );\n\n          existing.each(function(existingModel)\n          {\n            if ( !given.has( existingModel.$key() ) )\n            {\n              relator.removeModel( relation, existingModel, remoteData, dontClear );\n            }\n          });\n        }\n      };\n\n      this.ready( this.handleLazyLoad( relation, onRelated ) );\n    }\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave, this.cascadeSaveOptions );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove, this.cascadeRemoveOptions );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, related );\n      }\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      related.$dependents.add( model, this );\n\n      this.updateForeignKey( related, model, remoteData );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData, dontClear)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n    var removing = target.has( key );\n\n    if ( removing )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      related.$dependents.remove( model );\n\n      if ( !dontClear )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( related, remoteData );\n        }\n\n        if ( this.cascadeRemove )\n        {\n          if ( remoteData )\n          {\n            if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n            {\n              related.$remove( Cascade.Local );\n            }\n          }\n          else\n          {\n            related.$remove( this.cascadeRemove, this.cascadeRemoveOptions );\n          }\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n\n    return removing;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.foreign;\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveOptions:   null,\n  cascadeSaveRelated:   Cascade.None,\n  cascadeSaveRelatedOptions: null,\n  saveParentCascade:    Cascade.All,\n  saveParentOptions:    null,\n  cascadeRemoveThroughOptions: null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANYTHRU_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, relator, model, this, relation );\n\n        relator.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var throughDatabase = this.through.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.throughs.values;\n      var remoteData = true;\n      var relator = this;\n\n      var onRelated = function(throughs)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( throughs );\n\n          for (var i = 0; i < existing.length; i++)\n          {\n            var existingThrough = existing[ i ];\n\n            if ( !given.has( existingThrough.$key() ) )\n            {\n              relator.removeModelFromThrough( relation, existingThrough, remoteData );\n            }\n          }\n        }\n      };\n\n      throughDatabase.ready( this.handleLazyLoad( relation, onRelated ), this );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave, this.cascadeSaveOptions );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated, this.cascadeSaveRelatedOptions );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove, this.cascadeRemoveThroughOptions );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, throughs );\n      }\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related && ( !this.where || this.where( related ) ) )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var added = !throughs.has( throughKey );\n\n    if ( added )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.add( model, this );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave, this.cascadeSaveOptions );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n\n    return added;\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through, undefined, undefined, remoteData ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey, remoteData );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.remove( model );\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All, this.cascadeRemoveThroughOptions );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey, remoteData)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  where:                false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nClass.extend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, true );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refresh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nClass.extend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\nfunction HasReference()\n{\n}\n\nRekord.Relations.hasReference = HasReference;\n\nHasReference.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  property:             true,\n  dynamic:              false\n};\n\nClass.extend( RelationSingle, HasReference,\n{\n\n  type: 'hasReference',\n\n  debugInit:          Rekord.Debugs.HASREFERENCE_INIT,\n  debugClearModel:    Rekord.Debugs.HASREFERENCE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASREFERENCE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASREFERENCE_LOADED,\n  debugQuery:         Rekord.Debugs.HASREFERENCE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASREFERENCE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasReference.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      related: null,\n      loaded: false,\n      dirty: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASREFERENCE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASREFERENCE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.$clone( properties );\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return false;\n  },\n\n  updateForeignKey: function()\n  {\n    // nothing\n  },\n\n  clearForeignKey: function()\n  {\n    // nothing\n  },\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( RelationCollection.create( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( ModelCollection.create(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( this.autoCascade, this.autoOptions );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save( this.autoCascade, this.autoOptions );\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      callback.call( this, input );\n    }\n    // At the moment I don't think this will ever work - if we are given a plain\n    // object we can't really determine the related database.\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        relation.pending[ input.$key() ] = true;\n\n        callback.call( this, input );\n      }\n      // At the moment I don't think this will ever work - if we are given a plain\n      // object we can't really determine the related database.\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    Class.props( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\nClass.create( Shard,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(options, success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, options, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, options, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, options, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, options, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, options, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n  \n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.array = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.native( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model at the given index.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.at( 0 ); // t0\n   * ```\n   *\n   * @method at\n   * @memberof Rekord.Model\n   * @param {Number} index -\n   *    The index of the model to return.\n   * @return {Rekord.Model} -\n   *    The reference to the model at the given index.\n   */\n  model.at = function(index)\n  {\n    return db.models[ index ];\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return ModelCollection.create( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  \n  model.clear = function(removeListeners)\n  {\n    return db.clear( removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.create( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade, options )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade, options );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      Class.replace( model, '$init', function($init)\n      {\n        return function()\n        {\n          $init.apply( this, arguments );\n\n          applyEventListeners( this, modelEvents );\n        };\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, options, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh( Cascade.Rest, options );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return win.File && win.FileReader && win.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof win.File )\n  {\n    return input;\n  }\n  else if ( input instanceof win.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof win.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in win.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new win.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\naddPlugin(function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, options, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade, options );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade, options );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, options, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, options, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\n\naddPlugin( function(model, db, options)\n{\n  if ( options.keyChanges )\n  {\n    enableKeyChanges();\n  }\n});\n\nvar Map_put = Map.prototype.put;\nvar Map_remove = Map.prototype.remove;\n\nfunction mapKeyChangeListener(map)\n{\n  return function onKeyChange(model, oldKey, newKey)\n  {\n    var index = map.indices[ oldKey ];\n\n    if ( isNumber( index ) )\n    {\n      var listener = map.listeners[ oldKey ];\n\n      delete map.indices[ oldKey ];\n      delete map.listeners[ oldKey ];\n\n      map.keys[ index ] = newKey;\n      map.indices[ newKey ] = index;\n      map.listeners[ newKey ] = listener;\n    }\n  };\n}\n\nfunction mapKeyChangePut(key, value)\n{\n  Map_put.apply( this, arguments );\n\n  if ( value instanceof Model && value.$db.keyChanges )\n  {\n    this.listeners = this.listeners || {};\n\n    this.listeners[ key ] = value.$on( Model.Events.KeyChange, mapKeyChangeListener( this ) );\n  }\n\n  return this;\n}\n\nfunction mapKeyChangeRemove(key)\n{\n  var index = this.indices[ key ];\n\n  if ( isNumber( index ) )\n  {\n    if ( this.listeners )\n    {\n      evaluate( this.listeners[ key ] );\n\n      delete this.listeners[ key ];\n    }\n\n    this.removeAt( index );\n  }\n\n  return this;\n}\n\nfunction enableKeyChanges()\n{\n  Class.method( Map, 'put', mapKeyChangePut );\n  Class.method( Map, 'remove', mapKeyChangeRemove );\n}\n\nfunction disableKeyChanges()\n{\n  Class.method( Map, 'put', Map_put );\n  Class.method( Map, 'remove', Map_remove );\n}\n\naddPlugin(function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    Class.methods( model, methods );\n  }\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, options, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, options, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade, options );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.projection = function(projectionInput)\n  {\n    return Projection.parse( db, projectionInput );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.reset = function(failOnPendingChanges, removeListeners)\n  {\n    return db.reset( failOnPendingChanges, removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.searchAt = function(index, url, paging, options, props, success, failure)\n  {\n    var page = {page_index: index, page_size: 1};\n\n    var search = paging ?\n      new SearchPaged( db, url, collapse( options, page ), props ) :\n      new Search( db, url, options, props );\n\n    var promise = new Rekord.Promise();\n\n    promise.success( success );\n    promise.failure( failure );\n\n    search.$run().then(\n      function onSuccess(search, response, results) {\n        promise.resolve( results[ paging ? 0 : index ] );\n      },\n      function onFailure() {\n        promise.reject();\n      },\n      function onOffline() {\n        promise.noline();\n      }\n    );\n\n    return promise;\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n  \n}, true );\n\naddPlugin(function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    Class.replace( model, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\naddPlugin(function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n  Rekord.enableKeyChanges = enableKeyChanges;\n  Rekord.disableKeyChanges = disableKeyChanges;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n  Rekord.Context = Context;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Projections */\n  Rekord.Filters = {};\n  Rekord.Projection = Projection;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n  Rekord.addPlugin = addPlugin;\n  Rekord.now = now;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.array = collectArray;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.Settings = Settings;\n  Rekord.Class = Class;\n  Rekord.extend = Class.extend;\n  Rekord.extendArray = Class.extend;\n  Rekord.addMethod = Rekord.setProperty = Class.prop;\n  Rekord.addMethods = Rekord.setProperties = Class.props;\n  Rekord.replaceMethod = Class.replace;\n  Rekord.copyConstructor = Class.copyConstructor;\n  Rekord.factory = Class.factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n  Rekord.expr = expr;\n  Rekord.not = not;\n  Rekord.oneOf = oneOf;\n  Rekord.isExpr = isExpr;\n  Rekord.exprEqualsTester = exprEqualsTester;\n  Rekord.exprEquals = exprEquals;\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}