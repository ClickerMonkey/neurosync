{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","get.js","methods.js","query.js","ready.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","parse","expr","base","valid","parseInt","format","template","createFormatter","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","Online","Offline","checkNeuro","cached","callbackContext","all","boot","putRemoteData","instance","instantiate","$save","relationName","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","$refresh","fetchAll","onFinish","refresh","grabModel","methods","q","sync","ready","persistent","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","ignoredFields","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReady","invoked","hasData","saving","checkModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","updated","sort","revisionFunction","ar","br","resort","overwrite","decoded","revisionRejected","missingModel","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","preSave","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGets","SavedRemoteUpdate","Blocked","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","def","evaluatedValue","$get","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","Cascade","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","Local","Rest","NoLive","NoRest","Remote","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","run","finish","previousValue","finishRemove","$saving","$publish","liveRemove","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","liveSave","handleData","saveNow","Store","Key","Keys","auto","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","loaded","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","alreadyRemoved","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note, \n * Arrays are considered objects.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a \n * string it is split based on the delimiter given. If the variable is an \n * array then it is returned. If the variable is any other type it may result \n * in an error.\n * \n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n * \n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom \n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n * \n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n * \n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n * \n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n * \n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid() \n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n  \n  expr.replace( parse.REGEX, function(prop) \n  {\n    if (!valid) \n    {\n      return;\n    }\n\n    if ( isArray( base ) ) \n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i)) \n      {\n        base = base[ i ];\n      }\n      else \n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) ) \n    {\n      if (prop in base) \n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      } \n      else \n      {\n        valid = false;\n      }\n    } \n    else \n    {\n      valid = false;\n    }\n  });\n  \n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n      \n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the \n * constructor for creating instances of the Neuro object defined.\n * \n * @namespace \n * @param {Object} options\n *        The options of \n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      \n      invoked = true;\n    }\n    else\n    {\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };  \n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n      \n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(onFinish)\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  preSave: function(model)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    return this.saveToModels( model );\n  },\n\n  // Save the model\n  save: function(model, cascade, existing)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( !existing )\n    {\n      db.models.put( key, model ); \n      db.updated();\n    }\n\n    return existing;\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\n/**\n * An instance\n * \n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaves:          'remote-save remote-save-failure',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoves:        'remote-remove remote-remove-failure',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGets:           'remote-get remote-get-failure',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, remoteData ); \n        }\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    var existing = this.$db.preSave( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade, existing );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$db.getKey( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function(models)\n  {\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function() \n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live(\n      {\n        op:   NeuroDatabase.Live.Remove,\n        key:  key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = \n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = \n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle, \n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, input, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n    \n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            this.executeQuery( model );\n          }\n          else\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, input, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey, remoteData ) )\n    {\n      this.removeThrough( relation, related );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove && this.cascadeRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey, remoteData)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      if ( !this.canRemoveRelated( related, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( model ), this );\n    }\n\n    // Execute query!\n    this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(model)\n  {\n    return function handleRefresh()\n    {\n      this.executeQuery( model );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var instance = db.instantiate();\n\n      instance.$save();\n\n      return instance;\n    }\n\n    var fields = grab( props, db.fields );\n    var instance = db.instantiate( fields );\n    var key = instance.$key();\n    var relations = {};\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    instance.$save( relations );\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(onFinish)\n  {\n    db.refresh( onFinish );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 108,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);"],"sourceRoot":"/source/"}