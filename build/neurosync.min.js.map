{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","files.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroSearch.js","NeuroSearchPaged.js","NeuroTransaction.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","NeuroShard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","find.js","get.js","grab.js","grabAll.js","methods.js","query.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","where.js","Neuro.debug.js","Neuro.rest.js","Neuro.store.js","Neuro.live.js","Neuro.offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","secret","defaultValue","option","valued","copy","$options","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","collapse","cleanFunctions","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","Events","Options","database","NeuroDatabase","Function","className","Model","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","input","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","forSaving","cached","save","store","fileProperties","RemoteSave","$addOperation","NeuroSaveLocal","Cascade","Local","Defaults","key","unshift","keys","models","NeuroModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","createRest","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","init","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","db","$db","NeuroMap","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroSearch","NeuroSearchPaged","NeuroTransaction","cascade","operation","completed","operations","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","NeuroShard","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkNeuro","Online","Offline","None","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","files","fieldOption","type","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","methods","text","dataURL","base64","resource","capacity","size","types","fileToValue","find","firstWhere","grabModel","grabAll","ready","q","sync","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","put","record","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","resort","clean","overwrite","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","transactNone","transact","txn","$remove","$exists","$cancel","$clone","f","cloneKey","relationName","preClone","clone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","$method","$results","$concurrent","$run","$encode","$handleSuccess","$handleFailure","$ready","$success","$failure","concurrentCount","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$first","$last","$prev","$next","response","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","page_size","$setPageSize","$getPageSize","page_index","$getPageOffset","$setTotal","$getTotal","transaction","RemoteSuccess","LocalSuccess","Any","handled","already","offs","createHandler","offline","isFinished","finish","then","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","pendingInitials","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","initials","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","Relation","Operation","Transaction","Search","SearchPaged","Map","Collection","ModelCollection","Query","RemoteQuery","Page","HasOne","BelongsTo","HasMany","HasManyThrough","HasRemote"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * @memberof Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * @memberof Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * @memberof Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * @memberof Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      target[ prop ] = options[ prop ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\n/**\n * Returns an instance of {@link Neuro.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Neuro.collect(1, 2, 3, 4);\n * Neuro.collect([1, 2, 3, 4]); // same as above\n * Neuro.collect();\n * Neuro.collect([]); // same as above\n * ```\n *\n * @memberof Neuro\n * @param  {Any[]|...Any} a\n *         The initial values in the collection. You can pass an array of values\n *         or any number of arguments.\n * @return {Neuro.Collection} -\n *         A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * A string, a function, or an array of mixed values.\n * @typedef {String|Function|Array} ComparatorInput\n */\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Neuro\n * @param  {ComparatorInput} comparator\n *         The input which creates a comparison function.\n * @return {Boolean} -\n *         True if null values should be sorted first.\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger`\n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   *\n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   *\n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};\n","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the\n * constructor for creating instances of the Neuro object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  Neuro.trigger( Neuro.Events.Options, [options] );\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  if ( Neuro.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Neuro.unloaded.push( database );\n  }\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.autoload = false;\n\nNeuro.unloaded = [];\n\nNeuro.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Neuro.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Neuro.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n\nNeuro.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nNeuro.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuro.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, NeuroDatabase.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, NeuroDatabase.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || NeuroDatabase.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Neuro.trigger( Neuro.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nNeuro.fileProcessors = {};\n\nNeuro.Events.FilesNotSupported = 'files-not-supported';\nNeuro.Events.FileTooLarge = 'file-too-large';\nNeuro.Events.FileWrongType = 'file-wrong-type';\nNeuro.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nNeuro.addFileProcessor = function(name, methods)\n{\n  Neuro.fileProcessors[ name ] = methods;\n};\n\nNeuro.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Neuro.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Neuro.trigger( Neuro.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Neuro.trigger( Neuro.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Neuro.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Neuro.trigger( Neuro.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Neuro.trigger( Neuro.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Neuro.trigger( Neuro.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Neuro.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( NeuroModel.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( NeuroSaveLocal, Neuro.Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","\n\nfunction NeuroDatabase(options)\n{\n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new NeuroModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Neuro.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Neuro.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Neuro.live( database );\n}\n\nNeuroDatabase.Events =\n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( NeuroModel.Events.RemoteGets, function()\n          {\n            if ( !grabbed )\n            {\n              grabbed = true;\n\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              callback.call( callbackContext, result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          grabbed = true;\n          callback.call( callbackContext, result );\n        }\n      }\n\n      return grabbed ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === NeuroModel.Status.RemovePending )\n      {\n        Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( NeuroRemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== NeuroModel.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( Neuro.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(models)\n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(models, status)\n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Neuro.debug( Neuro.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Neuro.transactNone( cascade, this, 'save' );\n    }\n\n    return Neuro.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Neuro.transactNone( cascade, this, 'remove' );\n    }\n\n    return Neuro.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );\n","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Neurosync.\n *\n * A collection of any type can be created via {@link Neuro.collect}.\n *\n * ```\n * var nc = new Neuro.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Neuro\n * @alias Collection\n * @see Neuro.collect\n */\nfunction NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\n/**\n * The events a collection can emit.\n *\n * {@link Neuro.Collection#event:add Add}\n * {@link Neuro.Collection#event:adds Adds}\n * {@link Neuro.Collection#event:sort Sort}\n * {@link Neuro.Collection#event:remove Remove}\n * {@link Neuro.Collection#event:removes Removes}\n * {@link Neuro.Collection#event:updates Updates}\n * {@link Neuro.Collection#event:reset Reset}\n * {@link Neuro.Collection#event:cleared Cleared}\n * {@link Neuro.Collection#event:changes Changes}\n *\n * @static\n */\nNeuroCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Neuro.Collection#add\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {T} value - The value added.\n   * @see Neuro.Collection#add\n   * @see Neuro.Collection#insertAt\n   * @see Neuro.ModelCollection#add\n   * @see Neuro.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Neuro.Collection#adds\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {T[]} value - The values added.\n   * @see Neuro.Collection#addAll\n   * @see Neuro.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is resorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Neuro.Collection#sort\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @see Neuro.Collection#resort\n   * @see Neuro.ModelCollection#resort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Neuro.Collection#remove\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {Any} removing - The element that was removed.\n   * @argument {Number} index - The index where the element was removed at.\n   * @see Neuro.Collection#remove\n   * @see Neuro.Collection#removeAt\n   * @see Neuro.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Neuro.Collection#removes\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {Any[]} removed - The array of elements removed from the collection.\n   * @see Neuro.Collection#removeAll\n   * @see Neuro.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Neuro.Collection#updates\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {Array} updated - The array of elements modified.\n   * @see Neuro.ModelCollection#update\n   * @see Neuro.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Neuro.Collection#reset\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {Array} updated - The array of elements modified.\n   * @see Neuro.FilteredCollection#sync\n   * @see Neuro.ModelCollection#reset\n   * @see Neuro.Query#sync\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Neuro.Collection#cleared\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @see Neuro.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Neuro.Collection#changes\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, NeuroCollection,\n{\n\n  /**\n   * setComparator\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator\n   * @param {boolean} nullsFirst\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  /**\n   * addComparator\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator\n   * @param {boolean} nullsFirst\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  /**\n   * isSorted\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * RESORT\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator\n   * @param {boolean} nullsFirst\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );\n","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery,\n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  parse: function(models)\n  {\n    return models;\n  },\n\n  handleSuccess: function()\n  {\n    var models = this.parse.apply( this, arguments );\n\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n  }\n\n});\n","\nfunction NeuroSearch(database, options)\n{\n  this.$init( database, options );\n}\n\nNeuroSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Defaults =\n{\n  $method:     'create'\n};\n\nNeuroSearch.prototype =\n{\n\n  $init: function(database, options)\n  {\n    applyOptions( this, options, NeuroSearch.Defaults, true );\n\n    this.$db = database;\n    this.$results = new NeuroModelCollection( database );\n    this.$status = NeuroSearch.Status.Success;\n    this.$concurrent = 0;\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n\n    this.$status = NeuroSearch.Status.Pending;\n    this.$concurrent++;\n\n    var success = bind( this, this.$handleSuccess( this.$concurrent ) );\n    var failure = bind( this, this.$handleFailure( this.$concurrent ) );\n\n    switch (this.$method) {\n      case 'create':\n        this.$db.rest.create( this, encoded, success, failure );\n        break;\n      case 'update':\n        this.$db.rest.update( this, encoded, success, failure );\n        break;\n      case 'query':\n        this.$db.rest.query( encoded, success, failure );\n        break;\n      default:\n        throw 'Invalid search method: ' + this.$method;\n    }\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Success, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Failure, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(concurrentCount)\n  {\n    return function onSuccess()\n    {\n      if (this.$concurrent === concurrentCount)\n      {\n        var models = this.$decode.apply( this, arguments );\n\n        this.$concurrent = 0;\n        this.$status = NeuroSearch.Status.Success;\n        this.$results.reset( models, true );\n        this.$trigger( NeuroSearch.Events.Ready, [this] );\n        this.$trigger( NeuroSearch.Events.Success, [this] );\n      }\n    };\n  },\n\n  $handleFailure: function(concurrentCount)\n  {\n    return function onFailure()\n    {\n      if (this.$concurrent === concurrentCount)\n      {\n        this.$concurrent = 0;\n        this.$status = NeuroSearch.Status.Failure;\n        this.$trigger( NeuroSearch.Events.Ready, [this] );\n        this.$trigger( NeuroSearch.Events.Failure, [this] );\n      }\n    };\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions(copy(this));\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n};\n\neventize( NeuroSearch.prototype, true );\n","\nfunction NeuroSearchPaged(database, options)\n{\n  this.$init( database, options );\n}\n\nextend( NeuroSearch, NeuroSearchPaged,\n{\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nNeuro.transaction = null;\n\nNeuro.transact = function(cascade, model, operation, func)\n{\n  var transaction = Neuro.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Neuro.transaction = new NeuroTransaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Neuro.transaction = null;\n\n    return transaction;\n  }\n};\n\nNeuro.transactNone = function(cascade, model, operation)\n{\n  return new NeuroTransaction( cascade, model, operation );\n};\n\nfunction NeuroTransaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nNeuroTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\nNeuroTransaction.prototype =\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = NeuroTransaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = NeuroTransaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Neuro.Cascade.Rest )\n      {\n        this.status = NeuroTransaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Neuro.Cascade.Local )\n      {\n        this.status = NeuroTransaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = NeuroTransaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( NeuroTransaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n};\n\neventize( NeuroTransaction.prototype );\n","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype =\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetOffline, [model] );\n    }\n    else\n    {  \n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n    }\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n        \n        model.$trigger( NeuroModel.Events.RemoteRemoveOffline, [model] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    }\n    else\n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online)\n      {\n        Neuro.once( 'online', this.handleOnline, this );\n\n        model.$trigger( NeuroModel.Events.RemoteSaveOffline, [model] );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n\n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});\n","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuroRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.pendingInitials = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var initials = this.pendingInitials;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], initials[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    initials.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, initialValue, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingInitials.push( initialValue );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, initialValue, remoteData );\n    }\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};\n","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","\nNeuro.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new NeuroShard( database );\n\n    transfer( methods, shard );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction NeuroShard(database)\n{\n  this.database = database;\n}\n\nNeuroShard.prototype =\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( query, success, failure )\n  {\n    var shards = this.getShardsForQuery( query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || NeuroDatabase.Defaults.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db );\n\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( NeuroModel.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, NeuroDatabase.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    transfer( methods, model.prototype );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.search = function(options)\n  {\n    return new NeuroSearch( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.searchPaged = function(options)\n  {\n    return new NeuroSearchPaged( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Options, function(options)\n{\n  var shard = options.shard || NeuroDatabase.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Neuro.shard( shard );\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || NeuroDatabase.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || NeuroDatabase.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};\n","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Transaction = NeuroTransaction;\n  global.Neuro.Search = NeuroSearch;\n  global.Neuro.SearchPaged = NeuroSearchPaged;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Relationships */\n  global.Neuro.HasOne = NeuroHasOne;\n  global.Neuro.BelongsTo = NeuroBelongsTo;\n  global.Neuro.HasMany = NeuroHasMany;\n  global.Neuro.HasManyThrough = NeuroHasManyThrough;\n  global.Neuro.HasRemote = NeuroHasRemote;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n\n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n\n  global.Neuro.transfer = transfer;\n  global.Neuro.collapse = collapse;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}