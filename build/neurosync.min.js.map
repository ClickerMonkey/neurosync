{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","all.js","boot.js","create.js","fetch.js","get.js","methods.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","parsed","eventize","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","Neuro","cache","database","NeuroDatabase","model","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","arguments","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","checkNeuro","cached","callbackContext","all","getModels","boot","input","putRemoteData","create","instantiate","$save","$key","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","fetch","buildKeyFromInput","instance","getModel","buildObjectFromKey","$set","$refresh","grabModel","methods","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","encode","data","decode","rawData","ready","persistent","onReadyRemove","onReady","invoked","remoteData","checkModel","result","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","sort","revisionFunction","ar","br","comparatorFunction","isSorted","decoded","revisionCompare","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","slice","RemovePending","Removed","SavePending","refresh","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","status","onRefreshOnline","op","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","filter","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","next","finished","run","finish","tryNext","setNext","insertNext","onSuccess","onFailure","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","changes","saving","publish","clearLocal","markSynced","handleData","saveNow","clearPending","publishing","Store","Key","Keys","auto","getDefaults","field","pendingLoads","pendingRemoteDatas","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","remotes","handleLoad","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","total","belongsTo","that","isRelatedFactory","initial","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleModelAdded","handleLazyLoad","bulk","existing","given","removing","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","dontRemove","Relation","Operation","Map"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    var $init = model.prototype.$init;\n\n    model.prototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      applyEventListeners( this, modelEvents );\n    };\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      \n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br );\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroGetLocal' ), NeuroGetLocal,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroGetRemote' ), NeuroGetRemote,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveCache' ), NeuroRemoveCache,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( isEmpty( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live(\n    {\n      op:     NeuroDatabase.Live.Save,\n      model:  model.$publish,\n      key:    model.$key()\n    });\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n    \n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation, remoteData ), this, remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related, remoteData );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.model )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false\n};\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData )\n      {\n        through.$save( this.cascadeSave );\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    false\n};\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation, true );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this, remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation, false, this.cascade );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation, dontRemove)\n  {\n    this.clearModel( relation, dontRemove );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, dontRemove, cascade)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        related.$remove( cascade );\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.getModels();\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    return db.putRemoteData( input );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.getModel( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.getModel( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}