{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","evaluate","copy","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","charAt","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","localeCompare","createComparator","eventize","target","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","max","slice","trigger","e","$on","$once","$after","$off","$trigger","Neuro","options","database","NeuroDatabase","model","Function","className","init","debug","Events","CREATION","all","getModels","create","inst","$save","cache","name","models","NeuroMap","initialized","pendingRefresh","keySeparator","Defaults","localLoaded","remoteLoaded","remoteOperations","afterOnline","rest","store","live","handlePublish","setComparator","setRevision","revision","relations","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveLocal","reset","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","get","checkNeuro","neuro","callbackContext","cached","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_PRESAVE","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","method","data","success","failure","put","key","record","remove","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","fromStorage","checkModel","result","parseModel","hasRemote","loadRemote","buildKeyFromInput","has","putRemoteData","removeKey","buildKey","fields","buildKeys","join","$key","buildKeyFromArray","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","encoded","decoded","decode","revisionCompare","$saved","current","$toJSON","conflicts","conflicted","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","instantiate","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","refresh","onLocalError","autoRefresh","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","getModel","op","encode","rawData","save","UpdateAndSave","CreateAndSave","Removed","$pendingSave","Created","RemoteRemove","$init","$operation","$relations","$set","$reset","loadRelations","databaseRelations","$getRelation","def","defaults","defaultValue","evaluatedValue","set","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$callRelationFunction","$remove","$exists","functionName","OperationType","operation","queue","execute","forSaving","$keys","$isSaved","$isSavedLocally","$isNew","$getChanges","saved","index","removeAt","lastValue","pop","lastKey","size","filter","dest","out","v","reverse","half","ceil","rebuildIndex","partition","left","right","pivot","map","floor","j","qsort","l","next","finished","run","finish","tryNext","insertNext","onSuccess","arguments","onFailure","previousValue","finishRemove","handleOnline","saving","handleData","Store","None","Key","Keys","field","auto","pendingLoads","discriminator","discriminators","discriminated","setNeuro","loadDiscriminators","onInitialized","finishInitialization","pending","handleLoad","preSave","postSave","preRemove","postRemove","clearFields","targetFields","changes","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","relatedDatabase","loadAllReady","total","belongsTo","that","initial","loaded","onRemoved","cascade","onSaved","hasForeignKey","clearModel","setRelated","clearForeignKey","setModel","updateForeignKey","setProperty","foreign","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","HASMANY_INIT","isRelatedFactory","delaySorting","delaySaving","removeModel","checkSave","handleModelAdded","handleModel","handleLazyLoad","bulk","isModelArray","addModel","existing","skipCheck","adding","alreadyRemoved","relatedKey","hasManyThrough","through","setThrough","HASMANYTHRU_INIT","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","modelDatabase","keyIndex","keyProp","hasOne","dirty","dontRemove","Relation","Operation"],"mappings":"CAAA,SAAAA,EAAAC,GCEA,QAAAC,GAAAC,GAEA,MAAAA,KAAAF,EAGA,QAAAG,GAAAD,GAEA,SAAAA,GAAAA,EAAAE,aAAAF,EAAAG,MAAAH,EAAAI,OAGA,QAAAC,GAAAL,GAEA,MAAAC,GAAAD,IAAAA,EAAAM,oBAAAC,GAGA,QAAAC,GAAAR,GAEA,SAAAA,GAAAA,EAAAS,OAAAT,EAAAU,UAGA,QAAAC,GAAAX,GAEA,MAAA,gBAAAA,GAGA,QAAAY,GAAAZ,GAEA,MAAA,gBAAAA,KAAAa,MAAAb,GAGA,QAAAc,GAAAd,GAEA,MAAAA,aAAAe,MAGA,QAAAC,GAAAhB,GAEA,MAAAA,aAAAiB,QAGA,QAAAC,GAAAlB,GAEA,MAAAA,aAAAmB,OAGA,QAAAC,GAAApB,GAEA,MAAA,QAAAA,GAAA,gBAAAA,GAGA,QAAAqB,GAAArB,EAAAsB,GAEA,MAAAtB,aAAAmB,OAAAnB,EAAAA,EAAAsB,MAAAA,GAQA,QAAAC,GAAAvB,GAEA,MAAAA,KAAAF,GAAA,OAAAE,EAGA,QAAAwB,GAAAC,EAAAzB,EAAA0B,GAIA,IAAA,GAFAC,GAAAD,GAAAE,EAEAC,EAAA,EAAAC,EAAAL,EAAAM,OAAAD,EAAAD,EAAAA,IAEA,GAAAF,EAAAF,EAAAI,GAAA7B,GAEA,MAAA6B,EAIA,QAAA,EAGA,QAAAG,KAEA,OAAA,OAAA,EAAAC,KAAAC,UAAA,GAAAC,SAAA,IAAAC,UAAA,GAGA,QAAAC,KAEA,MAAAL,KAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,IAGA,QAAAM,GAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAA/B,EAAA6B,GAEA,MAAAD,GAAAC,KAAAC,EAAAC,EAIA,KAAA,GAAAb,GAAA,EAAAA,EAAAW,EAAAT,OAAAF,IACA,CACA,GAAAc,GAAAH,EAAAX,GACAe,EAAAF,EAAAb,EAEA,KAAAgB,EAAAN,EAAAI,GAAAF,EAAAG,IAEA,OAAA,EAIA,OAAA,EAMA,QAAAE,GAAAC,EAAAC,EAAAC,GAEAC,EAAAD,EAAAD,EAAA1C,UAAAyC,GAGA,QAAAG,GAAAC,EAAAC,GAEA,IAAA,GAAAC,KAAAF,GAEAC,EAAAC,GAAAF,EAAAE,EAGA,OAAAD,GAGA,QAAAE,GAAAC,EAAA1B,EAAA2B,GAEA,GAAAC,GAAAF,EAAA1B,EACA0B,GAAA1B,GAAA0B,EAAAC,GACAD,EAAAC,GAAAC,EAGA,QAAAC,GAAA1D,GAEA,MAAAuB,GAAAvB,GAKAQ,EAAAR,GAEA,GAAAA,GAAAS,MAEAJ,EAAAL,GAEA,GAAAA,GAEAC,EAAAD,GAEAA,IAGA2D,EAAA3D,GAhBAA,EAmBA,QAAA4D,GAAAC,EAAAC,EAAAC,GAIA,IAAA,GAFAC,MAEAnC,EAAA,EAAAA,EAAAiC,EAAA/B,OAAAF,IACA,CACA,GAAAoC,GAAAH,EAAAjC,EAEAoC,KAAAJ,KAEAG,EAAAC,GAAAF,EAAAJ,EAAAE,EAAAI,IAAAJ,EAAAI,IAIA,MAAAD,GAGA,QAAAE,GAAAL,EAAAC,EAAAC,GAEA,GAAApD,EAAAmD,GACA,CACA,GAAAK,GAAAN,EAAAC,EAEA,OAAAC,GAAAJ,EAAAQ,GAAAA,EAMA,IAAA,GAFAC,MAEAvC,EAAA,EAAAA,EAAAiC,EAAA/B,OAAAF,IACA,CACA,GAAAoC,GAAAH,EAAAjC,GACAsC,EAAAN,EAAAI,EAEAG,GAAAC,KAAAN,EAAAJ,EAAAQ,GAAAA,GAGA,MAAAC,GAIA,QAAAE,GAAAtE,GAEA,IAAA,GAAAqD,KAAArD,GAEA,MAAAqD,EAAAkB,OAAA,UAEAvE,GAAAqD,EAIA,OAAArD,GAGA,QAAA2D,GAAA3D,EAAAwE,GAEA,GAAA,SAAAxE,EAEA,MAAAA,EAEA,IAAAkB,EAAAlB,GACA,CAGA,IAAA,GAFAyE,MAEA5C,EAAA,EAAAA,EAAA7B,EAAA+B,OAAAF,IAEA4C,EAAAJ,KAAAV,EAAA3D,EAAA6B,IAGA,OAAA4C,GAEA,GAAAxE,EAAAD,IAAA,gBAAAA,IAAA,OAAAA,EAEA,MAAAA,EAEA,IAAAc,EAAAd,GAEA,MAAA,IAAAe,MAAAf,EAAA0E,UAEA,IAAA1D,EAAAhB,GAEA,MAAAA,EAGA,IAAAyE,KAEA,KAAA,GAAApB,KAAArD,IAEAwE,GAAA,MAAAnB,EAAAkB,OAAA,MAEAE,EAAApB,GAAAM,EAAA3D,EAAAqD,IAIA,OAAAoB,GAGA,QAAAE,GAAAC,EAAAC,EAAAf,EAAApC,GAIA,IAAA,GAFAoD,MAEAjD,EAAA,EAAAA,EAAAiC,EAAA/B,OAAAF,IACA,CACA,GAAAoC,GAAAH,EAAAjC,EAEAH,GAAAkD,EAAAX,GAAAY,EAAAZ,MAEAa,EAAAb,GAAAN,EAAAiB,EAAAX,KAIA,MAAAa,GAGA,QAAAC,GAAA/E,GAEA,GAAAkB,EAAAlB,IAAAW,EAAAX,GAEA,MAAAA,GAAA+B,MAEA,IAAAX,EAAApB,GACA,CACA,GAAAgF,GAAA,CAEA,KAAA,GAAA3B,KAAArD,GAEAgF,GAGA,OAAAA,GAGA,MAAA,GAGA,QAAAC,GAAAjF,GAEA,GAAA,OAAAA,GAAA,SAAAA,GAAA,IAAAA,EAEA,OAAA,CAEA,IAAAkB,EAAAlB,IAAAW,EAAAX,GAEA,MAAA,KAAAA,EAAA+B,MAEA,IAAAjB,EAAAd,GAEA,MAAA,KAAAA,EAAA0E,WAAA7D,MAAAb,EAAA0E,UAEA,IAAAtD,EAAApB,GACA,CACA,IAAA,GAAAqD,KAAArD,GAEA,OAAA,CAEA,QAAA,EAGA,OAAA,EAGA,QAAA4B,GAAA2B,EAAA2B,GAEA,MAAA3B,KAAA2B,EAGA,QAAArC,GAAAU,EAAA2B,GAEA,GAAA3B,IAAA2B,EAAA,OAAA,CACA,IAAA,OAAA3B,GAAA,OAAA2B,EAAA,OAAA,CACA,IAAA3B,IAAAA,GAAA2B,IAAAA,EAAA,OAAA,CAEA,IAAAC,SAAA5B,GACA6B,QAAAF,EACA,IAAAC,IAAAC,EAAA,OAAA,CAEA,IAAAC,GAAAnE,EAAAqC,GACA+B,EAAApE,EAAAgE,EACA,IAAAG,IAAAC,EAAA,OAAA,CAEA,IAAAD,EAAA,CACA,GAAA9B,EAAAxB,SAAAmD,EAAAnD,OAAA,OAAA,CACA,KAAA,GAAAF,GAAA,EAAAA,EAAA0B,EAAAxB,OAAAF,IACA,IAAAgB,EAAAU,EAAA1B,GAAAqD,EAAArD,IACA,OAAA,CAGA,QAAA,EAGA,GAAAf,EAAAyC,GACA,MAAAzC,GAAAoE,IAAArC,EAAAU,EAAAmB,UAAAQ,EAAAR,UAEA,IAAA1D,EAAAuC,GACA,MAAAvC,GAAAkE,IAAA3B,EAAApB,aAAA+C,EAAA/C,UAGA,IAAA,WAAAgD,EAAA,CACA,IAAA,GAAAlB,KAAAV,GACA,KAAA,MAAAU,EAAAM,OAAA,IAAAtE,EAAAsD,EAAAU,KACAA,IAAAiB,IAAArC,EAAAU,EAAAU,GAAAiB,EAAAjB,KACA,OAAA,CAIA,KAAA,GAAAA,KAAAiB,GACA,KAAA,MAAAjB,EAAAM,OAAA,IAAAtE,EAAAiF,EAAAjB,KACAA,IAAAV,IACA,OAAA,CAIA,QAAA,EAGA,OAAA,EAGA,QAAAgC,GAAAhC,EAAA2B,GAEA,MAAA3B,KAAA2B,EAAA,EAAAA,EAAA3B,EAAA,GAAA,EAGA,QAAAiC,GAAAjC,EAAA2B,GAEA,MAAA3B,IAAA2B,EAEA,GAEApE,EAAAyC,KAEAA,EAAAA,EAAAmB,WAEA5D,EAAAoE,KAEAA,EAAAA,EAAAR,WAEA9D,EAAA2C,IAAA3C,EAAAsE,GAEAK,EAAAhC,EAAA2B,GAEAhE,EAAAqC,IAAArC,EAAAgE,GAEAK,EAAAhC,EAAAxB,OAAAmD,EAAAnD,SAGAwB,EAAA,IAAAkC,cAAAP,EAAA,KAGA,QAAAQ,GAAAhE,GAEA,MAAAzB,GAAAyB,GAEAA,EAEAf,EAAAe,GAEA,MAAAA,EAAA6C,OAAA,IAEA7C,EAAAA,EAAAU,UAAA,GAEA,SAAAmB,EAAA2B,GAEA,MAAAM,GAAAN,EAAAxD,GAAA6B,EAAA7B,MAKA,SAAA6B,EAAA2B,GAEA,MAAAM,GAAAjC,EAAA7B,GAAAwD,EAAAxD,KAKA,KC5ZA,QAAAiE,GAAAC,EAAAC,GASA,QAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAlG,EAAAiG,GAAA,CAKA,GAAAD,GAAA5E,EAAA4E,EAAA,IAEAlG,GAAAgG,EAAAC,MAEAD,EAAAC,MAGA,KAAA,GAAAnE,GAAA,EAAAA,EAAAoE,EAAAlE,OAAAF,IAEA9B,EAAAgG,EAAAC,GAAAC,EAAApE,OAEAkE,EAAAC,GAAAC,EAAApE,QAGAkE,EAAAC,GAAAC,EAAApE,IAAAwC,MAAA6B,EAAAC,GAAAJ,KAeA,QAAAK,GAAAH,EAAAC,EAAAC,GAIA,MAFAL,GAAAO,KAAA,OAAAJ,EAAAC,EAAAC,GAEAE,KAcA,QAAAC,GAAAL,EAAAC,EAAAC,GAIA,MAFAL,GAAAO,KAAA,SAAAJ,EAAAC,EAAAC,GAEAE,KAGA,QAAAE,GAAAN,EAAAC,EAAAC,GAIA,MAFAL,GAAAO,KAAA,UAAAJ,EAAAC,EAAAC,GAEAE,KAIA,QAAAG,GAAAC,EAAAC,EAAAR,GAEA,GAAAO,GAAAC,IAAAD,GAIA,IAAA,GAFAE,GAAAF,EAAAC,GAEAlD,EAAAmD,EAAA5E,OAAA,EAAAyB,GAAA,EAAAA,IAEAmD,EAAAnD,GAAA,KAAA0C,GAEAS,EAAAC,OAAApD,EAAA,GAOA,QAAAqD,GAAAhD,EAAAR,GAEAQ,GAAAR,IAAAQ,UAEAA,GAAAR,GAoBA,QAAAyD,GAAAb,EAAAC,GAGA,GAAAnG,EAAAkG,GAOA,CACA,GAAAA,GAAA5E,EAAA4E,EAAA,IAGA,IAAAhG,EAAAiG,GAYA,IAAA,GAAArE,GAAA,EAAAA,EAAAoE,EAAAlE,OAAAF,IAEA2E,EAAAH,KAAAU,KAAAd,EAAApE,GAAAqE,GACAM,EAAAH,KAAAW,OAAAf,EAAApE,GAAAqE,GACAM,EAAAH,KAAAY,QAAAhB,EAAApE,GAAAqE,OAdA,KAAA,GAAArE,GAAA,EAAAA,EAAAoE,EAAAlE,OAAAF,IAEAgF,EAAAR,KAAAU,KAAAd,EAAApE,IACAgF,EAAAR,KAAAW,OAAAf,EAAApE,IACAgF,EAAAR,KAAAY,QAAAhB,EAAApE,QAfAgF,GAAAR,KAAA,QACAQ,EAAAR,KAAA,UACAQ,EAAAR,KAAA,UA4BA,OAAAA,MAIA,QAAAa,GAAAT,EAAAC,EAAAS,EAAAC,GAEA,GAAAX,GAAAC,IAAAD,GACA,CAIA,IAAA,GAHAE,GAAAF,EAAAC,GACAW,EAAAV,EAAA5E,OAEAF,EAAA,EAAAwF,EAAAxF,EAAAA,IACA,CACA,GAAAqE,GAAAS,EAAA9E,EAEAqE,IAEAA,EAAA,GAAA9F,MAAA8F,EAAA,GAAAiB,GAIAC,IAEAT,EAAA5E,SAAAsF,EAEAZ,EAAAC,GAAAC,EAAAW,MAAAD,SAIAZ,GAAAC,KAeA,QAAAa,GAAAtB,EAAAkB,GAIA,IAAA,GAFAlB,GAAA5E,EAAA4E,EAAA,KAEApE,EAAA,EAAAA,EAAAoE,EAAAlE,OAAAF,IACA,CACA,GAAA2F,GAAAvB,EAAApE,EAEAqF,GAAAb,KAAAU,KAAAS,EAAAL,GAAA,GACAD,EAAAb,KAAAW,OAAAQ,EAAAL,GAAA,GACAD,EAAAb,KAAAY,QAAAO,EAAAL,GAAA,GAGA,MAAAd,MAGAR,GAEAD,EAAA6B,IAAArB,EACAR,EAAA8B,MAAApB,EACAV,EAAA+B,OAAApB,EACAX,EAAAgC,KAAAd,EACAlB,EAAAiC,SAAAN,IAIA3B,EAAAQ,GAAAA,EACAR,EAAAU,KAAAA,EACAV,EAAAW,MAAAA,EACAX,EAAAkB,IAAAA,EACAlB,EAAA2B,QAAAA,GC9OA,QAAAO,GAAAC,GAEA,GAAAC,GAAA,GAAAC,GAAAF,GAEAG,EAAA,GAAAC,UAAA,mBAAAJ,EAAAK,UAAA,oDA6BA,OA3BAF,GAAA5H,UAAA,GAAAC,GAAAyH,GAEAA,EAAAE,MAAAA,EACAF,EAAAK,OAEAP,EAAAQ,MAAAR,EAAAS,OAAAC,SAAAR,EAAAD,GAEAG,EAAAxH,SAAAsH,EACAE,EAAAzH,MAAAyH,EAEAA,EAAAO,IAAA,WAEA,MAAAT,GAAAU,aAGAR,EAAAS,OAAA,SAAA7E,GAEA,GAAA8E,GAAA,GAAAV,GAAApE,EAEA,OADA8E,GAAAC,QACAD,GAGAd,EAAAgB,MAAAf,EAAAgB,MAAAb,EACAJ,EAAAgB,MAAAf,EAAAK,WAAAF,EAEAJ,EAAAP,QAAA,eAAAW,IAEAA,EC9CA,QAAAD,GAAAF,GAEA7E,EAAA6E,EAAA1B,MAEAA,KAAA2C,OAAA,GAAAC,GAEA5C,KAAA6C,aAAA,EACA7C,KAAA8C,gBAAA,EAEA9C,KAAA+C,aAAArB,EAAAqB,cAAAnB,EAAAoB,SAAAD,aAEA/C,KAAAiD,aAAA,EACAjD,KAAAkD,cAAA,EAEAlD,KAAAmD,iBAAA,EACAnD,KAAAoD,aAAA,EAEApD,KAAAqD,KAAA5B,EAAA4B,KAAArD,MACAA,KAAAsD,MAAA7B,EAAA6B,MAAAtD,MACAA,KAAAuD,KAAA9B,EAAA8B,KAAAvD,KAAAA,KAAAwD,cAAAxD,OAEAA,KAAAyD,cAAAzD,KAAA3E,YACA2E,KAAA0D,YAAA1D,KAAA2D,UAEA3D,KAAA4D,YAEA,KAAA,GAAAC,KAAAnC,GAEA,GAAAmC,IAAApC,GAAAqC,UAAA,CAKA,GAAAC,GAAAtC,EAAAqC,UAAAD,EAEA,IAAAE,EAAA9J,oBAAA+J,GAAA,CAKA,GAAAC,GAAAvC,EAAAmC,EAEA,KAAA,GAAAnB,KAAAuB,GACA,CACA,GAAAC,GAAAD,EAAAvB,GACAyB,EAAA,GAAAJ,EAEAI,GAAAnC,KAAAhC,KAAA0C,EAAAwB,GAEAlE,KAAA4D,UAAAlB,GAAAyB,KClDA,QAAAjK,GAAAkK,GAEApE,KAAAqE,IAAAD,ECMA,QAAAxB,KAMA5C,KAAAsE,UAMAtE,KAAAuE,QAMAvE,KAAAwE,WC1BA,QAAAC,GAAAC,EAAAC,GAEA3E,KAAA0E,WAAAA,EACA1E,KAAA2E,KAAAA,ECJA,QAAAC,GAAA/C,GAEA7B,KAAA6E,MAAAhD,GCFA,QAAAiD,GAAAjD,GAEA7B,KAAA6E,MAAAhD,GCFA,QAAAkD,GAAAlD,GAEA7B,KAAA6E,MAAAhD,GCFA,QAAAmD,GAAAnD,GAEA7B,KAAA6E,MAAAhD,GCFA,QAAAoD,GAAApD,GAEA7B,KAAA6E,MAAAhD,GCFA,QAAAqD,GAAArD,GAEA7B,KAAA6E,MAAAhD,GCFA,QAAAmC,MCAA,QAAAmB,KAEAnF,KAAA2E,KAAA,YCFA,QAAAS,KAEApF,KAAA2E,KAAA,UCFA,QAAAU,KAEArF,KAAA2E,KAAA,iBCFA,QAAAW,KAEAtF,KAAA2E,KAAA,SfiDAlD,EAAAgB,SAEAhB,EAAA8D,IAAA,SAAA7C,EAAA7C,EAAAC,GAaA,QAAA0F,GAAAC,IAEAA,EAAA/C,OAAAA,GAAA+C,EAAA1D,YAAAW,KAEA7C,EAAA/F,KAAA4L,EAAAD,GAEAhE,EAAAhB,IAAA,cAAA+E,IAjBA,GAAAG,GAAAlE,EAAAgB,MAAAC,GACAgD,EAAA5F,GAAAtG,CAwBA,OAtBAI,GAAAiG,KAEA8F,EAEA9F,EAAA/F,KAAA4L,EAAAC,GAcAlE,EAAA1B,GAAA,cAAAyF,IAIAG,GAGArG,EAAAmC,GgBlFAA,EAAAQ,MAAA,SAAA5B,EAAAuF,KAKAnE,EAAAS,QAEAC,SAAA,EAEA0D,KAAA,EACAC,aAAA,GAEAC,cAAA,EACAC,cAAA,EACAC,cAAA,EACAC,YAAA,EACAC,oBAAA,EACAC,kBAAA,EACAC,mBAAA,EACAC,mBAAA,GAEAC,WAAA,EACAC,oBAAA,GACAC,kBAAA,GACAC,iBAAA,GAEAC,cAAA,GACAC,gBAAA,GAEAC,YAAA,GACAC,aAAA,GACAC,cAAA,GACAC,iBAAA,GACAC,WAAA,GACAC,aAAA,GACAC,YAAA,GACAC,YAAA,GACAC,aAAA,GAEAC,kBAAA,GAEAC,WAAA,GACAC,iBAAA,GACAC,mBAAA,GACAC,mBAAA,GAEAC,oBAAA,GACAC,oBAAA,GAEAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,cAAA,GACAC,cAAA,GACAC,mBAAA,GAEAN,aAAA,GACAO,mBAAA,GACAC,qBAAA,GACAC,kBAAA,GACAC,qBAAA,GAEAC,sBAAA,GAEAC,OAAA,GACAC,QAAA,GAEAC,eAAA,GAEAC,YAAA,GACAC,oBAAA,GACAC,kBAAA,GACAC,sBAAA,GACAC,eAAA,GACAC,mBAAA,GACAC,iBAAA,GACAC,eAAA,GACAC,kBAAA,GACAC,iBAAA,GACAC,kBAAA,GACAC,cAAA,GAEAC,eAAA,GACAC,uBAAA,GACAC,qBAAA,GACAC,yBAAA,GACAC,kBAAA,GACAC,sBAAA,GACAC,oBAAA,GACAC,kBAAA,GACAC,qBAAA,GACAC,oBAAA,GACAC,qBAAA,GACAC,iBAAA,IC7FA3I,EAAA4B,KAAA,SAAA1B,GAEA,MAAA,UAAA0I,EAAAxI,EAAAyI,EAAAC,EAAAC,GAKAA,KAAA,KCDA/I,EAAA6B,MAAA,SAAA3B,GAEA,OAkBA8I,IAAA,SAAAC,EAAAC,EAAAJ,EAAAC,KAmBAI,OAAA,SAAAF,EAAAH,EAAAC,KAcApI,IAAA,SAAAmI,EAAAC,OC/CA/I,EAAA8B,KAAA,SAAA5B,EAAAkJ,GAEA,MAAA,UAAAC,MCfArJ,EAAAsJ,OAAAC,OAAAC,UAAAC,UAAA,EAEAzJ,EAAA0J,cAAA,EAGA1J,EAAA2J,UAAA,WAEA3J,EAAAsJ,QAAA,EACAtJ,EAAAQ,MAAAR,EAAAS,OAAAwG,QACAjH,EAAAP,QAAA,WAIAO,EAAA4J,WAAA,WAEA5J,EAAAsJ,QAAA,EACAtJ,EAAAQ,MAAAR,EAAAS,OAAAyG,SACAlH,EAAAP,QAAA,YAKAO,EAAA6J,sBAAA,WAEAN,OAAAO,kBAEAP,OAAAO,iBAAA,SAAA9J,EAAA2J,WAAA,GACAJ,OAAAO,iBAAA,UAAA9J,EAAA4J,YAAA,KAIAG,SAAAC,KAAAC,SAAAjK,EAAA2J,UACAI,SAAAC,KAAAE,UAAAlK,EAAA4J,aAKA5J,EAAAmK,mBAAA,WAEA,GAAAb,GAAAC,OAAAC,UAAAC,MAEAzJ,GAAA0J,eAEAJ,GAAA,GAGAA,KAAA,GAAAtJ,EAAAsJ,UAAA,EAEAtJ,EAAA2J,YAGAL,KAAA,GAAAtJ,EAAAsJ,UAAA,GAEAtJ,EAAA4J,cnBCAzJ,EAAAM,QAEA2J,OAAA,UACAC,WAAA,cACAC,UAAA,aACAC,QAAA,UACAC,WAAA,cACAC,aAAA,gBACAC,aAAA,gBACAC,MAAA,kCAGAxK,EAAAyK,MAEAC,KAAA,OACAC,OAAA,UAGA3K,EAAAoB,UAEAD,aAAA,KAGAnB,EAAA3H,WAIA6B,SAAA,SAAA+F,GAEA,MAAA,IAIA2K,MAAA,SAAA3M,EAAAC,EAAA2M,GAaA,QAAAC,KAEAtI,EAAA3D,IAAAmB,EAAAM,OAAAkK,MAAAO,GAGA,QAAAA,KAEAF,GAEAC,MAEAE,GAAAH,KAEA5M,EAAA/F,KAAA4L,EAAAtB,MAAA,GAEAsI,IAEAE,GAAA,GA5BA,GAAAxI,GAAApE,KACA0F,EAAA5F,GAAAsE,EACAwI,GAAA,CAiCA,OA/BAxI,GAAAvB,aAEAhD,EAAA/F,KAAA4L,EAAAtB,GACAwI,GAAA,GAyBAxI,EAAArE,GAAA6B,EAAAM,OAAAkK,MAAAO,GAGAC,GAIAC,UAAA,SAAAC,EAAAjN,EAAAC,EAAAiN,GAKA,QAAAC,KAEA,GAAAC,GAAA7I,EAAA8I,WAAAJ,EAAAC,KAAA,EAOA,OALAE,MAAA,GAEApN,EAAA/F,KAAA4L,EAAAuH,GAGAA,EAZA,GAAA7I,GAAApE,KACA0F,EAAA5F,GAAAsE,CAcA4I,MAEA5I,EAAAoI,MAAAQ,EAAA5I,GAAA,IAiBA8I,WAAA,SAAAJ,EAAAC,GAEA,GAAA3I,GAAApE,KACAmN,EAAA/I,EAAAlB,cAAAkB,EAAAgJ,cAAA,CAEA,KAAAlS,EAAA4R,GAEA,MAAAK,GAAA,MAAA,CAGAhT,GAAA2S,GAEAA,EAAA,GAAAA,GAAA1S,MAEAJ,EAAA8S,KAEAA,EAAA,GAAAA,GAGA,IAAApC,GAAAtG,EAAAiJ,kBAAAP,EAEA,OAAAA,aAAA1I,GAAAvC,OAEAuC,EAAAzB,OAAA2K,IAAA5C,IAGAtG,EAAAzB,OAAA8H,IAAAC,EAAAoC,GAGAA,GAEA1I,EAAAzB,OAAA2K,IAAA5C,GAEAtG,EAAAzB,OAAA4C,IAAAmF,GAEA3P,EAAA+R,GAEA1I,EAAAmJ,cAAAT,EAAArT,EAAAA,EAAAsT,GAEAI,EAEA,MAGA,GAIAK,UAAA,SAAA3L,GAEA,GAAA1E,GAAA6C,KAAA0K,GAEA,IAAA7P,EAAAsC,GAEA,IAAA,GAAA3B,GAAA,EAAAA,EAAA2B,EAAAzB,OAAAF,UAEAqG,GAAA1E,EAAA3B,eAKAqG,GAAA1E,IAKAsQ,SAAA,SAAA5L,EAAA6L,GAEA,GAAAhD,GAAA1K,KAAA2N,UAAA9L,EAAA6L,EAOA,OALA7S,GAAA6P,KAEAA,EAAAA,EAAAkD,KAAA5N,KAAA+C,eAGA2H,GAIAiD,UAAA,SAAA9L,EAAA6L,GAEA,GAAAhD,GAAA,IAEA,IAAA7P,EAAA6S,GACA,CACAhD,IAEA,KAAA,GAAAlP,GAAA,EAAAA,EAAAkS,EAAAhS,OAAAF,IAEAkP,EAAA1M,KAAA6D,EAAA6L,EAAAlS,SAKAkP,GAAA7I,EAAA6L,GAEAhD,IAEAA,EAAA7I,EAAA6L,GAAA1R,IAIA,OAAA0O,IAIA2C,kBAAA,SAAAP,GAEA,MAAAA,aAAA9M,MAAA6B,MAEAiL,EAAAe,OAEAhT,EAAAiS,GAEA9M,KAAA8N,kBAAAhB,GAEA/R,EAAA+R,GAEA9M,KAAAyN,SAAAX,EAAA9M,KAAA0K,KAGAoC,GAIAgB,kBAAA,SAAA1S,GAEA,MAAAA,GAAAwS,KAAA5N,KAAA+C,eAIAgL,OAAA,SAAAlM,GAEA,MAAA7B,MAAAyN,SAAA5L,EAAA7B,KAAA0K,MAIAsD,QAAA,SAAAnM,GAEA,MAAA7B,MAAA2N,UAAA9L,EAAA7B,KAAA0K,MAIAuD,UAAA,SAAApM,EAAA6L,EAAAQ,GAEA,GAAArT,EAAA6S,GACA,CACA,IAAA,GAAAlS,GAAA,EAAAA,EAAAkS,EAAAhS,OAAAF,IAEA,IAAA0S,EAAArM,EAAA6L,EAAAlS,KAEA,OAAA,CAIA,QAAA,EAIA,MAAA0S,GAAArM,EAAA6L,KAKAS,QAAA,WAEAnO,KAAAoO,OACApO,KAAAkB,QAAAU,EAAAM,OAAA8J,UAMAtI,YAAA,SAAAC,GAEA/J,EAAA+J,GAEA3D,KAAAqO,iBAAA1K,EAEArJ,EAAAqJ,GAEA3D,KAAAqO,iBAAA,SAAAnR,EAAA2B,GAEA,MAAA8E,KAAAzG,IAAAyG,IAAA9E,GAAA3B,EAAAyG,GAAA9E,EAAA8E,IAAA,GAKA3D,KAAAqO,iBAAA,SAAAnR,EAAA2B,GAEA,OAAA,IAOA4E,cAAA,SAAApI,GAEA2E,KAAAsO,mBAAAjP,EAAAhE,IAIA+S,KAAA,WAEApO,KAAAuO,YAEAvO,KAAA2C,OAAAyL,KAAApO,KAAAsO,qBAKAC,SAAA,WAEA,MAAAvO,MAAA2C,OAAA4L,SAAAvO,KAAAsO,qBAKAf,cAAA,SAAAiB,EAAA9D,EAAA7I,EAAAkL,GAEA,GAAA3I,GAAApE,KACA0K,EAAAA,GAAAtG,EAAA2J,OAAAS,GACA3M,EAAAA,GAAAuC,EAAAzB,OAAA4C,IAAAmF,GACA+D,EAAArK,EAAAsK,OAAApR,EAAAkR,GAEA,IAAA3M,EACA,CACA,GAAA8M,GAAA3O,KAAAqO,iBAAAxM,EAAA2M,EAEA,IAAAG,KAAA,GAAAA,EAAA,EAIA,WAFAlN,GAAAQ,MAAAR,EAAAS,OAAAoF,kBAAAlD,EAAAvC,EAAA2M,GAMA,GAAA3M,GAAAA,EAAA+M,OACA,CACA,GAAAC,GAAAhN,EAAAiN,SAAA,GACAC,KACAC,GAAA,EACAb,IAEA,KAAA,GAAAnR,KAAAwR,GAEA,GAAA,MAAAxR,EAAAkB,OAAA,GAAA,CAKA,GAAA+Q,GAAAJ,EAAA7R,GACAkS,EAAArN,EAAA+M,OAAA5R,EAEAR,GAAAyS,EAAAC,IAEArN,EAAA7E,GAAAyR,EAAAzR,GACAmR,EAAAnR,GAAAwR,EAAAxR,GAEAoH,EAAA3B,SAAA,IAEAZ,EAAAsN,OAAAnS,GAAAwR,EAAAxR,MAKA+R,EAAA/R,GAAAwR,EAAAxR,GACAgS,GAAA,GAGAnN,EAAA+M,OAAA5R,GAAAM,EAAAkR,EAAAxR,IAGAgS,EAEAnN,EAAAL,SAAAtH,EAAAgI,OAAAkN,eAAAZ,EAAAO,IAIAlN,EAAAL,SAAAtH,EAAAgI,OAAAmN,YAAAb,EAAAL,IAGAtM,EAAAL,SAAAtH,EAAAgI,OAAAoN,cAAAd,IAEApK,EAAA3B,SAAA,GAEAZ,EAAA0N,cAAAtK,OAKApD,GAAAuC,EAAAoL,YAAAf,EAAA1B,GAEA3I,EAAA3B,SAAA,GAEAZ,EAAAsN,OAAAX,EACA3M,EAAA+M,OAAA/M,EAAAsN,OAAAP,OAAAtR,EAAAkR,GAEA3M,EAAA0N,cAAAtK,IAIApD,EAAA+M,OAAA3Q,EAAAuQ,EAeA,OAXApK,GAAAzB,OAAA2K,IAAA5C,KAEAtG,EAAAzB,OAAA8H,IAAAC,EAAA7I,GACAuC,EAAAlD,QAAAU,EAAAM,OAAA+J,YAAApK,IAEAkL,GAEAlL,EAAAL,SAAAtH,EAAAgI,OAAAuN,QAIA5N,GAGA6N,0BAAA,SAAA7N,EAAA6I,GAEA,GAAAtG,GAAApE,IAEA,OAAA6B,GAEAA,EAAA8N,qBAEA9N,GAAA+M,OAEAxK,EAAAoJ,UAAA3L,GAEAA,EAAAL,SAAAtH,EAAAgI,OAAA0N,SAEA,IAGAxL,EAAAzB,OAAAiI,OAAAF,GACAtG,EAAAlD,QAAAU,EAAAM,OAAAiK,cAAAtK,IAEAA,EAAAL,SAAAtH,EAAAgI,OAAA2N,iBAEApO,EAAAQ,MAAAR,EAAAS,OAAA+D,cAAA7B,EAAAvC,IAEA,IAGA,GAGAiO,wBAAA,SAAAjO,EAAA6I,GAEA,GAAAtG,GAAApE,IAEA,OAAA6B,GAGAA,EAAA8N,qBAGA9N,GAAA+M,aACA/M,GAAAsN,OAAAP,OAEAxK,EAAAoJ,UAAA3L,GACAuC,EAAAoJ,UAAA3L,EAAAsN,QAEAtN,EAAAL,SAAAtH,EAAAgI,OAAA0N,QAEA/N,EAAA0N,cAAAtK,IAEA,IAGApD,EAAA0N,cAAAzK,GAEAV,EAAAzB,OAAAiI,OAAAF,GACAtG,EAAAlD,QAAAU,EAAAM,OAAAiK,cAAAtK,IAEAA,EAAAL,SAAAtH,EAAAgI,OAAA2N,iBAEApO,EAAAQ,MAAAR,EAAAS,OAAA+D,cAAA7B,EAAAvC,IAgBA,IAZAuC,EAAAd,MAAAsH,OAAAF,EAAA,SAAAqF,GAEAA,GAEAtO,EAAAQ,MAAAR,EAAAS,OAAA+D,cAAA7B,EAAA2L,MAKA,IAOAC,kBAAA,SAAAtF,GAEA,GAAAtG,GAAApE,KACA6B,EAAAuC,EAAAzB,OAAA4C,IAAAmF,EAEA,OAAAtG,GAAA3B,SAAA,EAEA2B,EAAAsL,0BAAA7N,EAAA6I,GAIAtG,EAAA0L,wBAAAjO,EAAA6I,IAMA1I,KAAA,WA0BA,QAAAiO,GAAAC,EAAA3L,GAEA9C,EAAAQ,MAAAR,EAAAS,OAAAqE,WAAAnC,EAAA8L,GAEA9L,EAAAzB,OAAAkC,OAEA,KAAA,GAAArJ,GAAA,EAAAA,EAAA0U,EAAAxU,OAAAF,IACA,CACA,GAAAgT,GAAA0B,EAAA1U,GACAkP,EAAAnG,EAAA/I,GACAiT,EAAArK,EAAAsK,OAAApR,EAAAkR,GAAA,IACA3M,EAAAuC,EAAAoL,YAAAf,GAAA,EAEA5M,GAAAsN,OAAAX,EAEAA,EAAA2B,UAEA1O,EAAAQ,MAAAR,EAAAS,OAAAsE,oBAAApC,EAAAvC,GAEAA,EAAA0N,cAAAxK,KAIAyJ,EAAAI,QAQAnN,EAAAQ,MAAAR,EAAAS,OAAAwE,iBAAAtC,EAAAvC,GAEAA,EAAAsN,OAAAP,OAAA/M,EAAA+M,SARAnN,EAAAQ,MAAAR,EAAAS,OAAAuE,kBAAArC,EAAAvC,GAEAA,EAAA0N,cAAArK,IAUAwF,IAAA7I,EAAAgM,OAEAzJ,EAAAzB,OAAA8H,IAAAC,EAAA7I,GAIAuC,EAAAd,MAAAsH,OAAAF,IAKAtG,EAAAvB,aAAA,EACAuB,EAAAnB,aAAA,EAEAmB,EAAAlD,QAAAU,EAAAM,OAAA6J,WAAA3H,IAEAA,EAAA+J,UAEA/J,EAAAgJ,cAAA,GAEAhJ,EAAAgM,UAIA,QAAAC,KAEAjM,EAAAvB,aAAA,EAEAuB,EAAAgJ,cAAA,EAEAhJ,EAAAgM,UAIAhM,EAAAlD,QAAAU,EAAAM,OAAA2J,QAAAzH,IA/FA,GAAAA,GAAApE,IAOA,OALAoE,GAAAgJ,cAAA,GAAAhJ,EAAAkM,aAEA7O,EAAAvB,MAAA,SAAAkE,EAAAmM,SAAAnM,GAGAA,EAAA3B,SAAA,OAEA2B,EAAAgJ,cAAA,EAEAhJ,EAAAgM,WAIAhM,EAAAvB,aAAA,EACAuB,EAAAlD,QAAAU,EAAAM,OAAA2J,QAAAzH,UAMAA,GAAAd,MAAAlB,IAAA6N,EAAAI,IA8EAE,SAAA,WAEAvQ,KAAAoD,aAAA,EAEA,IAAApD,KAAAmD,kBAEAnD,KAAAwQ,gBAIAA,aAAA,WAEA,GAAApM,GAAApE,IAEAoE,GAAAkM,aAAAlM,EAAAlB,cAEAkB,EAAAhB,cAEAgB,EAAAhB,aAAA,EAEA3B,EAAAQ,MAAAR,EAAAS,OAAA4D,aAAA1B,GAEAA,EAAAgM,YAMAA,QAAA,WAMA,QAAAK,GAAA9N,GAIA,IAAA,GAFA+N,MAEAlV,EAAA,EAAAA,EAAAmH,EAAAjH,OAAAF,IACA,CACA,GAAAqG,GAAAuC,EAAAmJ,cAAA5K,EAAAnH,IACAkP,EAAA7I,EAAAgM,MAEA6C,GAAAhG,GAAA7I,EAKA,IAAA,GAFA0C,GAAAH,EAAAzB,OAAA4B,KAEA/I,EAAA,EAAAA,EAAA+I,EAAA7I,OAAAF,IACA,CACA,GAAA2B,GAAAoH,EAAA/I,EAEA,MAAA2B,IAAAuT,IACA,CACA,GAAAlS,GAAA4F,EAAAzB,OAAA4C,IAAApI,EAEAqB,GAAAoQ,SAEAnN,EAAAQ,MAAAR,EAAAS,OAAAmE,mBAAAjC,EAAAjH,GAEAiH,EAAA4L,kBAAA7S,KAKAiH,EAAAvB,aAAA,EACAuB,EAAAlB,cAAA,EAEAkB,EAAAlD,QAAAU,EAAAM,OAAA4J,YAAA1H,IAEAA,EAAA+J,UAEA1M,EAAAQ,MAAAR,EAAAS,OAAAgE,YAAA9B,EAAAzB,GAGA,QAAAgO,GAAAhO,EAAAiO,GAEA,IAAAA,GAEAnP,EAAAmK,qBAEAnK,EAAAsJ,SAEA3G,EAAAtB,gBAAA,EAEArB,EAAAxB,KAAA,SAAAmE,EAAAyM,gBAAAzM,IAGA3C,EAAAQ,MAAAR,EAAAS,OAAAiE,oBAAA/B,KAIA3C,EAAAQ,MAAAR,EAAAS,OAAAkE,kBAAAhC,EAAAwM,GAEAxM,EAAAvB,aAAA,EACAuB,EAAAlD,QAAAU,EAAAM,OAAA2J,QAAAzH,KAjEA,GAAAA,GAAApE,IAEAoE,GAAAf,KAAA,MAAA5J,EAAAA,EAAAgX,EAAAE,IAqEAE,gBAAA,WAEA,GAAAzM,GAAApE,IAEAyB,GAAAQ,MAAAR,EAAAS,OAAAoE,mBAAAlC,GAEAA,EAAAtB,iBAEAsB,EAAAtB,gBAAA,EAEAsB,EAAAgM,YAKA/N,UAAA,WAEA,MAAArC,MAAA2C,OAAA2B,QAIAwM,SAAA,SAAApG,GAOA,MALA7P,GAAA6P,KAEAA,EAAA1K,KAAA8N,kBAAApD,IAGA1K,KAAA2C,OAAA4C,IAAAmF,IAIAlH,cAAA,SAAAY,GAEA,MAAA,UAAA0G,GAEA,GAAAJ,GAAAI,EAAAJ,IACA8D,EAAA1D,EAAAjJ,KAEA,QAAAiJ,EAAAiG,IAEA,IAAAnP,GAAAyK,KAAAC,KAEAlI,EAAAmJ,cAAAiB,EAAA9D,GACAtG,EAAA+J,UAEA1M,EAAAQ,MAAAR,EAAAS,OAAAyE,cAAAvC,EAAA0G,EAAAjJ,MAAA6I,EACA,MAEA,KAAA9I,GAAAyK,KAAAE,OAEAnI,EAAA4L,kBAAAtF,IAEAtG,EAAA+J,UAGA1M,EAAAQ,MAAAR,EAAAS,OAAA0E,gBAAAxC,EAAAsG,MAOA8E,YAAA,SAAAlF,EAAAyC,GAEA,MAAA,IAAA/M,MAAA6B,MAAAyI,EAAAyC,IAIAiE,OAAA,SAAA1G,GAEA,MAAAA,IAIAoE,OAAA,SAAAuC,GAEA,MAAAA,IAIAC,KAAA,SAAArP,GAEA,GAAAuC,GAAApE,KACA0K,EAAA7I,EAAAgM,MAGA,OAAAhM,GAAAsO,aAEA1O,GAAAQ,MAAAR,EAAAS,OAAAmF,aAAAjD,EAAAvC,IAMAuC,EAAAzB,OAAA2K,IAAA5C,IAUAtG,EAAAlD,QAAAU,EAAAM,OAAAgK,cAAArK,IAEAA,EAAAL,SAAAtH,EAAAgI,OAAAiP,iBAVA/M,EAAAzB,OAAA8H,IAAAC,EAAA7I,GACAuC,EAAAlD,QAAAU,EAAAM,OAAA+J,YAAApK,IACAuC,EAAA+J,UAEAtM,EAAAL,SAAAtH,EAAAgI,OAAAkP,qBASAhN,EAAA3B,SAAA,EAGAZ,EAAA0N,cAAArK,GAKArD,EAAA0N,cAAAvK,MAKA4F,OAAA,SAAA/I,GAEA,GAAAuC,GAAApE,KACA0K,EAAA7I,EAAAgM,MAGAzJ,GAAAzB,OAAA2K,IAAA5C,KAEAtG,EAAAzB,OAAAiI,OAAAF,GACAtG,EAAAlD,QAAAU,EAAAM,OAAAiK,cAAAtK,IACAuC,EAAA+J,UAEAtM,EAAAL,SAAAtH,EAAAgI,OAAAmP,UAIAxP,EAAAsO,UAAA,EAIAtO,EAAAyP,eAEA7P,EAAAQ,MAAAR,EAAAS,OAAAkG,mBAAAhE,EAAAvC,GAEAA,EAAAyP,cAAA,GAGAlN,EAAA3B,SAAA,EAGAZ,EAAA0N,cAAAxK,GAKAlD,EAAA0N,cAAA3K,KAMAtF,EAAAsC,EAAA3H,WCl5BAC,EAAAgI,QAEAqP,QAAA,UACA9B,MAAA,QACAL,cAAA,iBACAC,WAAA,cACArD,QAAA,UACA4D,OAAA,SACAwB,cAAA,gBACAD,cAAA,gBACAE,QAAA,UACA/B,aAAA,gBACAkC,aAAA,gBACA3B,gBAAA,yBAGA3V,EAAAD,WAGAwX,MAAA,SAAAhU,EAAAyQ,GAgBA,GAdAlO,KAAAsR,cAAA,EACAtR,KAAA0R,WAAA,KACA1R,KAAA2R,cAEAzD,EAEAlO,KAAA4R,KAAAnU,GAIAuC,KAAA6R,OAAApU,GAIAuC,KAAAqE,IAAAyN,cACA,CACA,GAAAC,GAAA/R,KAAAqE,IAAAT,SAEA,KAAA,GAAAlB,KAAAqP,GAEA/R,KAAAgS,aAAAtP,KAKAmP,OAAA,SAAApU,GAEA,GAAAwU,GAAAjS,KAAAqE,IAAA6N,SACAxE,EAAA1N,KAAAqE,IAAAqJ,OACA9J,EAAA5D,KAAAqE,IAAAT,SAEA,IAAA7I,EAAAkX,GACA,CACA,IAAA,GAAAzW,GAAA,EAAAA,EAAAkS,EAAAhS,OAAAF,IACA,CACA,GAAAwB,GAAA0Q,EAAAlS,GACA2W,EAAAF,EAAAjV,GACAoV,EAAA/U,EAAA8U,EAEAnS,MAAAhD,GAAAoV,EAGA,IAAA,GAAApV,KAAA4G,GAEA,GAAA5G,IAAAiV,GACA,CACA,GAAAE,GAAAF,EAAAjV,GACAoV,EAAA/U,EAAA8U,GACAhO,EAAAnE,KAAAgS,aAAAhV,EAEAmH,GAAAkO,IAAArS,KAAAoS,QAMA,KAAA,GAAA5W,GAAA,EAAAA,EAAAkS,EAAAhS,OAAAF,IACA,CACA,GAAAwB,GAAA0Q,EAAAlS,EAEAwE,MAAAhD,GAAAvD,EAIAuG,KAAA4R,KAAAnU,IAGAmU,KAAA,SAAAnU,EAAA6U,GAEA,GAAAvX,EAAA0C,GAEAZ,EAAAY,EAAAuC,UAEA,IAAA1F,EAAAmD,GACA,CACA,GAAA0G,GAAAnE,KAAAgS,aAAAvU,EAEA0G,GAEAA,EAAAkO,IAAArS,KAAAsS,GAIAtS,KAAAvC,GAAA6U,IAKAC,KAAA,SAAA9U,EAAAC,GAEA,GAAA7C,EAAA4C,GAEA,MAAAF,GAAAyC,KAAAvC,EAAAC,EAEA,IAAA3C,EAAA0C,GACA,CACA,IAAA,GAAAG,KAAAH,GAEAA,EAAAG,GAAAF,EAAAJ,EAAA0C,KAAApC,IAAAoC,KAAApC,EAGA,OAAAH,GAEA,GAAAnD,EAAAmD,GACA,CACA,GAAA0G,GAAAnE,KAAAgS,aAAAvU,EAEA,IAAA0G,EACA,CACA,GAAAG,GAAAH,EAAAoB,IAAAvF,KAEA,OAAAtC,GAAAJ,EAAAgH,GAAAA,EAIA,MAAA5G,GAAAJ,EAAA0C,KAAAvC,IAAAuC,KAAAvC,KAKA+U,QAAA,SAAAxV,EAAAyV,GAEA,GAAAtO,GAAAnE,KAAAgS,aAAAhV,EAEAmH,IAEAA,EAAAsO,OAAAzS,KAAAyS,IAIAC,UAAA,SAAA1V,EAAA2V,GAEA,GAAAxO,GAAAnE,KAAAgS,aAAAhV,EAEAmH,IAEAA,EAAAyO,SAAA5S,KAAA2S,IAIAE,WAAA,SAAA7V,EAAA8V,GAEA,GAAA3O,GAAAnE,KAAAgS,aAAAhV,EAEA,OAAAmH,IAAAA,EAAA4O,UAAA/S,KAAA8S,IAGAd,aAAA,SAAAhV,GAEA,GAAA+U,GAAA/R,KAAAqE,IAAAT,SAEA,IAAA5G,IAAA+U,GACA,CACA,GAAA5N,GAAA4N,EAAA/U,EAOA,OALAA,KAAAgD,MAAA2R,YAEAxN,EAAA6O,KAAAhT,MAGAmE,EAGA,OAAA,GAGA3B,MAAA,SAAAyQ,EAAAC,GAEAlT,KAAA4R,KAAAqB,EAAAC,GAEAlT,KAAAmT,sBAAA,WAEAnT,KAAAqE,IAAA6M,KAAAlR,MAEAA,KAAAmT,sBAAA,aAGAC,QAAA,WAEApT,KAAAqT,YAEArT,KAAAmT,sBAAA,aAEAnT,KAAAqE,IAAAuG,OAAA5K,MAEAA,KAAAmT,sBAAA,gBAIAE,QAAA,WAEA,OAAArT,KAAAmQ,UAAAnQ,KAAAqE,IAAA1B,OAAA2K,IAAAtN,KAAA6N,SAGAsF,sBAAA,SAAAG,GAEA,GAAAvB,GAAA/R,KAAAqE,IAAAT,SAEA,KAAA,GAAAlB,KAAAqP,GAEAA,EAAArP,GAAA4Q,GAAAtT,OAIAuP,cAAA,SAAAgE,GAEA,GAAAC,GAAA,GAAAD,GAAAvT,KAEAA,MAAA0R,WAOA1R,KAAA0R,WAAA+B,MAAAD,IALAxT,KAAA0R,WAAA8B,EACAxT,KAAA0R,WAAAgC,YAQA5E,QAAA,SAAA6E,GAEA,GAAAnF,GAAAxO,KAAAqE,IAAA2M,OAAAzT,EAAAyC,KAAAA,KAAAqE,IAAAqJ,QAAA,IAEAqE,EAAA/R,KAAAqE,IAAAT,UACAA,EAAA5D,KAAA2R,UAEA,KAAA,GAAAjP,KAAAkB,GAEAmO,EAAArP,GAAAsO,OAAAhR,KAAAwO,EAAAmF,EAGA,OAAAnF,IAGAX,KAAA,WAEA,MAAA7N,MAAAqE,IAAA0J,OAAA/N,OAGA4T,MAAA,WAEA,MAAA5T,MAAAqE,IAAA2J,QAAAhO,OAGA6T,SAAA,WAEA,QAAA7T,KAAA4O,QAGAkF,gBAAA,WAEA,QAAA9T,KAAAmP,QAGA4E,OAAA,WAEA,QAAA/T,KAAA4O,QAAA5O,KAAAmP,SAGA6E,YAAA,WAEA,GAAAC,GAAAjU,KAAA4O,OACAJ,EAAAxO,KAAA8O,SAAA,GACApB,EAAA1N,KAAAqE,IAAAqJ,MAEA,OAAAuG,GAAA3V,EAAAkQ,EAAAyF,EAAAvG,EAAAlR,GAAAgS,GAGAmB,YAAA,WAEA,IAAA3P,KAAA4O,OAEA,OAAA,CAGA,IAAAJ,GAAAxO,KAAA8O,SAAA,GACAmF,EAAAjU,KAAA4O,MAEA,KAAA,GAAA5R,KAAAwR,GACA,CACA,GAAAS,GAAAT,EAAAxR,GACAkS,EAAA+E,EAAAjX,EAEA,KAAAR,EAAAyS,EAAAC,GAEA,OAAA,EAIA,OAAA,IAKA5P,EAAApF,EAAAD,WAAA,GClUA2I,EAAA3I,WASA4K,MAAA,WAMA,MAJA7E,MAAAsE,OAAA5I,OAAA,EACAsE,KAAAuE,KAAA7I,OAAA,EACAsE,KAAAwE,WAEAxE,MAWAyK,IAAA,SAAAC,EAAA4H,GAaA,MAXA5H,KAAA1K,MAAAwE,QAEAxE,KAAAsE,OAAAtE,KAAAwE,QAAAkG,IAAA4H,GAIAtS,KAAAwE,QAAAkG,GAAA1K,KAAAsE,OAAA5I,OACAsE,KAAAsE,OAAAtG,KAAAsU,GACAtS,KAAAuE,KAAAvG,KAAA0M,IAGA1K,MASAuF,IAAA,SAAAmF,GAEA,MAAA1K,MAAAsE,OAAAtE,KAAAwE,QAAAkG,KAUAE,OAAA,SAAAF,GAEA,GAAAwJ,GAAAlU,KAAAwE,QAAAkG,EAOA,OALAnQ,GAAA2Z,IAEAlU,KAAAmU,SAAAD,GAGAlU,MAUAmU,SAAA,SAAAD,GAEA,GAAAxJ,GAAA1K,KAAAuE,KAAA2P,GACAE,EAAApU,KAAAsE,OAAA+P,MACAC,EAAAtU,KAAAuE,KAAA8P,KAWA,OATAH,GAAAlU,KAAAsE,OAAA5I,SAEAsE,KAAAsE,OAAA4P,GAAAE,EACApU,KAAAuE,KAAA2P,GAAAI,EACAtU,KAAAwE,QAAA8P,GAAAJ,SAGAlU,MAAAwE,QAAAkG,GAEA1K,MASAsN,IAAA,SAAA5C,GAEA,MAAAA,KAAA1K,MAAAwE,SAQA+P,KAAA,WAEA,MAAAvU,MAAAsE,OAAA5I,QAWA8Y,OAAA,SAAA3U,EAAA4U,GAOA,IAAA,GALAC,GAAAD,GAAA,GAAA7R,GACAnH,EAAAuE,KAAAuU,OACAjQ,EAAAtE,KAAAsE,OACAC,EAAAvE,KAAAuE,KAEA/I,EAAA,EAAAC,EAAAD,EAAAA,IACA,CACA,GAAAmZ,GAAArQ,EAAA9I,GACA2B,EAAAoH,EAAA/I,EAEAqE,GAAA8U,EAAAxX,IAEAuX,EAAAjK,IAAAtN,EAAAwX,GAIA,MAAAD,IASAE,QAAA,WAKA,IAAA,GAHA5T,GAAAhB,KAAAuU,OAAA,EACAM,EAAAjZ,KAAAkZ,KAAA9T,EAAA,GAEAxF,EAAA,EAAAqZ,EAAArZ,EAAAA,IAEAyB,EAAA+C,KAAAsE,OAAA9I,EAAAwF,EAAAxF,GACAyB,EAAA+C,KAAAuE,KAAA/I,EAAAwF,EAAAxF,EAKA,OAFAwE,MAAA+U,eAEA/U,MAQAuO,SAAA,SAAAlT,GAEA,IAAAA,EAEA,OAAA,CAKA,KAAA,GAFAsH,GAAA3C,KAAAsE,OAEA9I,EAAA,EAAAC,EAAAkH,EAAAjH,OAAA,EAAAD,EAAAD,EAAAA,IAEA,GAAAH,EAAAsH,EAAAnH,GAAAmH,EAAAnH,EAAA,IAAA,EAEA,OAAA,CAIA,QAAA,GAeA4S,KAAA,SAAA/S,GAKA,QAAA2Z,GAAAC,EAAAC,GAMA,IAJA,GAAAC,GAAAC,EAAA9Q,OAAA1I,KAAAyZ,OAAAH,EAAAD,GAAA,IACAzZ,EAAAyZ,EACAK,EAAAJ,EAEAI,GAAA9Z,GACA,CACA,KAAAH,EAAA+Z,EAAA9Q,OAAA9I,GAAA2Z,GAAA,GAAA3Z,GACA,MAAAH,EAAA+Z,EAAA9Q,OAAAgR,GAAAH,GAAA,GAAAG,GAEAA,IAAA9Z,IACAyB,EAAAmY,EAAA9Q,OAAA9I,EAAA8Z,GACArY,EAAAmY,EAAA7Q,KAAA/I,EAAA8Z,GACA9Z,IACA8Z,KAIA,MAAA9Z,GAIA,QAAA+Z,GAAAN,EAAAC,GAEA,GAAAhB,GAAAc,EAAAC,EAAAC,EAEAhB,GAAA,EAAAe,GAEAM,EAAAN,EAAAf,EAAA,GAGAgB,EAAAhB,GAEAqB,EAAArB,EAAAgB,GArCA,GAAAE,GAAApV,KAyCAkV,EAAAlV,KAAAuU,OAAA,CAUA,OAPAW,GAAA,IAEAK,EAAA,EAAAL,GAEAlV,KAAA+U,gBAGA/U,MASA+U,aAAA,WAEA/U,KAAAwE,UAEA,KAAA,GAAAhJ,GAAA,EAAAga,EAAAxV,KAAAuE,KAAA7I,OAAA8Z,EAAAha,EAAAA,IAEAwE,KAAAwE,QAAAxE,KAAAuE,KAAA/I,IAAAA,CAGA,OAAAwE,QC5SAyE,EAAAxK,WAEA4K,MAAA,SAAAhD,GAEA7B,KAAA6B,MAAAA,EACA7B,KAAAoE,GAAAvC,EAAAwC,IACArE,KAAAyV,KAAA,KACAzV,KAAA0V,UAAA,GAGAjC,MAAA,SAAAD,GAEAxT,KAAAyV,OAAAjC,EAAA9O,WAEA1E,KAAAyV,KAAAhC,MAAAD,GAIAxT,KAAAyV,KAAAjC,GAIAE,QAAA,WAEA1T,KAAAoE,GAAAjB,mBAEAnD,KAAA2V,IAAA3V,KAAAoE,GAAApE,KAAA6B,QAGA8T,IAAA,SAAAvR,EAAAvC,GAEA,KAAA,sCAGA+T,OAAA,WAmBA,MAjBA5V,MAAA0V,WAEA1V,KAAA0V,UAAA,GAEA1V,KAAA6B,MAAA6P,WAAA1R,KAAAyV,OAEAzV,KAAAyV,KAAA/B,UAGA1T,KAAAoE,GAAAjB,mBAEA,IAAAnD,KAAAoE,GAAAjB,kBAEAnD,KAAAoE,GAAAoM,gBAIAxQ,MAGA6V,QAAA,SAAAtC,GAEAvT,KAAAyV,OAEAzV,KAAAyV,KAAA,GAAAlC,GAAAvT,KAAA6B,SAIAiU,WAAA,SAAAvC,GAEA,GAAAxC,GAAA,GAAAwC,GAAAvT,KAAA6B,MAEAkP,GAAA0E,KAAAzV,KAAAyV,KACAzV,KAAAyV,KAAA1E,GAGAxG,QAAA,WAEA,GAAAwG,GAAA/Q,IAEA,OAAA,YAEA+Q,EAAAgF,UAAAhc,MAAAgX,EAAAiF,WACAjF,EAAA6E,WAIAG,UAAA,aAKAvL,QAAA,WAEA,GAAAuG,GAAA/Q,IAEA,OAAA,YAEA+Q,EAAAkF,UAAAlc,MAAAgX,EAAAiF,WACAjF,EAAA6E,WAIAK,UAAA,cCrGAxZ,EAAA,GAAAgI,IAAA,EAAA,oBAAAG,GAGA+Q,IAAA,SAAAvR,EAAAvC,GAEA,GAAA6I,GAAA7I,EAAAgM,MAGA,OAAAhM,GAAAsN,YAQAtN,EAAA+M,QAGA/M,EAAAsN,OAAAgB,UAAA,EAEA/L,EAAAd,MAAAmH,IAAAC,EAAA7I,EAAAsN,OAAAnP,KAAAuK,UAAAvK,KAAAwK,aAIA/I,EAAAQ,MAAAR,EAAAS,OAAAsG,qBAAA3G,GAEAuC,EAAAd,MAAAsH,OAAAF,EAAA1K,KAAAuK,UAAAvK,KAAAwK,cAjBA/I,EAAAQ,MAAAR,EAAAS,OAAAqG,kBAAA1G,GAEA7B,KAAA4V,WAmBAG,UAAA,SAAArL,EAAA8D,EAAA0H,GAEA,GAAArU,GAAA7B,KAAA6B,KAEAJ,GAAAQ,MAAAR,EAAAS,OAAA4F,aAAAjG,GAEAA,EAAA+M,QAEA/M,EAAA0N,cAAAxK,IAIAkR,UAAA,SAAA9U,GAEA,GAAAU,GAAA7B,KAAA6B,KAEAJ,GAAAQ,MAAAR,EAAAS,OAAAmG,mBAAAxG,EAAAV,GAEAU,EAAA+M,QAEA/M,EAAA0N,cAAAxK,MCnDAtI,EAAA,GAAAgI,IAAA,EAAA,kBAAAK,GAGA6Q,IAAA,SAAAvR,EAAAvC,GAEA,GAAA6I,GAAA7I,EAAAgM,MAEAhM,GAAAyP,cAAA,EAEAlN,EAAAzB,OAAA2K,IAAA5C,KAEAtG,EAAAzB,OAAAiI,OAAAF,GACAtG,EAAAlD,QAAA,iBAAAW,IAEAuC,EAAA+J,UAEAtM,EAAAL,SAAA,YAGA4C,EAAAd,MAAAsH,OAAAF,EAAA1K,KAAAuK,UAAAvK,KAAAwK,cCnBA/N,EAAA,GAAAgI,IAAA,EAAA,qBAAAM,GAGA4Q,IAAA,SAAAvR,EAAAvC,GAGAA,EAAAyP,cAAA,EACAzP,EAAAsO,UAAA,EAGAnQ,KAAA0K,IAAA7I,EAAAgM,OAGAzJ,EAAAf,KAAA,SAAAxB,EAAApI,EAAAuG,KAAAuK,UAAAvK,KAAAwK,YAGAuL,UAAA,SAAAzL,GAEAtK,KAAAmW,gBAGAF,UAAA,SAAA3L,EAAAsG,GAEA,GAAAlG,GAAA1K,KAAA0K,IACA7I,EAAA7B,KAAA6B,KAEA,OAAA+O,GAAA,MAAAA,GAEAnP,EAAAQ,MAAAR,EAAAS,OAAA6F,eAAA/H,KAAA0K,EAAA7I,GAEA7B,KAAAmW,gBAEA,IAAAvF,EAEAnP,EAAAQ,MAAAR,EAAAS,OAAA8F,aAAAhI,KAAA4Q,EAAAlG,EAAA7I,IAKAJ,EAAAmK,qBAGAnK,EAAAsJ,QAEAtJ,EAAAxB,KAAA,SAAAD,KAAAoW,aAAApW,MAGAyB,EAAAQ,MAAAR,EAAAS,OAAA+F,eAAAjI,KAAA6B,KAIAsU,aAAA,WAEA,GAAA/R,GAAApE,KAAAoE,GACAsG,EAAA1K,KAAA0K,IACA7I,EAAA7B,KAAA6B,KAEAJ,GAAAQ,MAAAR,EAAAS,OAAAiG,cAAAnI,KAAA0K,EAAA7I,GAGA7B,KAAA8V,WAAAhR,GAGArD,EAAAQ,MAAAR,EAAAS,OAAA2F,eAAA7H,KAAA0K,EAAA7I,GAEAuC,EAAAb,MACAwN,GAAAnP,EAAAyK,KAAAE,OACA7B,IAAAA,KAIA0L,aAAA,WAEA,GAAAvU,GAAA7B,KAAA6B,KAEAJ,GAAAQ,MAAAR,EAAAS,OAAAgG,cAAAlI,KAAA6B,GAEAA,EAAA0N,cAAAxK,MC7EAtI,EAAA,GAAAgI,IAAA,EAAA,kBAAAO,GAGA2Q,IAAA,SAAAvR,EAAAvC,GAGA,GAAAA,EAAAsO,SAIA,MAFA1O,GAAAQ,MAAAR,EAAAS,OAAAuF,mBAAAzH,KAAA6B,GAEA7B,KAAA4V,QAIA,IAAAlL,GAAA7I,EAAAgM,OACAW,EAAA3M,EAAAiN,SAAA,EAGAjN,GAAAsN,OAOAtS,EAAA2R,EAAA3M,EAAAsN,QALAtN,EAAAsN,OAAAX,EAQApK,EAAAd,MAAAmH,IAAAC,EAAA7I,EAAAsN,OAAAnP,KAAAuK,UAAAvK,KAAAwK,YAGAuL,UAAA,SAAArL,EAAA8D,EAAA0H,GAEA,GAAArU,GAAA7B,KAAA6B,KAEAJ,GAAAQ,MAAAR,EAAAS,OAAAqF,WAAAvH,KAAA6B,GAEA7B,KAAA6V,QAAA3Q,IAGA+Q,UAAA,SAAA9U,GAEA,GAAAU,GAAA7B,KAAA6B,KAEAJ,GAAAQ,MAAAR,EAAAS,OAAAsF,iBAAAxH,KAAA6B,EAAAV,GAEAnB,KAAA6V,QAAA3Q,MC9CAzI,EAAA,GAAAgI,IAAA,EAAA,gBAAAQ,GAGA0Q,IAAA,SAAAvR,EAAAvC,GAEAuC,EAAAd,MAAAmH,IAAA5I,EAAAgM,OAAAhM,EAAAsN,OAAAnP,KAAAuK,UAAAvK,KAAAwK,cCLA/N,EAAA,GAAAgI,IAAA,EAAA,mBAAAS,GAGAyQ,IAAA,SAAAvR,EAAAvC,GAGA,GAAAA,EAAAsO,SAIA,MAFA1O,GAAAQ,MAAAR,EAAAS,OAAAyF,oBAAA3H,KAAA6B,GAEA7B,KAAA4V,QAIA,IAGAS,IAHArW,KAAA0K,IAAA7I,EAAAgM,OAGA7N,KAAAqW,OAAAxU,EAAAmS,aAAA,GAGA,OAAApV,GAAAyX,GAEArW,KAAA4V,aAIAxR,GAAAf,KAAAxB,EAAA+M,OAAA,MAAA,OAAA/M,EAAAwU,EAAArW,KAAAuK,UAAAvK,KAAAwK,YAGAuL,UAAA,SAAAzL,GAEA,GAAAzI,GAAA7B,KAAA6B,KAEAJ,GAAAQ,MAAAR,EAAAS,OAAAkF,YAAApH,KAAA6B,GAEA7B,KAAAsW,WAAAhM,IAGA2L,UAAA,SAAA3L,EAAAsG,GAEA,GAEA/O,IADA7B,KAAAoE,GACApE,KAAA6B,MAGA,OAAA+O,GAEAnP,EAAAQ,MAAAR,EAAAS,OAAA6E,cAAA/G,KAAAsK,EAAAzI,GAGA7B,KAAAsW,WAAAhM,EAAAzI,EAAA7B,KAAAoE,KAEA,MAAAwM,GAAA,MAAAA,GAEAnP,EAAAQ,MAAAR,EAAAS,OAAA8E,iBAAAhH,KAAA6B,GAEA7B,KAAA8V,WAAAhR,IAEA,IAAA8L,EAEAnP,EAAAQ,MAAAR,EAAAS,OAAA+E,WAAAjH,KAAA6B,EAAA+O,IAKAnP,EAAAmK,qBAGAnK,EAAAsJ,SAEAlJ,EAAAyP,cAAA,EAEA7P,EAAAxB,KAAA,SAAAD,KAAAoW,aAAApW,OAGAyB,EAAAQ,MAAAR,EAAAS,OAAAgF,aAAAlH,KAAA6B,KAIAyU,WAAA,SAAAhM,GAEA,GAAAlG,GAAApE,KAAAoE,GACAvC,EAAA7B,KAAA6B,MACAwU,EAAArW,KAAAqW,MAGA,IAAAxU,EAAAsO,SAIA,WAFA1O,GAAAQ,MAAAR,EAAAS,OAAAyF,oBAAA3H,KAAA6B,EAAAyI,EAMA,KAAA,GAAAtN,KAAAsN,GAEAtN,IAAAqZ,KAEAA,EAAArZ,GAAAsN,EAAAtN,GAIAyE,GAAAQ,MAAAR,EAAAS,OAAA2E,YAAA7G,KAAAqW,EAAAxU,GAIAA,EAAA+M,SAEAxK,EAAA3B,SAAA,EAEAZ,EAAA+M,UAIA/M,EAAA+M,OAAA/M,EAAAsN,OAAAP,WAKAxK,EAAAmJ,cAAA8I,EAAArW,KAAA0K,IAAA7I,GAGAJ,EAAAQ,MAAAR,EAAAS,OAAA4E,aAAA9G,KAAAqW,EAAAxU,GAEAuC,EAAAb,MACAwN,GAAAnP,EAAAyK,KAAAC,KACAzK,MAAAwU,EACA3L,IAAA1K,KAAA0K,OAIA0L,aAAA,WAEA,GAAAvU,GAAA7B,KAAA6B,KAEAA,GAAAyP,eAEAzP,EAAAyP,cAAA,EACAzP,EAAA0N,cAAArK,GAEAzD,EAAAQ,MAAAR,EAAAS,OAAAiF,YAAAnH,KAAA6B,OC5IAJ,EAAAqC,aAIArC,EAAA8U,OACAC,KAAA,EACApc,MAAA,EACAqc,IAAA,EACAC,KAAA,GAGAjV,EAAA6K,MACAkK,KAAA,EACApc,MAAA,GAGA4J,EAAA/J,WAWA+H,KAAA,SAAAL,EAAAgV,EAAAjV,GAEA1B,KAAA2B,SAAAA,EACA3B,KAAA0C,KAAAiU,EACA3W,KAAA0B,QAAAA,EACA1B,KAAAsD,MAAA5B,EAAA4B,OAAA7B,EAAA8U,MAAAC,KACAxW,KAAAkR,KAAAxP,EAAAwP,MAAAzP,EAAA6K,KAAAkK,KACAxW,KAAA4W,OAAAlV,EAAAkV,KACA5W,KAAAL,WAAA+B,EAAA/B,SACAK,KAAA6W,gBACA7W,KAAA6C,aAAA,EACA7C,KAAA8W,cAAApV,EAAAoV,eAAA,gBACA9W,KAAA+W,eAAArV,EAAAqV,mBACA/W,KAAAgX,gBAAAtV,EAAAqV,cAEA,IAAAE,GAAAjX,KAAAiX,SAAAtV,EAAAgV,EAAAjV,EAEAvH,GAAAuH,EAAAG,OAMAoV,EAAAnd,KAAAkG,KAAA0B,EAAAG,OAJAJ,EAAA8D,IAAA7D,EAAAG,MAAAoV,EAAAjX,OAYAiX,SAAA,SAAAtV,EAAAgV,EAAAjV,GAEA,MAAA,UAAA+D,GAEAzF,KAAA6B,MAAA4D,EAEAzF,KAAAL,WAEAK,KAAAL,SAAAxE,EAAAwG,EAAA+L,OAAA1N,KAAA0C,SAAA,GAGA1C,KAAAgX,eAEAhX,KAAAkX,qBAGAlX,KAAAmX,cAAAxV,EAAAgV,EAAAjV,KAWAyV,cAAA,SAAAxV,EAAA+L,EAAAhM,KAKA0V,qBAAA,WAEApX,KAAA6C,aAAA,CAIA,KAAA,GAFAwU,GAAArX,KAAA6W,aAEArb,EAAA,EAAAA,EAAA6b,EAAA3b,OAAAF,IAEAwE,KAAAsX,WAAAD,EAAA7b,GAGA6b,GAAA3b,OAAA,GAYAsX,KAAA,SAAAnR,GAEA7B,KAAA6C,YAMA7C,KAAAsX,WAAAzV,GAJA7B,KAAA6W,aAAA7Y,KAAA6D,IAQAyV,WAAA,SAAAzV,KAKA4Q,OAAA,SAAA5Q,EAAAiL,KAKA8F,SAAA,SAAA/Q,EAAAiL,KAKAiG,UAAA,SAAAlR,EAAAiL,KAKAvH,IAAA,SAAA1D,KAKAwQ,IAAA,SAAAxQ,EAAAiL,GAEA9M,KAAA4S,SAAA/Q,GACA7B,KAAAyS,OAAA5Q,EAAAiL,IAGAkE,OAAA,SAAAnP,EAAA6S,EAAAf,KAKA4D,QAAA,SAAA1V,KAKA2V,SAAA,SAAA3V,KAKA4V,UAAA,SAAA5V,KAKA6V,WAAA,SAAA7V,KAKA8V,YAAA,SAAApY,EAAAqY,GAEA,GAAAC,IAAA,CAEA,IAAAvd,EAAAsd,GAEArY,EAAAqY,KAEArY,EAAAqY,GAAA,KACAC,GAAA,OAKA,KAAA,GAAArc,GAAA,EAAAA,EAAAoc,EAAAlc,OAAAF,IACA,CACA,GAAAsc,GAAAF,EAAApc,EAEA+D,GAAAuY,KAEAvY,EAAAuY,GAAA,KACAD,GAAA,GAUA,MALAA,IAAA7X,KAAA4W,OAAArX,EAAAwU,UAEAxU,EAAAiD,QAGAqV,GAGAE,aAAA,SAAAxY,EAAAqY,EAAAhS,EAAAoS,GAEA,GAAAH,IAAA,CAIA,IAFAjS,EAAAiI,OAEAvT,EAAAsd,GACA,CACA,GAAAK,GAAA1Y,EAAAqY,GACAM,EAAAtS,EAAAoS,EAEAxb,GAAAyb,EAAAC,KAEA3Y,EAAAqY,GAAAM,EACAL,GAAA,OAKA,KAAA,GAAArc,GAAA,EAAAA,EAAAoc,EAAAlc,OAAAF,IACA,CACA,GAAAsc,GAAAF,EAAApc,GACAyc,EAAA1Y,EAAAuY,GACAK,EAAAH,EAAAxc,GACA4c,EAAAxS,EAAAuS,EAEA3b,GAAAyb,EAAAG,KAEA7Y,EAAAuY,GAAAxa,EAAA8a,GACAP,GAAA,GAUA,MALAA,IAAA7X,KAAA4W,OAAArX,EAAAwU,UAEAxU,EAAAiD,QAGAqV,GAGAQ,eAAA,SAAAC,EAAAC,GAEA,IAAAA,EAEA,MAAA,KAKA,KAAA,GAFAC,MAEAhd,EAAA,EAAAA,EAAA8c,EAAA5c,OAAAF,IACA,CACA,GAAAsX,GAAA9S,KAAAyY,UAAAH,EAAA9c,GAAA+c,EAEA,QAAAzF,GAEA0F,EAAAxa,KAAA8U,GAIA,MAAA0F,IAGAC,UAAA,SAAA3F,EAAAyF,GAEA,GAAAzF,EAEA,OAAAyF,GAEA,IAAA9W,GAAA6K,KAAAlS,MACA,MAAA0Y,GAAAhE,SAAA,EAEA,KAAArN,GAAA8U,MAAAnc,MACA,GAAA0Y,EAAA3D,OAEA,MAAA2D,GAAA3D,MAIA,IAAAuJ,GAAA5F,EAAAhE,SAAA,EAOA,OALAgE,GAAAlE,SAEA8J,EAAA9J,OAAAkE,EAAAlE,QAGA8J,CAGA,KAAAjX,GAAA8U,MAAAE,IACA,MAAA3D,GAAAjF,MAEA,KAAApM,GAAA8U,MAAAG,KACA,MAAA5D,GAAAc,QAKA,MAAA,OAKAsD,mBAAA,WAEA,IAAA,GAAAJ,KAAA9W,MAAA+W,eACA,CACA,GAAArU,GAAA1C,KAAA+W,eAAAD,EAEArV,GAAA8D,IAAA7C,EAAA1C,KAAA2Y,iBAAA3Y,QAIA2Y,iBAAA,SAAA7B,GAEA,MAAA,UAAArR,GAEAzF,KAAA+W,eAAAD,GAAArR,IAIAmT,iBAAA,SAAA/W,GAEA,MAAAA,GAAA7B,KAAA8W,gBAGA+B,yBAAA,SAAAhX,GAEA,GAAAiV,GAAA9W,KAAA4Y,iBAAA/W,EAEA,IAAAiV,IAAA9W,MAAA+W,eACA,CACA,GAAAlV,GAAA7B,KAAA+W,eAAAD,EAEA,OAAAjV,GAAAxH,SAGA,OAAA,GAGAye,mBAAA,SAAAhM,GAEA,GAAA/R,EAAA+R,GACA,CACA,GAAA1I,GAAApE,KAAA6Y,yBAAA/L,EAEA,OAAA1I,GAAA8I,WAAAJ,GAGA,OAAA,GAGAD,UAAA,SAAAkG,EAAAgG,EAAAjM,EAAAjN,GAEA,GAAAG,KAAAgX,cACA,CACA,GAAAhX,KAAAgZ,kBAAAlM,EAAAjN,GAEA,OAAA,CAIAG,MAAAiZ,uBAAAF,KAOAC,kBAAA,SAAAlM,EAAAjN,GAEA,GAAA9E,EAAA+R,GACA,CACA,GAAA1I,GAAApE,KAAA6Y,yBAAA/L,EAEA,IAAA1I,KAAA,EAIA,MAFAA,GAAAyI,UAAAC,EAAAoM,QAAAlZ,OAEA,EAIA,OAAA,GAGAiZ,uBAAA,SAAApX,GAEA,IAAA,GAAAiV,KAAA9W,MAAA+W,eACA,CACA,GAAApS,GAAA3E,KAAA+W,eAAAD,EAEA,IAAAjV,YAAA8C,GAEA,MAAAmS,GAIA,OAAA,GAGAqC,eAAA,SAAApG,EAAAlT,GAEA,GAAAG,KAAAgX,cAEAhX,KAAAoZ,qBAAArG,EAAAlT,OAGA,CACA,GAAAwZ,GAAArZ,KAAA6B,MAAAxH,QAEAgf,GAAA7M,MAAAxM,KAAAsZ,aAAAvG,EAAAlT,GAAAG,QAIAsZ,aAAA,SAAAvG,EAAAlT,GAEA,MAAA,UAAAuE,GAEA,GAAA0O,GAAA1O,EAAAzB,OAAA6R,OAAAzB,EAEAlT,GAAA/F,KAAAkG,KAAA8S,KAIAsG,qBAAA,SAAArG,EAAAlT,GAEA,GAAAiT,GAAA,GAAAlQ,GACA8C,EAAA1F,KACAuZ,EAAA7a,EAAAsB,KAAA+W,gBACAlI,EAAA,CAEA,KAAA,GAAAiI,KAAA9W,MAAA+W,eACA,CACA,GAAApS,GAAA3E,KAAA+W,eAAAD,GACA1S,EAAAO,EAAAtK,QAEA+J,GAAAoI,MAAA,SAAApI,GAEAA,EAAAzB,OAAA6R,OAAAzB,EAAAD,KAEAjE,IAAA0K,GAEA1Z,EAAA/F,KAAA4L,EAAAoN,QC3cArR,EAAAqC,UAAA0V,UAAArU,EAEA1I,EAAA,GAAAuH,GAAAmB,GAGAgS,cAAA,SAAAxV,EAAAgV,EAAAjV,GAEA,GAAA2X,GAAArZ,KAAA6B,MAAAxH,QAEA2F,MAAA0Y,MAAAhX,EAAAgX,OAAAW,EAAA3W,KAAA,IAAA2W,EAAA3O,IAEAjJ,EAAAQ,MAAAR,EAAAS,OAAAuH,eAAAzJ,MAEAA,KAAAoX,wBAGAE,WAAA,SAAAzV,GAEA,GAAA4X,GAAAzZ,KACAqZ,EAAArZ,KAAA6B,MAAAxH,SACAqf,EAAA7X,EAAA7B,KAAA0C,MAEAyB,EAAAtC,EAAA8P,WAAA3R,KAAA0C,OAEAgX,QAAAA,EACA7X,MAAA,KACA8X,QAAA,EAEAC,UAAA,WAEAnY,EAAAQ,MAAAR,EAAAS,OAAAwH,uBAAA+P,EAAA5X,EAAAsC,GAEAnE,KAAA6Z,WAAA,GAEAhY,EAAAuR,WAGA0G,QAAA,WAEArY,EAAAQ,MAAAR,EAAAS,OAAAyH,qBAAA8P,EAAA5X,EAAAsC,GAEAnE,KAAA+Z,cAAAlY,EAAAsC,EAAAtC,QAAA7B,KAAA6Z,WAAA,GAEAhY,EAAAuR,WAKAxU,GAAA8a,IAAAL,EAAApL,UAAApM,EAAA7B,KAAA0Y,MAAAxd,KAEAwe,EAAA7b,EAAAgE,EAAA7B,KAAA0Y,OAEAjX,EAAAQ,MAAAR,EAAAS,OAAA0H,yBAAA5J,KAAA6B,EAAA6X,IAGA9a,EAAA8a,KAEAjY,EAAAQ,MAAAR,EAAAS,OAAA2H,kBAAA7J,KAAA6B,EAAA6X,GAEAL,EAAAxM,UAAA6M,EAAA1Z,KAAAsX,WAAAzV,EAAAsC,GAAAnE,QAKAqS,IAAA,SAAAxQ,EAAAiL,GAEA,GAAA5R,EAAA4R,GAKA,CACA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACAyY,EAAAuG,EAAAnM,WAAAJ,GACA3I,EAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEAoQ,KAAA9S,KAAA+Z,cAAAlY,EAAAiR,KAEA9S,KAAAga,WAAA7V,GACAnE,KAAAia,WAAApY,EAAAsC,EAAA2O,QAXA9S,MAAA4S,SAAA/Q,IAiBA4Q,OAAA,SAAA5Q,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACAyY,EAAAuG,EAAAnM,WAAAJ,GACA3I,EAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEAoQ,IAEA3O,EAAAtC,QAAAiR,IAEA9S,KAAAga,WAAA7V,GACAnE,KAAAia,WAAApY,EAAAsC,EAAA2O,KAMAF,SAAA,SAAA/Q,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,MACAoQ,EAAAuG,EAAAnM,WAAAJ,EAEAgG,IAAA3O,EAAAtC,QAAAiR,IAEA9S,KAAAga,WAAA7V,GACAnE,KAAAka,gBAAArY,KAKAkR,UAAA,SAAAlR,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,MACAoQ,EAAAuG,EAAAnM,WAAAJ,EAEA,OAAAgG,KAAA3O,EAAAtC,OAIAoY,WAAA,SAAApY,EAAAsC,EAAA2O,GAEA9S,KAAAma,SAAAhW,EAAA2O,GACA9S,KAAAoa,iBAAAvY,EAAAiR,GACA9S,KAAAqa,YAAAxY,EAAAsC,IAIAoB,IAAA,SAAA1D,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,OAAAyB,GAAAtC,OAIAmP,OAAA,SAAAnP,EAAA6S,EAAAf,GAEA,GAAAxP,GAAAtC,EAAA8P,WAAA3R,KAAA0C,MACA6V,EAAA5E,EAAA3T,KAAAkR,KAAAlR,KAAAsD,KAEAa,IAAAoU,IAEA7D,EAAA1U,KAAA0C,MAAA1C,KAAAyY,UAAAtU,EAAAtC,MAAA0W,KAIAb,WAAA,SAAA7V,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEAyB,KAEA1C,EAAAQ,MAAAR,EAAAS,OAAA+H,qBAAAjK,KAAA6B,EAAAsC,GAEAnE,KAAAga,WAAA7V,KAIA6V,WAAA,SAAA7V,GAEAA,EAAAtC,QAEAJ,EAAAQ,MAAAR,EAAAS,OAAA4H,sBAAA9J,KAAAmE,GAEAA,EAAAtC,MAAAN,KAAA,QAAA4C,EAAA2V,SACA3V,EAAAtC,MAAAN,KAAA,UAAA4C,EAAAyV,WAEAzV,EAAAtC,MAAA,KACAsC,EAAAwV,QAAA,IAIAQ,SAAA,SAAAhW,EAAAtC,GAEAA,EAAAT,IAAA,QAAA+C,EAAA2V,QAAA9Z,MACA6B,EAAAT,IAAA,UAAA+C,EAAAyV,UAAA5Z,MAEAmE,EAAAtC,MAAAA,EACAsC,EAAAwV,QAAA,EAEAlY,EAAAQ,MAAAR,EAAAS,OAAA6H,oBAAA/J,KAAAmE,IAIAmT,WAAA,SAAAzV,EAAAsC,GAEA,MAAA,UAAA2O,GAEArR,EAAAQ,MAAAR,EAAAS,OAAAkI,iBAAApK,KAAA6B,EAAAsC,EAAA2O,GAEA3O,EAAAwV,UAAA,IAEA7G,GAEA9S,KAAAma,SAAAhW,EAAA2O,GACA9S,KAAAoa,iBAAAvY,EAAAiR,IAIA9S,KAAAka,gBAAArY,GAGAsC,EAAAwV,QAAA,EAEA3Z,KAAAqa,YAAAxY,EAAAsC,MAMA4V,cAAA,SAAAlY,EAAAiR,GAEA,GAAAuG,GAAArZ,KAAA6B,MAAAxH,SACAqe,EAAA1Y,KAAA0Y,MACA4B,EAAAjB,EAAA3O,GAEA,OAAAzO,GAAA4F,EAAA6W,EAAA5F,EAAAwH,IAIAJ,gBAAA,SAAArY,GAEA,GAAA6W,GAAA1Y,KAAA0Y,KAEAjX,GAAAQ,MAAAR,EAAAS,OAAAgI,oBAAAlK,KAAA6B,EAAA6W,GAEA1Y,KAAA2X,YAAA9V,EAAA6W,IAIA0B,iBAAA,SAAAvY,EAAAiR,GAEA,GAAAuG,GAAArZ,KAAA6B,MAAAxH,SACAqe,EAAA1Y,KAAA0Y,MACA4B,EAAAjB,EAAA3O,GAEAjJ,GAAAQ,MAAAR,EAAAS,OAAAiI,qBAAAnK,KAAA6B,EAAA6W,EAAA5F,EAAAwH,GAEAta,KAAA+X,aAAAlW,EAAA6W,EAAA5F,EAAAwH,IAIAD,YAAA,SAAAxY,EAAAsC,GAEAnE,KAAAL,UAEAkC,EAAA7B,KAAA0C,QAAAyB,EAAAtC,QAEAA,EAAA7B,KAAA0C,MAAAyB,EAAAtC,MAEAA,EAAAL,SAAA,mBAAAxB,KAAAmE,QCjQA1C,EAAAqC,UAAAyW,QAAAnV,EAEA3I,EAAA,GAAAuH,GAAAoB,GAGA+R,cAAA,SAAAxV,EAAAgV,EAAAjV,GAEA1B,KAAAsa,QAAA5Y,EAAA4Y,SAAA3Y,EAAAe,KAAA,IAAAf,EAAA+I,IACA1K,KAAA3E,WAAAgE,EAAAqC,EAAArG,YACA2E,KAAAwa,gBAAA9Y,EAAA8Y,cACAxa,KAAAya,cAAA/Y,EAAA+Y,YACAza,KAAA0a,SAAA1a,KAAA2a,iBAEAlZ,EAAAQ,MAAAR,EAAAS,OAAA0Y,aAAA5a,MAEAA,KAAAoX,wBAGAE,WAAA,SAAAzV,GAEA,GAAA4X,GAAAzZ,KACAqZ,EAAArZ,KAAA6B,MAAAxH,SACA0Y,EAAA/S,KAAA6a,iBAAAhZ,GACA6X,EAAA7X,EAAA7B,KAAA0C,MAEAyB,EAAAtC,EAAA8P,WAAA3R,KAAA0C,OAEAhG,OAAAmF,EACAkR,UAAAA,EACA2G,QAAAA,EACArC,WACA1U,OAAA,GAAAC,GACAyT,QAAA,EACAyE,cAAA,EACAC,aAAA,EAEAnB,UAAA,WAEAH,EAAAuB,YAAA7W,EAAAnE,MAAA,IAGA8Z,QAAA,WAEA3V,EAAAkS,SAKAtD,EAAA/S,OAMAyZ,EAAArL,KAAAjK,GACAsV,EAAAwB,UAAA9W,IALAsV,EAAAuB,YAAA7W,EAAAnE,QAYA6B,GAAAgM,OAGAwL,EAAAtZ,GAAA,cAAAC,KAAAkb,iBAAA/W,GAAAnE,KAGA,IAAA8S,GAAA3O,EAAAxB,OAAA2B,MAkBA,IAhBAwO,EAAAL,OAAA,SAAA3F,GAEA2M,EAAAhH,OAAA5Q,EAAAiL,IAGAgG,EAAAF,SAAA,SAAA9F,GAEA2M,EAAA7G,SAAA/Q,EAAAiL,IAGAgG,EAAAC,UAAA,SAAAjG,GAEA,MAAA2M,GAAA1G,UAAAlR,EAAAiL,IAIAjS,EAAA6e,GAEA,IAAA,GAAAle,GAAA,EAAAA,EAAAke,EAAAhe,OAAAF,IACA,CACA,GAAAsR,GAAA4M,EAAAle,GACAkP,EAAA2O,EAAAhM,kBAAAP,EAEA3I,GAAAkT,QAAA3M,IAAA,EACA2O,EAAAxM,UAAAC,EAAA9M,KAAAmb,YAAAhX,GAAAnE,UAKAqZ,GAAA7M,MAAAxM,KAAAob,eAAAjX,GAAAnE,KAIAA,MAAAqa,YAAAlW,IAGAkX,KAAA,SAAAlX,EAAAtE,GAEAsE,EAAA2W,cAAA,EACA3W,EAAA4W,aAAA,EAEAlb,EAAA9F,MAAAiG,MAEAmE,EAAA2W,cAAA,EACA3W,EAAA4W,aAAA,EAEA/a,KAAAoO,KAAAjK,GACAnE,KAAAib,UAAA9W,IAGAsO,OAAA,SAAA5Q,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,IAAA1C,KAAAsb,aAAAxO,GAEA9M,KAAAqb,KAAAlX,EAAA,WAEA,IAAA,GAAA3I,GAAA,EAAAA,EAAAsR,EAAApR,OAAAF,IACA,CACA,GAAAsX,GAAAuG,EAAAnM,WAAAJ,EAAAtR,GAEAsX,IAEA9S,KAAAub,SAAApX,EAAA2O,UAKA,IAAA5X,EAAA4R,GACA,CACA,GAAAgG,GAAAuG,EAAAnM,WAAAJ,EAEAgG,IAEA9S,KAAAub,SAAApX,EAAA2O,KAKAF,SAAA,SAAA/Q,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,IAAA1C,KAAAsb,aAAAxO,GAEA9M,KAAAqb,KAAAlX,EAAA,WAEA,IAAA,GAAA3I,GAAA,EAAAA,EAAAsR,EAAApR,OAAAF,IACA,CACA,GAAAsX,GAAAuG,EAAAnM,WAAAJ,EAAAtR,GAEAsX,IAEA9S,KAAAgb,YAAA7W,EAAA2O,UAKA,IAAA5X,EAAA4R,GACA,CACA,GAAAgG,GAAAuG,EAAAnM,WAAAJ,EAEAgG,IAEA9S,KAAAgb,YAAA7W,EAAA2O,OAOA,KAAA,GAFA1Q,GAAA+B,EAAAxB,OAAA2B,OAEA9I,EAAA4G,EAAA1G,OAAA,EAAAF,GAAA,EAAAA,IAEAwE,KAAAgb,YAAA7W,EAAA/B,EAAA5G,KAKAuX,UAAA,SAAAlR,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,MACA8Y,EAAArX,EAAAxB,MAEA,IAAA3C,KAAAsb,aAAAxO,GACA,CACA,IAAA,GAAAtR,GAAA,EAAAA,EAAAsR,EAAApR,OAAAF,IACA,CACA,GAAAsX,GAAAuG,EAAAnM,WAAAJ,EAAAtR,GAEA,IAAAsX,IAAA0I,EAAAlO,IAAAwF,EAAAjF,QAEA,OAAA,EAIA,MAAAf,GAAApR,OAAA,EAEA,GAAAR,EAAA4R,GACA,CACA,GAAAgG,GAAAuG,EAAAnM,WAAAJ,EAEA,OAAAgG,IAAA0I,EAAAlO,IAAAwF,EAAAjF,QAGA,OAAA,GAGAtI,IAAA,SAAA1D,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,OAAAyB,GAAAxB,OAAA2B,QAGA0M,OAAA,SAAAnP,EAAA6S,EAAAf,GAEA,GAAAxP,GAAAtC,EAAA8P,WAAA3R,KAAA0C,MACA6V,EAAA5E,EAAA3T,KAAAkR,KAAAlR,KAAAsD,KAEAa,IAAAoU,IAEA7D,EAAA1U,KAAA0C,MAAA1C,KAAAqY,eAAAlU,EAAAxB,OAAA2B,OAAAiU;EAIAf,SAAA,SAAA3V,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,IAAAyB,GAAAnE,KAAAya,YACA,CACAtW,EAAAkS,QAAA,EACAlS,EAAA4W,aAAA,CAIA,KAAA,GAFApY,GAAAwB,EAAAxB,OAAA2B,OAEA9I,EAAA,EAAAA,EAAAmH,EAAAjH,OAAAF,IACA,CACA,GAAAsX,GAAAnQ,EAAAnH,EAEAsX,GAAAnD,eAEAmD,EAAAtQ,QAIA2B,EAAAkS,QAAA,EACAlS,EAAA4W,aAAA,IAIAtD,UAAA,SAAA5V,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEAyB,IAAAnE,KAAAwa,eAEAxa,KAAAqb,KAAAlX,EAAA,WAIA,IAAA,GAFAxB,GAAAwB,EAAAxB,OAAA2B,OAEA9I,EAAA,EAAAA,EAAAmH,EAAAjH,OAAAF,IACA,CACA,GAAAsX,GAAAnQ,EAAAnH,EAEAsX,GAAAM,cAMA6H,UAAA,SAAA9W,GAEAA,EAAA4W,cAEA/a,KAAAsD,QAAA7B,EAAA8U,MAAAnc,OAAA4F,KAAAkR,OAAAzP,EAAA6K,KAAAlS,QAEA+J,EAAAzH,OAAA8F,SAKA0Y,iBAAA,SAAA/W,GAEA,MAAA,UAAA2O,GAEA3O,EAAA4O,UAAAD,IAEA9S,KAAAub,SAAApX,EAAA2O,KAKAqI,YAAA,SAAAhX,GAEA,MAAA,UAAA2O,GAEA,GAAAuE,GAAAlT,EAAAkT,QACA3M,EAAAoI,EAAAjF,MAEAnD,KAAA2M,KAEArX,KAAAub,SAAApX,EAAA2O,GAAA,SAEAuE,GAAA3M,MAKA0Q,eAAA,SAAAjX,GAEA,MAAA,UAAAkV,GAEA,GAAAvG,GAAAuG,EAAA1W,OAAA6R,OAAArQ,EAAA4O,WACApQ,EAAAmQ,EAAAxO,MAEAtE,MAAAqb,KAAAlX,EAAA,WAEA,IAAA,GAAA3I,GAAA,EAAAA,EAAAmH,EAAAjH,OAAAF,IAEAwE,KAAAub,SAAApX,EAAAxB,EAAAnH,QAMA+f,SAAA,SAAApX,EAAA2O,EAAA2I,GAEA,GAAAlc,GAAA4E,EAAAxB,OACA+H,EAAAoI,EAAAjF,OACA6N,GAAAnc,EAAA+N,IAAA5C,EAmBA,OAjBAgR,KAEAnc,EAAAkL,IAAAC,EAAAoI,GAEAA,EAAA1R,IAAA,UAAA+C,EAAAyV,WACA9G,EAAA1R,IAAA,sBAAA+C,EAAA2V,SAEA9Z,KAAAoa,iBAAAjW,EAAAzH,OAAAoW,GAEA9S,KAAAoO,KAAAjK,GAEAsX,GAEAzb,KAAAib,UAAA9W,IAIAuX,GAGAV,YAAA,SAAA7W,EAAA2O,EAAA6I,GAEA,GAAApc,GAAA4E,EAAAxB,OACA0U,EAAAlT,EAAAkT,QACA3M,EAAAoI,EAAAjF,MAEAtO,GAAA+N,IAAA5C,KAEAnL,EAAAqL,OAAAF,GAEAoI,EAAAvR,KAAA,UAAA4C,EAAAyV,WACA9G,EAAAvR,KAAA,sBAAA4C,EAAA2V,UAEA6B,GAAA3b,KAAAwa,eAEA1H,EAAAM,UAGApT,KAAAka,gBAAApH,GACA9S,KAAAoO,KAAAjK,GACAnE,KAAAib,UAAA9W,UAGAkT,GAAA3M,IAGAiQ,eAAA,WAEA,GAAAL,GAAAta,KAAAsa,QACAsB,EAAA5b,KAAA6B,MAAAxH,SAAAqQ,GAEA,IAAApQ,EAAAggB,GAEA,MAAAzf,GAAA+gB,GAEAzgB,EAAAygB,EAAAtB,MAAA,EAIAsB,IAAAtB,CAKA,IAAAzf,EAAA+gB,GACA,CACA,IAAA,GAAApgB,GAAA,EAAAA,EAAA8e,EAAA5e,OAAAF,IAEA,GAAAL,EAAAygB,EAAAtB,EAAA9e,OAAA,EAEA,OAAA,CAGA,QAAA,EAIA,MAAAL,GAAAmf,EAAAsB,MAAA,GAOAxB,iBAAA,SAAAvY,EAAAiR,GAEA,GAAAwH,GAAAta,KAAAsa,QACA5B,EAAA7W,EAAAwC,IAAAqG,GAEA1K,MAAA+X,aAAAjF,EAAAwH,EAAAzY,EAAA6W,IAGAwB,gBAAA,SAAApH,GAEA,GAAA9S,KAAA0a,SACA,CACA,GAAAJ,GAAAta,KAAAsa,OAEAta,MAAA2X,YAAA7E,EAAAwH,KAIAgB,aAAA,SAAAxO,GAEA,IAAAjS,EAAAiS,GAEA,OAAA,CAGA,IAAAuM,GAAArZ,KAAA6B,MAAAxH,SACAuhB,EAAAvC,EAAA3O,GAEA,KAAA7P,EAAA+gB,GAEA,OAAA,CAGA,IAAAA,EAAAlgB,SAAAoR,EAAApR,OAEA,OAAA,CAGA,KAAA,GAAAF,GAAA,EAAAA,EAAAsR,EAAApR,OAAAF,IAEA,IAAAjB,EAAAuS,EAAAtR,MAAAlB,EAAAwS,EAAAtR,IAEA,OAAA,CAIA,QAAA,GAGAqf,iBAAA,SAAAhZ,GAEA,GAAAyY,GAAAta,KAAAsa,QACA5B,EAAA7W,EAAAwC,IAAAqG,GAEA,OAAA,UAAAoI,GAEA,MAAA7W,GAAA6W,EAAAwH,EAAAzY,EAAA6W,KAIA2B,YAAA,SAAAlW,GAEAnE,KAAAL,WAEAwE,EAAAzH,OAAAsD,KAAA0C,MAAAyB,EAAAxB,OAAA2B,SAIA8J,KAAA,SAAAjK,GAEA,GAAA2O,GAAA3O,EAAAxB,MAEAwB,GAAA2W,eAEAhI,EAAAvE,SAAAvO,KAAA3E,aAEAyX,EAAA1E,KAAApO,KAAA3E,YAGA8I,EAAAzH,OAAA8E,SAAA,mBAAAxB,KAAAmE,QC7fA1C,EAAAqC,UAAA+X,eAAAxW,EAEA5I,EAAA,GAAAuH,GAAAqB,GAGA8R,cAAA,SAAAxV,EAAAgV,EAAAjV,GAEA,GAAA2X,GAAArZ,KAAA6B,MAAAxH,QAEA2F,MAAAsa,QAAA5Y,EAAA4Y,SAAAjB,EAAA3W,KAAA,IAAA2W,EAAA3O,IACA1K,KAAA0Y,MAAAhX,EAAAgX,OAAA/W,EAAAe,KAAA,IAAAf,EAAA+I,IAEA1K,KAAA3E,WAAAgE,EAAAqC,EAAArG,YACA2E,KAAAwa,gBAAA9Y,EAAA8Y,cACAxa,KAAAya,cAAA/Y,EAAA+Y,YAEAtgB,EAAAuH,EAAAoa,SAMA9b,KAAA+b,WAAAra,EAAAoa,SAJAra,EAAA8D,IAAA7D,EAAAoa,QAAA9b,KAAA+b,WAAA/b,MAOAyB,EAAAQ,MAAAR,EAAAS,OAAA8Z,iBAAAhc,OAGA+b,WAAA,SAAAD,GAEA9b,KAAA8b,QAAAA,EAEA9b,KAAAoX,wBAGAE,WAAA,SAAAzV,GAEA,GAAA4X,GAAAzZ,KACAqZ,EAAArZ,KAAA6B,MAAAxH,SACA4hB,EAAAjc,KAAA8b,QAAAzhB,SACA0Y,EAAA/S,KAAA6a,iBAAAhZ,GACA6X,EAAA7X,EAAA7B,KAAA0C,MAEAyB,EAAAtC,EAAA8P,WAAA3R,KAAA0C,OAEAhG,OAAAmF,EACAkR,UAAAA,EACA2G,QAAAA,EACArC,WACA1U,OAAA,GAAAC,GACAsZ,SAAA,GAAAtZ,GACAyT,QAAA,EACAyE,cAAA,EACAC,aAAA,EAEAnB,UAAA,WAEAH,EAAAuB,YAAA7W,EAAAnE,OAGA8Z,QAAA,WAEA3V,EAAAkS,SAKAoD,EAAArL,KAAAjK,GACAsV,EAAAwB,UAAA9W,KAGAgY,iBAAA,WAEA1C,EAAA2C,uBAAAjY,EAAAnE,OAMA6B,GAAAgM,OAGAoO,EAAAlc,GAAA,cAAAC,KAAAkb,iBAAA/W,GAAAnE,KAGA,IAAA8S,GAAA3O,EAAAxB,OAAA2B,MAkBA,IAhBAwO,EAAAL,OAAA,SAAA3F,GAEA2M,EAAAhH,OAAA5Q,EAAAiL,IAGAgG,EAAAF,SAAA,SAAA9F,GAEA2M,EAAA7G,SAAA/Q,EAAAiL,IAGAgG,EAAAC,UAAA,SAAAjG,GAEA,MAAA2M,GAAA1G,UAAAlR,EAAAiL,IAIAjS,EAAA6e,GAEA,IAAA,GAAAle,GAAA,EAAAA,EAAAke,EAAAhe,OAAAF,IACA,CACA,GAAAsR,GAAA4M,EAAAle,GACAkP,EAAA2O,EAAAhM,kBAAAP,EAEA3I,GAAAkT,QAAA3M,IAAA,EACA2O,EAAAxM,UAAAC,EAAA9M,KAAAmb,YAAAhX,GAAAnE,UAKAic,GAAAzP,MAAAxM,KAAAob,eAAAjX,GAAAnE,KAIAA,MAAAqa,YAAAlW,IAGAkX,KAAA,SAAAlX,EAAAtE,GAEAsE,EAAA2W,cAAA,EACA3W,EAAA4W,aAAA,EAEAlb,EAAA9F,MAAAiG,MAEAmE,EAAA2W,cAAA,EACA3W,EAAA4W,aAAA,EAEA/a,KAAAoO,KAAAjK,GACAnE,KAAAib,UAAA9W,IAGAsO,OAAA,SAAA5Q,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,IAAA1C,KAAAsb,aAAAxO,GAEA9M,KAAAqb,KAAAlX,EAAA,WAEA,IAAA,GAAA3I,GAAA,EAAAA,EAAAsR,EAAApR,OAAAF,IACA,CACA,GAAAsX,GAAAuG,EAAAnM,WAAAJ,EAAAtR,GAEAsX,IAEA9S,KAAAub,SAAApX,EAAA2O,UAKA,IAAA5X,EAAA4R,GACA,CACA,GAAAgG,GAAAuG,EAAAnM,WAAAJ,EAEAgG,IAEA9S,KAAAub,SAAApX,EAAA2O,KAKAF,SAAA,SAAA/Q,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,IAAA1C,KAAAsb,aAAAxO,GAEA9M,KAAAqb,KAAAlX,EAAA,WAEA,IAAA,GAAA3I,GAAA,EAAAA,EAAAsR,EAAApR,OAAAF,IACA,CACA,GAAAsX,GAAAuG,EAAAnM,WAAAJ,EAAAtR,GAEAsX,IAEA9S,KAAAgb,YAAA7W,EAAA2O,UAKA,IAAA5X,EAAA4R,GACA,CACA,GAAAgG,GAAAuG,EAAAnM,WAAAJ,EAEAgG,IAEA9S,KAAAgb,YAAA7W,EAAA2O,OAOA,KAAA,GAFA1Q,GAAA+B,EAAAxB,OAAA2B,OAEA9I,EAAA4G,EAAA1G,OAAA,EAAAF,GAAA,EAAAA,IAEAwE,KAAAgb,YAAA7W,EAAA/B,EAAA5G,KAKAuX,UAAA,SAAAlR,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,MACA8Y,EAAArX,EAAAxB,MAEA,IAAA3C,KAAAsb,aAAAxO,GACA,CACA,IAAA,GAAAtR,GAAA,EAAAA,EAAAsR,EAAApR,OAAAF,IACA,CACA,GAAAsX,GAAAuG,EAAAnM,WAAAJ,EAAAtR,GAEA,IAAAsX,IAAA0I,EAAAlO,IAAAwF,EAAAjF,QAEA,OAAA,EAIA,MAAAf,GAAApR,OAAA,EAEA,GAAAR,EAAA4R,GACA,CACA,GAAAgG,GAAAuG,EAAAnM,WAAAJ,EAEA,OAAAgG,IAAA0I,EAAAlO,IAAAwF,EAAAjF,QAGA,OAAA,GAGAtI,IAAA,SAAA1D,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,OAAAyB,GAAAxB,OAAA2B,QAGA0M,OAAA,SAAAnP,EAAA6S,EAAAf,GAEA,GAAAxP,GAAAtC,EAAA8P,WAAA3R,KAAA0C,MACA6V,EAAA5E,EAAA3T,KAAAkR,KAAAlR,KAAAsD,KAEAa,IAAAoU,IAEA7D,EAAA1U,KAAA0C,MAAA1C,KAAAqY,eAAAlU,EAAAxB,OAAA2B,OAAAiU,KAIAf,SAAA,SAAA3V,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,IAAAyB,GAAAnE,KAAAya,YACA,CACAtW,EAAAkS,QAAA,EACAlS,EAAA4W,aAAA,CAIA,KAAA,GAFApY,GAAAwB,EAAAxB,OAAA2B,OAEA9I,EAAA,EAAAA,EAAAmH,EAAAjH,OAAAF,IACA,CACA,GAAAsX,GAAAnQ,EAAAnH,EAEAsX,GAAAnD,eAEAmD,EAAAtQ,QAIA2B,EAAAkS,QAAA,EACAlS,EAAA4W,aAAA,IAIAtD,UAAA,SAAA5V,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEAyB,IAAAnE,KAAAwa,eAEAxa,KAAAqb,KAAAlX,EAAA,WAIA,IAAA,GAFAxB,GAAAwB,EAAA+X,SAAA5X,OAEA9I,EAAA,EAAAA,EAAAmH,EAAAjH,OAAAF,IACA,CACA,GAAAsX,GAAAnQ,EAAAnH,EAEAsX,GAAAM,cAMA6H,UAAA,SAAA9W,GAEAA,EAAA4W,cAEA/a,KAAAsD,QAAA7B,EAAA8U,MAAAnc,OAAA4F,KAAAkR,OAAAzP,EAAA6K,KAAAlS,QAEA+J,EAAAzH,OAAA8F,SAKA0Y,iBAAA,SAAA/W,GAEA,MAAA,UAAA2X,GAEA3X,EAAA4O,UAAA+I,IAEA9b,KAAAqc,oBAAAlY,EAAA2X,KAKAX,YAAA,SAAAhX,GAEA,MAAA,UAAA2O,GAEA,GAAAuE,GAAAlT,EAAAkT,QACAuE,EAAA9I,EAAAjF,MAEA+N,KAAAvE,KAEArX,KAAAub,SAAApX,EAAA2O,GAAA,SAEAuE,GAAAuE,MAKAR,eAAA,SAAAjX,GAEA,MAAA,UAAA8X,GAEA,GAAAK,GAAAL,EAAAtZ,OACA4Z,EAAAD,EAAA9H,OAAArQ,EAAA4O,WACAmJ,EAAAK,EAAAjY,MAEA,KAAA4X,EAAAxgB,QAKAsE,KAAAqb,KAAAlX,EAAA,WAEA,IAAA,GAAA3I,GAAA,EAAAA,EAAA0gB,EAAAxgB,OAAAF,IAEAwE,KAAAqc,oBAAAlY,EAAA+X,EAAA1gB,QAMA+f,SAAA,SAAApX,EAAA2O,EAAA2I,GAEA,GAAAC,GAAA1b,KAAAwc,eAAArY,EAAA2O,EAAA2I,EAOA,OALAC,IAEA1b,KAAAyc,WAAAtY,EAAA2O,GAGA4I,GAGAe,WAAA,SAAAtY,EAAA2O,GAEA,GAAAmJ,GAAAjc,KAAA8b,QAAAzhB,SACAqiB,EAAA1c,KAAA2c,iBAAAxY,EAAA2O,EAEAmJ,GAAApP,UAAA6P,EAAA1c,KAAA4c,aAAAzY,GAAAnE,MAAA,IAGA4c,aAAA,SAAAzY,GAEA,GAAA+X,GAAA/X,EAAA+X,QAEA,OAAA,UAAAJ,GAEA,GAAApR,GAAAoR,EAAAjO,MAEAqO,GAAA5O,IAAA5C,KAEAwR,EAAAzR,IAAAC,EAAAoR,GAEAA,EAAA1a,IAAA,UAAA+C,EAAAgY,mBAGAL,EAAAtZ,UAIA6Z,oBAAA,SAAAlY,EAAA2X,GAEA,GAAAzC,GAAArZ,KAAA6B,MAAAxH,SACAuhB,EAAAvC,EAAA5L,SAAAqO,EAAA9b,KAAAsa,QAEAjB,GAAAxM,UAAA+O,EAAA5b,KAAA6c,sBAAA1Y,EAAA2X,GAAA9b,OAGA6c,sBAAA,SAAA1Y,EAAA2X,GAEA,GAAAI,GAAA/X,EAAA+X,SACAQ,EAAAZ,EAAAjO,MAEA,OAAA,UAAAiF,GAEAoJ,EAAA5O,IAAAoP,KAEAR,EAAAzR,IAAAiS,EAAAZ,GAEAA,EAAA1a,IAAA,UAAA+C,EAAAgY,mBAGAnc,KAAAwc,eAAArY,EAAA2O,KAIA0J,eAAA,SAAArY,EAAA2O,EAAA2I,GAEA,GAAAnD,GAAAnU,EAAAxB,OACAiZ,EAAA9I,EAAAjF,OACA6N,GAAApD,EAAAhL,IAAAsO,EAiBA,OAfAF,KAEApD,EAAA7N,IAAAmR,EAAA9I,GAEAA,EAAA1R,IAAA,UAAA+C,EAAAyV,WACA9G,EAAA1R,IAAA,sBAAA+C,EAAA2V,SAEA9Z,KAAAoO,KAAAjK,GAEAsX,GAEAzb,KAAAib,UAAA9W,IAIAuX,GAGAV,YAAA,SAAA7W,EAAA2O,EAAA6I,GAEA,GAAAC,GAAA9I,EAAAjF,MAEA7N,MAAA8c,oBAAA3Y,EAAAyX,IAEA5b,KAAA+c,cAAA5Y,EAAA2O,EAAA6I,IAIAoB,cAAA,SAAA5Y,EAAA2O,EAAA6I,GAEA,GAAAM,GAAAjc,KAAA8b,QAAAzhB,SACA2iB,EAAAhd,KAAA2c,iBAAAxY,EAAA2O,GACApI,EAAAuR,EAAAlO,OAAAiP,GACAd,EAAA/X,EAAA+X,SACAJ,EAAAI,EAAA3W,IAAAmF,EAEAoR,KAEAA,EAAAva,KAAA,UAAA4C,EAAAgY,kBACAL,EAAA1I,UAEA8I,EAAAtR,OAAAF,KAIA0R,uBAAA,SAAAjY,EAAA2X,GAEA,GAAAzC,GAAArZ,KAAA6B,MAAAxH,SAEA6hB,GADAlc,KAAA8b,QAAAzhB,SACA8J,EAAA+X,UACAQ,EAAAZ,EAAAjO,OACA+N,EAAAvC,EAAA5L,SAAAqO,EAAA9b,KAAAsa,QAEAwB,GAAAva,KAAA,UAAA4C,EAAAgY,kBACAD,EAAAtR,OAAA8R,GAEA1c,KAAA8c,oBAAA3Y,EAAAyX,IAGAkB,oBAAA,SAAA3Y,EAAAyX,GAEA,GAAAvE,GAAAlT,EAAAkT,QACAiB,EAAAnU,EAAAxB,OACAmQ,EAAAwF,EAAA/S,IAAAqW,EAeA,OAbA9I,KAEAwF,EAAA1N,OAAAgR,GAEA9I,EAAAvR,KAAA,UAAA4C,EAAAyV,WACA9G,EAAAvR,KAAA,sBAAA4C,EAAA2V,SAEA9Z,KAAAoO,KAAAjK,GACAnE,KAAAib,UAAA9W,UAGAkT,GAAAuE,GAEA9I,GAGAwI,aAAA,SAAAxO,GAEA,IAAAjS,EAAAiS,GAEA,OAAA,CAGA,IAAAuM,GAAArZ,KAAA6B,MAAAxH,SACAuhB,EAAAvC,EAAA3O,GAEA,KAAA7P,EAAA+gB,GAEA,OAAA,CAGA,IAAAA,EAAAlgB,SAAAoR,EAAApR,OAEA,OAAA,CAGA,KAAA,GAAAF,GAAA,EAAAA,EAAAsR,EAAApR,OAAAF,IAEA,IAAAjB,EAAAuS,EAAAtR,MAAAlB,EAAAwS,EAAAtR,IAEA,OAAA,CAIA,QAAA,GAGAqf,iBAAA,SAAAhZ,GAEA,GAAAyY,GAAAzY,EAAAwC,IAAAqG,IACAgO,EAAA1Y,KAAA0Y,KAEA,OAAA,UAAAoD,GAEA,MAAA7f,GAAA6f,EAAApD,EAAA7W,EAAAyY,KAIAD,YAAA,SAAAlW,GAEAnE,KAAAL,WAEAwE,EAAAzH,OAAAsD,KAAA0C,MAAAyB,EAAAxB,OAAA2B,SAIA8J,KAAA,SAAAjK,GAEA,GAAA2O,GAAA3O,EAAAxB,MAEAwB,GAAA2W,eAEAhI,EAAAvE,SAAAvO,KAAA3E,aAEAyX,EAAA1E,KAAApO,KAAA3E,YAGA8I,EAAAzH,OAAA8E,SAAA,mBAAAxB,KAAAmE,MAIAwY,iBAAA,SAAAxY,EAAA2O,GASA,IAAA,GAPAjR,GAAAsC,EAAAzH,OACAugB,EAAApb,EAAAwC,IACAgV,EAAArZ,KAAA6B,MAAAxH,SACA4hB,EAAAjc,KAAA8b,QAAAzhB,SACAqiB,EAAAT,EAAAvR,IACAA,KAEAlP,EAAA,EAAAA,EAAAkhB,EAAAhhB,OAAAF,IACA,CACA,GAAAwB,GAAA0f,EAAAlhB,EAEA,IAAAwB,IAAAgD,KAAAsa,QAEA5P,EAAA1N,GAAA8V,EAAAjF,WAEA,IAAA7Q,IAAAgD,KAAA0Y,MAEAhO,EAAA1N,GAAA6E,EAAAgM,WAEA,IAAAhT,EAAAmF,KAAAsa,SACA,CACA,GAAA4C,GAAA/hB,EAAA6E,KAAAsa,QAAAtd,GACAmgB,EAAA9D,EAAA3O,IAAAwS,EAEAxS,GAAA1N,GAAA8V,EAAAqK,OAEA,IAAAtiB,EAAAmF,KAAA0Y,OACA,CACA,GAAAwE,GAAA/hB,EAAA6E,KAAA0Y,MAAA1b,GACAmgB,EAAAF,EAAAvS,IAAAwS,EAEAxS,GAAA1N,GAAA6E,EAAAsb,IAIA,MAAAzS,MCzmBAjJ,EAAAqC,UAAAsZ,OAAA9X,EAEA7I,EAAA,GAAAuH,GAAAsB,GAGA6R,cAAA,SAAAxV,EAAAgV,EAAAjV,GAEA,GAAA2X,GAAArZ,KAAA6B,MAAAxH,QAEA2F,MAAA0Y,MAAAhX,EAAAgX,OAAAW,EAAA3W,KAAA,IAAA2W,EAAA3O,IAEAjJ,EAAAQ,MAAAR,EAAAS,OAAA2G,YAAA7I,MAEAA,KAAAoX,wBAGAE,WAAA,SAAAzV,GAEA,GAAA4X,GAAAzZ,KACA+S,EAAA/S,KAAA6a,iBAAAhZ,GACAwX,EAAArZ,KAAA6B,MAAAxH,SACAqf,EAAA7X,EAAA7B,KAAA0C,MAEAyB,EAAAtC,EAAA8P,WAAA3R,KAAA0C,OAEAgX,QAAAA,EACA3G,UAAAA,EACAlR,MAAA,KACA8X,QAAA,EACA0D,OAAA,EACAhH,QAAA,EAEAuD,UAAA,WAEAnY,EAAAQ,MAAAR,EAAAS,OAAA4G,oBAAA2Q,EAAA5X,EAAAsC,GAEAnE,KAAAga,WAAA7V,GAAA,GACAnE,KAAAka,gBAAArY,IAEAiY,QAAA,WAEA3V,EAAAkS,SAKA5U,EAAAQ,MAAAR,EAAAS,OAAA6G,kBAAA0Q,EAAA5X,EAAAsC,GAEA4O,EAAA5O,EAAAtC,SAEA7B,KAAAga,WAAA7V,GACAnE,KAAAka,gBAAArY,MAKAjD,GAAA8a,IAAAL,EAAApL,UAAApM,EAAA7B,KAAA0Y,MAAAxd,KAEAwe,EAAA7b,EAAAgE,EAAA7B,KAAA0Y,OAEAjX,EAAAQ,MAAAR,EAAAS,OAAA8G,sBAAAhJ,KAAA6B,EAAA6X,IAGA9a,EAAA8a,KAEAjY,EAAAQ,MAAAR,EAAAS,OAAA+G,eAAAjJ,KAAA6B,EAAA6X,GAEAL,EAAAxM,UAAA6M,EAAA1Z,KAAAsX,WAAAzV,EAAAsC,GAAAnE,QAIAqS,IAAA,SAAAxQ,EAAAiL,GAEA,GAAA5R,EAAA4R,GAKA,CACA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACAyY,EAAAuG,EAAAnM,WAAAJ,GACA3I,EAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEAoQ,KAAA3O,EAAA4O,UAAAD,KAEA9S,KAAAga,WAAA7V,GACAnE,KAAAia,WAAApY,EAAAsC,EAAA2O,QAXA9S,MAAA4S,SAAA/Q,IAgBA4Q,OAAA,SAAA5Q,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACAyY,EAAAuG,EAAAnM,WAAAJ,GACA3I,EAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEAoQ,IAEA3O,EAAAtC,QAAAiR,IAEA9S,KAAAga,WAAA7V,GACAnE,KAAAia,WAAApY,EAAAsC,EAAA2O,KAKAF,SAAA,SAAA/Q,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,MACAoQ,EAAAuG,EAAAnM,WAAAJ,EAEAgG,IAAA3O,EAAAtC,QAAAiR,IAEA9S,KAAAga,WAAA7V,GACAnE,KAAAka,gBAAArY,KAIAkR,UAAA,SAAAlR,EAAAiL,GAEA,GAAAuM,GAAArZ,KAAA6B,MAAAxH,SACA8J,EAAAtC,EAAA8P,WAAA3R,KAAA0C,MACAoQ,EAAAuG,EAAAnM,WAAAJ,EAEA,OAAAgG,KAAA3O,EAAAtC,OAGAoY,WAAA,SAAApY,EAAAsC,EAAA2O,GAEA9S,KAAAma,SAAAhW,EAAA2O,GACA9S,KAAAoa,iBAAAvY,EAAAiR,GACA9S,KAAAqa,YAAAxY,EAAAsC,IAGAoB,IAAA,SAAA1D,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,OAAAyB,GAAAtC,OAGAmP,OAAA,SAAAnP,EAAA6S,EAAAf,GAEA,GAAAxP,GAAAtC,EAAA8P,WAAA3R,KAAA0C,MACA6V,EAAA5E,EAAA3T,KAAAkR,KAAAlR,KAAAsD,KAEAa,IAAAoU,IAEA7D,EAAA1U,KAAA0C,MAAA1C,KAAAyY,UAAAtU,EAAAtC,MAAA0W,KAIAhB,QAAA,SAAA1V,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEA,IAAAyB,GAAAA,EAAAtC,MACA,CACA,GAAAiR,GAAA3O,EAAAtC,OAEAsC,EAAA4O,UAAAD,IAKA3O,EAAAkZ,OAAAvK,EAAAnD,iBAEAlO,EAAAQ,MAAAR,EAAAS,OAAAkH,eAAApJ,KAAA6B,EAAAsC,GAEAA,EAAAkS,QAAA,EACAvD,EAAAtQ,QACA2B,EAAAkS,QAAA,EACAlS,EAAAkZ,OAAA,KAKA3F,WAAA,SAAA7V,GAEA,GAAAsC,GAAAtC,EAAA8P,WAAA3R,KAAA0C,KAEAyB,IAEAnE,KAAA6Z,WAAA,IAEApY,EAAAQ,MAAAR,EAAAS,OAAAmH,kBAAArJ,KAAA6B,EAAAsC,GAEAnE,KAAAga,WAAA7V,KAKA6V,WAAA,SAAA7V,EAAAmZ,GAEAnZ,EAAAtC,QAEAJ,EAAAQ,MAAAR,EAAAS,OAAAgH,mBAAAlJ,KAAAmE,GAEAA,EAAAtC,MAAAN,KAAA,QAAA4C,EAAA2V,SACA3V,EAAAtC,MAAAN,KAAA,UAAA4C,EAAAyV,WAEA0D,GAEAnZ,EAAAtC,MAAAuR,UAGAjP,EAAAtC,MAAA,KACAsC,EAAAkZ,OAAA,EACAlZ,EAAAwV,QAAA,IAIAQ,SAAA,SAAAhW,EAAAtC,GAEAA,EAAAT,IAAA,QAAA+C,EAAA2V,QAAA9Z,MACA6B,EAAAT,IAAA,UAAA+C,EAAAyV,UAAA5Z,MAEAmE,EAAAtC,MAAAA,EACAsC,EAAAkZ,OAAA,EACAlZ,EAAAwV,QAAA,EAEAlY,EAAAQ,MAAAR,EAAAS,OAAAiH,iBAAAnJ,KAAAmE,IAGAmT,WAAA,SAAAzV,EAAAsC,GAEA,MAAA,UAAA2O,GAEArR,EAAAQ,MAAAR,EAAAS,OAAAsH,cAAAxJ,KAAA6B,EAAAsC,EAAA2O,GAEA3O,EAAAwV,UAAA,IAEA7G,GAEA9S,KAAAma,SAAAhW,EAAA2O,GACA9S,KAAAoa,iBAAAvY,EAAAiR,IAIA9S,KAAAka,gBAAArY,GAGAsC,EAAAwV,QAAA,EAEA3Z,KAAAqa,YAAAxY,EAAAsC,MAKA0W,iBAAA,SAAAhZ,GAEA,GAAAwX,GAAArZ,KAAA6B,MAAAxH,SACAqe,EAAA1Y,KAAA0Y,MACA4B,EAAAjB,EAAA3O,GAEA,OAAA,UAAAoI,GAEA,MAAA7W,GAAA4F,EAAA6W,EAAA5F,EAAAwH,KAIAJ,gBAAA,SAAArY,GAEA,GAAA6W,GAAA1Y,KAAA0Y,KAEAjX,GAAAQ,MAAAR,EAAAS,OAAAoH,iBAAAtJ,KAAA6B,EAAA6W,GAEA1Y,KAAA2X,YAAA9V,EAAA6W,IAGA0B,iBAAA,SAAAvY,EAAAiR,GAEA,GAAAuG,GAAArZ,KAAA6B,MAAAxH,SACAqe,EAAA1Y,KAAA0Y,MACA4B,EAAAjB,EAAA3O,GAEAjJ,GAAAQ,MAAAR,EAAAS,OAAAqH,kBAAAvJ,KAAA6B,EAAA6W,EAAA5F,EAAAwH,GAEAta,KAAA+X,aAAAlW,EAAA6W,EAAA5F,EAAAwH,IAGAD,YAAA,SAAAxY,EAAAsC,GAEAnE,KAAAL,UAEAkC,EAAA7B,KAAA0C,QAAAyB,EAAAtC,QAEAA,EAAA7B,KAAA0C,MAAAyB,EAAAtC,MAEAA,EAAAL,SAAA,mBAAAxB,KAAAmE,QMtSA3K,EAAAiI,MAAAA,EAGAjI,EAAAiI,MAAArH,MAAAF,EACAV,EAAAiI,MAAApH,SAAAuH,EACApI,EAAAiI,MAAA8b,SAAAvZ,EACAxK,EAAAiI,MAAA+b,UAAA/Y,EAGAjL,EAAAiI,MAAAzF,KAAAA,EACAxC,EAAAiI,MAAAtG,QAAAA,EACA3B,EAAAiI,MAAAhF,OAAAA,EACAjD,EAAAiI,MAAA5E,SAAAA,EACArD,EAAAiI,MAAAxE,KAAAA,EACAzD,EAAAiI,MAAAlE,KAAAA,EACA/D,EAAAiI,MAAA5D,KAAAA,EACArE,EAAAiI,MAAAnE,KAAAA,EACA9D,EAAAiI,MAAAnD,KAAAA,EACA9E,EAAAiI,MAAA7C,QAAAA,EACApF,EAAAiI,MAAAtC,QAAAA,EACA3F,EAAAiI,MAAAjF,OAAAA,EACAhD,EAAAiI,MAAAlG,aAAAA,EACA/B,EAAAiI,MAAApC,iBAAAA,GAEA2L","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return x !== undefined && x !== null;\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === void 0)\n  {\n    return x;\n  }\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n  if (isFunction(x) || typeof x !== 'object' || x === null)\n  {\n    return x;\n  }\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n  if (isRegExp(x))\n  {\n    return x;\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' || !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' || !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        return compare( b[ comparator ], a[ comparator ] );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        return compare( a[ comparator ], b[ comparator ] );\n      };\n    }\n  }\n\n  return null;\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          callback[0].apply( callback[1], args );  \n        }\n      }\n      \n      if ( clear )\n      {\n        if ( eventListeners.length !== max )\n        {\n          listeners[ event ] = eventListeners.slice( max );  \n        }\n        else\n        {\n          delete listeners[ event ];  \n        }\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/*\nnew Neuro({\n  name: 'name',\n  api: 'http://api/name',\n  pubsub: 'http://url:port',\n  channel: 'houseid',\n  token: 'userid',\n  key: 'id',\n  fields: ['id', 'name', 'updated_at'],\n//  encode: function() {},\n//  decode: function() {}\n});\n*/\n\nfunction Neuro(options)\n{\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + options.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Events.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  model.all = function()\n  {\n    return database.getModels();\n  };\n\n  model.create = function(props)\n  {\n    var inst = new model( props );\n    inst.$save();\n    return inst;\n  };\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( 'initialized', [model] );\n\n  return model;\n}\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro(neuro)\n      {\n        if ( neuro.name === name || neuro.className === name )\n        {\n          callback.call( callbackContext, neuro );\n\n          Neuro.off( 'initialized', checkNeuro );\n        }\n      }\n\n      Neuro.on( 'initialized', checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  transfer( options, this );\n\n  this.models = new NeuroMap();\n\n  this.initialized = false;\n  this.pendingRefresh = false;\n\n  this.keySeparator = options.keySeparator || NeuroDatabase.Defaults.keySeparator;\n\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n\n  this.rest = Neuro.rest( this );\n  this.store = Neuro.store( this );\n  this.live = Neuro.live( this, this.handlePublish( this ) );\n\n  this.setComparator( this.comparator );\n  this.setRevision( this.revision );\n\n  this.relations = {};\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      this.relations[ name ] = relation;\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuroDatabase.Defaults = \n{\n  keySeparator: '/'\n};\n\nNeuroDatabase.prototype =\n{\n\n  //\n  toString: function(model) \n  {\n    return '';\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, fromStorage)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, fromStorage !== false );\n\n      if ( result !== false )\n      {\n        callback.call( callbackContext, result );\n      }\n\n      return result;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || db.loadRemote === false;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input, undefined, undefined, fromStorage );\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (a[ revision ] - b[ revision ]) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator)\n  {\n    this.comparatorFunction = createComparator( comparator );\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Events.SAVE_OLD_REVISION, db, model, encoded );\n\n        return;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( db.cache !== false )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      if ( db.cache !== false )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache !== false )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === false )\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote !== false && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === false )\n    {\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Events.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Events.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Events.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Events.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Events.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n    \n    db.rest( 'GET', undefined, undefined, onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n        var key = model.$key();\n\n        mapped[ key ] = model;\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Events.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Events.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Events.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Events.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Events.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Converts properties in data into their storable form\n  encode: function(data)\n  {\n    return data;\n  },\n\n  // Converts properties in rawData from their storable form to their desired\n  decode: function(rawData)\n  {\n    return rawData;\n  },\n\n  // Save the model\n  save: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    if ( db.cache === false )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal );\n    }\n  },\n\n  // Remove the model \n  remove: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    // TODO Add Debug here?\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    if ( db.cache === false )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value; \n      }\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue)\n  {\n    this.$set( setProperties, setValue );\n\n    this.$callRelationFunction( 'preSave' );\n\n    this.$db.save( this );\n\n    this.$callRelationFunction( 'postSave' );\n  },\n\n  $remove: function()\n  {\n    if ( this.$exists() )\n    {\n      this.$callRelationFunction( 'preRemove' );\n\n      this.$db.remove( this );\n\n      this.$callRelationFunction( 'postRemove' );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $callRelationFunction: function(functionName)\n  {\n    var databaseRelations = this.$db.relations;\n\n    for ( var name in databaseRelations )\n    {\n      databaseRelations[ name ][ functionName ]( this );\n    }\n  },\n\n  $addOperation: function(OperationType) \n  {\n    var operation = new OperationType( this );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function()\n  {\n    var saved = this.$saved;\n    var encoded = this.$toJSON( true );\n    var fields = this.$db.fields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model)\n  {\n    this.model = model;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model );\n    }\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroRemoveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Events.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL, model );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$pendingSave = false;\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( 'model-removed', [model] );\n      \n      db.updated();\n\n      model.$trigger('removed');\n    }\n\n    db.store.remove( key, this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest( 'DELETE', model, undefined, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_MISSING, this, key, model );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Events.REMOVE_ERROR, this, status, key, model );\n    } \n    else \n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Events.REMOVE_OFFLINE, this, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_REMOTE, this, key, model );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Events.REMOVE_PUBLISH, this, key, model );\n\n    db.live({\n      op: NeuroDatabase.Live.Remove,\n      key: key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_RESUME, this, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_LOCAL_DELETED, this, model );\n\n      return this.finish();\n    }\n\n    // Fill the key if need be\n    var key = model.$key();\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_LOCAL, this, model );\n\n    this.tryNext( NeuroSaveRemote );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_LOCAL_ERROR, this, model, e );\n\n    this.tryNext( NeuroSaveRemote );\n  }\n\n});\n","function NeuroSaveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n  }\n\n});","function NeuroSaveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var saving = this.saving = model.$getChanges( true );\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( saving ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    db.rest( model.$saved ? 'PUT' : 'POST', model, saving, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_REMOTE, this, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Events.SAVE_CONFLICT, this, data, model );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Events.SAVE_UPDATE_FAIL, this, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Events.SAVE_ERROR, this, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Events.SAVE_OFFLINE, this, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    for (var prop in data)\n    {\n      if ( !(prop in saving ) )\n      {\n        saving[ prop ] = data[ prop ];\n      }\n    }\n\n    Neuro.debug( Neuro.Events.SAVE_VALUES, this, saving, model );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( db.cache === false )\n      {\n        model.$saved = {};\n      }\n      else\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Events.SAVE_PUBLISH, this, saving, model );\n\n    db.live({\n      op: NeuroDatabase.Live.Save,\n      model: saving,\n      key: this.key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$pendingSave )\n    { \n      model.$pendingSave = false;\n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Events.SAVE_RESUME, this, model );\n    }\n  }\n\n});","function NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {\n\n};\n\nNeuro.Store = {\n  None: 0,\n  Model: 1,\n  Key: 2,\n  Keys: 3\n};\n\nNeuro.Save = {\n  None: 0,\n  Model: 4\n};\n\nNeuroRelation.prototype =\n{\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.store = options.store || Neuro.Store.None;\n    this.save = options.save || Neuro.Save.None;\n    this.auto = !!options.auto;\n    this.property = !!options.property;\n    this.pendingLoads = [];\n    this.initialized = false;\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ] );\n    }\n\n    pending.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If serialize is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n    }\n    else\n    {\n      this.handleLoad( model );\n    }\n  },\n\n  handleLoad: function(model)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  preSave: function(model)\n  {\n\n  },\n\n  postSave: function(model)\n  {\n\n  },\n\n  preRemove: function(model)\n  {\n\n  },\n\n  postRemove: function(model)\n  {\n\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        } \n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade !== false )\n        {\n          model.$remove();\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !this.hasForeignKey( model, relation.model ) && this.cascade !== false )\n        {\n          model.$remove();\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !this.hasForeignKey( model, related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  hasForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return propsMatch( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = options.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( options.comparator );\n    this.cascadeRemove = !!options.cascadeRemove;\n    this.cascadeSave = !!options.cascadeSave;\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Events.HASMANY_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      target.put( key, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      target.remove( key );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = options.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = options.local || ( database.name + '_' + database.key );\n\n    this.comparator = createComparator( options.comparator );\n    this.cascadeRemove = !!options.cascadeRemove;\n    this.cascadeSave = !!options.cascadeSave;\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Events.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    }\n    else\n    {\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through)\n    {\n      if ( relation.isRelated( through ) )\n      {\n        this.addModelFromThrough( relation, through );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var adding = this.finishAddModel( relation, related, skipCheck );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation ), this, false );\n  },\n\n  onAddThrough: function(relation)\n  {\n    var throughs = relation.throughs;\n\n    return function(through)\n    {\n      var key = through.$key();\n\n      if ( !throughs.has( key ) )\n      { \n        throughs.put( key, through );\n\n        through.$on( 'removed', relation.onThroughRemoved );\n      }\n\n      through.$save();\n    };\n  },\n\n  addModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through ), this );\n  },\n\n  onAddModelFromThrough: function(relation, through)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    return function(related)\n    {\n      if ( !throughs.has( throughKey ) )\n      {\n        throughs.put( throughKey, through );\n\n        through.$on( 'removed', relation.onThroughRemoved );\n      }\n\n      this.finishAddModel( relation, related );\n    };\n  },\n\n  finishAddModel: function(relation, related, skipCheck)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      relateds.put( relatedKey, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    if ( through )\n    {\n      through.$off( 'removed', relation.onThroughRemoved );\n      through.$remove();\n      \n      throughs.remove( key );\n    }\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    through.$off( 'removed', relation.onThroughRemoved );\n    throughs.remove( throughKey );\n\n    this.finishRemoveRelated( relation, relatedKey );\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      relateds.remove( relatedKey );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearModel( relation, true );\n        this.clearForeignKey( model );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Events.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearModel( relation );\n          this.clearForeignKey( model );\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Events.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade !== false )\n      {\n        Neuro.debug( Neuro.Events.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, dontRemove)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.HASONE_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        relation.model.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.HASONE_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Events = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_PRESAVE: 68,       // NeuroModel, relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72         // NeuroModel, relation, [NeuroModel]\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  return function (method, model, data, success, failure)\n  {\n    // success ( data )\n    // failure ( data, status )\n    \n    failure( {}, 0 );\n  };\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      // implement\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      // implement\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      // implement\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Events.ONLINE );\n  Neuro.trigger('online');\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Events.OFFLINE );\n  Neuro.trigger('offline');\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( 'online', Neuro.setOnline, false );\n    window.addEventListener( 'offline', Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}