{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroDiscriminatedModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminatedRelationCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","get.js","methods.js","query.js","ready.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","base","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroDiscriminatedModelCollection","discriminator","discriminatorsToModel","NeuroRelationCollection","relator","NeuroDiscriminatedRelationCollection","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","checkNeuro","cached","callbackContext","all","boot","input","putRemoteData","instance","instantiate","$save","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildKeyFromInput","buildObjectFromKey","$set","$refresh","fetchAll","onFinish","refresh","grabModel","methods","q","sync","ready","persistent","currentTime","currentDate","encode","decode","parse","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","ignoredFields","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReadyRemove","onReady","invoked","hasData","saving","checkModel","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","updated","sort","revisionFunction","ar","br","resort","decoded","revisionRejected","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","preSave","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","RemoteSave","RemoteSaveFailure","LocalRemove","LocalRemoveFailure","RemoteRemove","RemoteRemoveFailure","LocalGet","LocalGetFailure","RemoteGet","RemoteGetFailure","SavedRemoteUpdate","Blocked","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","Cascade","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","discriminatedValue","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","Local","Rest","NoLive","NoRest","Remote","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","run","finish","previousValue","finishRemove","$saving","$publish","liveRemove","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","liveSave","handleData","saveNow","Store","Key","Keys","auto","discriminators","discriminatorToModel","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","belongsTo","isRelatedFactory","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleLazyLoad","bulk","given","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","hasOne","dirty","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n}\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      this.summarize = function(model)\n      {\n        return isValue( model ) ? model[ summarize ] : model;\n      };\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(onFinish)\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  preSave: function(model)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    return this.saveToModels( model );\n  },\n\n  // Save the model\n  save: function(model, cascade, existing)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( !existing )\n    {\n      db.models.put( key, model ); \n      db.updated();\n    }\n\n    return existing;\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    var existing = this.$db.preSave( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade, existing );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      var map = this.map;\n\n      map.reset();\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Reset, [this] );\n      this.resort();\n    }\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","function NeuroDiscriminatedModelCollection(discriminator, discriminatorsToModel, models, remoteData)\n{\n  this.discriminator = discriminator;\n  this.discriminatorsToModel = discriminatorsToModel;\n\n  this.init( null, models, remoteData );\n}\n\nextendArray( NeuroModelCollection, NeuroDiscriminatedModelCollection, \n{\n\n  buildKeyFromInput: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","\nfunction NeuroDiscriminatedRelationCollection(model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init();\n}\n\nextendArray( NeuroDiscriminatedModelCollection, NeuroDiscriminatedRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function(models)\n  {\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function() \n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live(\n      {\n        op:   NeuroDatabase.Live.Remove,\n        key:  key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = \n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = \n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n      \n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < related.length; i++)\n        {\n          this.addModel( relation, related[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n      related.resort( this.comparator );\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        through.$save( this.cascadeSave );\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove && this.cascadeRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var related = this.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var related = this.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var instance = db.instantiate();\n\n      instance.$save();\n\n      return instance;\n    }\n\n    var fields = grab( props, db.fields );\n    var instance = db.instantiate( fields );\n    var key = instance.$key();\n    var relations = {};\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    instance.$save( relations );\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(onFinish)\n  {\n    db.refresh( onFinish );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n  // 50\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroDiscriminatedRelationCollection( model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroDiscriminatedModelCollection( this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n})(this);"],"sourceRoot":"/source/"}