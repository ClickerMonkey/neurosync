{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","NeuroRelationCollection.js","all.js","boot.js","collect.js","create.js","fetch.js","get.js","methods.js","query.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","copyConstructor","func","F","extend","parent","child","override","transfer","factory","args","this","arguments","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyFunction","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","createComparator","parsed","createNumberResolver","numbers","model","parseFloat","value","createPropertyResolver","delim","join","propsArray","propsResolver","createWhere","equality","createHaving","having","eventize","secret","onListeners","$this","property","events","callback","context","on","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","Neuro","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","keys","indices","addAll","NeuroFilteredCollection","base","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","NeuroModelCollection","remoteData","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Pending","onSuccess","handleSuccess","onFailure","handleFailure","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","NeuroRelationCollection","relator","Online","Offline","checkNeuro","cached","callbackContext","all","getModels","boot","input","putRemoteData","instantiate","$save","$key","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","fetch","buildKeyFromInput","instance","getModel","buildObjectFromKey","$set","$refresh","grabModel","methods","q","sync","where","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","encode","data","decode","rawData","ready","persistent","onReadyRemove","onReady","invoked","checkModel","result","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","hasFields","exists","sort","revisionFunction","ar","br","comparatorFunction","decoded","revisionCompare","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","refresh","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","resort","filtered","collection","intersect","complement","add","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","first","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","Success","Failure","Ready","setQuery","skipSync","clearPending","cancel","that","error","next","finished","interrupts","run","finish","tryNext","setNext","insertNext","type","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","changes","saving","publish","clearLocal","markSynced","handleData","saveNow","publishing","Store","Key","Keys","auto","getDefaults","field","pendingLoads","pendingRemoteDatas","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","remotes","handleLoad","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","belongsTo","isRelatedFactory","initial","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleLazyLoad","bulk","existing","given","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n}\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copyFunction(x)\n{\n  return function() {\n    return x.apply( this, arguments );\n  };\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    var $init = model.prototype.$init;\n\n    model.prototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      applyEventListeners( this, modelEvents );\n    };\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      \n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  // this.models = new NeuroModelCollection();\n  this.models = new NeuroMap();\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  summarize:            function(model) { return model.$key(); }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br );\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst ); // TODO remove\n    // this.models.setComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      this.summarize = function(model)\n      {\n        return isValue( model ) ? model[ summarize ] : model;\n      };\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n    // this.models.resort(); TODO add\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n    // return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      // db.models.clear();\n      db.models.reset();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys; // TODO ()\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values; // TOOD -.values\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes reset'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, comparatorNullsFirst)\n  {\n    this.comparator = createComparator( comparator, comparatorNullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function()\n  {\n    return isSorted( this.comparator, this );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n\n\n\n\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    var arr = [];\n    arr.push.apply( arr, this );\n    return arr;\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd = copyFunction( this.handleAdd );\n  this.onAdds = copyFunction( this.handleAdds );\n  this.onRemove = copyFunction( this.handleRemove );\n  this.onRemoves = copyFunction( this.handleRemoves );\n  this.onReset = copyFunction( this.handleReset );\n  this.onUpdates = copyFunction( this.handleUpdates );\n  this.onCleared = copyFunction( this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd, this );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds, this );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove, this );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves, this );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset, this );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates, this );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear, this );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n\n  subtract: function(models, out)\n  {\n    var db = this.database;\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = db.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var db = this.database;\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = db.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var db = this.database;\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = db.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      var db = this.database;\n\n      this.map.reset();\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = db.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          this.map.put( parsed.$key(), parsed );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Reset, [this] );\n      this.resort();\n    }\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var db = this.database;\n    var key = db.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var db = this.database;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = db.buildKeyFromInput( inputs[ i ] );\n      var removing = this.map.get( key );\n\n      if ( removing )\n      {\n        this.map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var db = this.database;\n    var key = db.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  },\n\n});","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd = copyFunction( this.handleModelAdded );\n  this.onModelRemoved = copyFunction( this.handleModelRemoved );\n  this.onModelUpdated = copyFunction( this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd, this );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved, this );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated, this );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var models = this.database.getModels();\n\n    this.map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( this.where( model ) )\n      {\n        this.map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Pending;\n\n  this.onSuccess = this.handleSuccess();\n  this.onFailure = this.handleFailure();\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:  0,\n  Success:  1,\n  Failure:  2\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function()\n  {\n    var that = this;\n\n    return function(models)\n    {\n      that.status = NeuroRemoteQuery.Status.Success;\n      that.reset( models, true );\n      that.trigger( NeuroRemoteQuery.Events.Success, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  },\n\n  handleFailure: function()\n  {\n    var that = this;\n\n    return function(models, error)\n    {\n      that.status = NeuroRemoteQuery.Status.Failure;\n      that.trigger( NeuroRemoteQuery.Events.Failure, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  }\n\n});","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( isEmpty( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live(\n    {\n      op:     NeuroDatabase.Live.Save,\n      model:  model.$publish,\n      key:    model.$key()\n    });\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n    \n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated ); // TODO\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related ); // TODO\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation, remoteData ), this, remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.model )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var collection = new NeuroRelationCollection( relatedDatabase, model, this );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: collection.map,\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated ); // TODO\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var collection = new NeuroRelationCollection( relatedDatabase, model, this );\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: collection.map,\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated ); // TODO\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this, remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.init( database );\n  this.model = model;\n  this.relator = relator;\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.getModels();\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.getModel( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.getModel( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    q.sync();\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n\n  global.Neuro.createWhere = createWhere;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}