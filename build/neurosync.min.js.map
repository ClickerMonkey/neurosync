{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","get.js","methods.js","query.js","ready.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","Online","Offline","checkNeuro","cached","callbackContext","all","boot","putRemoteData","instance","createModel","instantiate","$save","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","$refresh","fetchAll","onFinish","refresh","grabModel","methods","q","sync","ready","persistent","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReady","invoked","hasData","saving","checkModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","updated","sort","revisionFunction","ar","br","resort","overwrite","decoded","revisionRejected","missingModel","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","relationName","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","preSave","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGets","SavedRemoteUpdate","Blocked","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","def","evaluatedValue","$get","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","Cascade","$remove","$exists","$cancel","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","Local","Rest","NoLive","NoRest","Remote","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","run","finish","previousValue","finishRemove","$saving","$publish","liveRemove","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","liveSave","handleData","saveNow","Store","Key","Keys","auto","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","loaded","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note, \n * Arrays are considered objects.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a \n * string it is split based on the delimiter given. If the variable is an \n * array then it is returned. If the variable is any other type it may result \n * in an error.\n * \n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n * \n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom \n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n * \n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n * \n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n * \n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n * \n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid() \n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n  \n  expr.replace( parse.REGEX, function(prop) \n  {\n    if (!valid) \n    {\n      return;\n    }\n\n    if ( isArray( base ) ) \n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i)) \n      {\n        base = base[ i ];\n      }\n      else \n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) ) \n    {\n      if (prop in base) \n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      } \n      else \n      {\n        valid = false;\n      }\n    } \n    else \n    {\n      valid = false;\n    }\n  });\n  \n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n      \n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the \n * constructor for creating instances of the Neuro object defined.\n * \n * @namespace \n * @param {Object} options\n *        The options of \n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };  \n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.createModel( decoded, true );\n      \n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var values = grab( decoded, db.fields );\n    var model = db.instantiate( values, remoteData );\n    var key = model.$key();\n    var missingModel = !db.models.has( key );\n\n    if ( missingModel )\n    {\n      db.models.put( key, model );\n    }\n\n    var relations = {};\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in decoded )\n      {\n        relations[ relationName ] = decoded[ relationName ];\n      }\n    }\n\n    model.$set( relations, undefined, remoteData );\n\n    if ( missingModel )\n    {\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(onFinish)\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  preSave: function(model)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    return this.saveToModels( model );\n  },\n\n  // Save the model\n  save: function(model, cascade, existing)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( !existing )\n    {\n      db.models.put( key, model ); \n      db.updated();\n    }\n\n    return existing;\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\n/**\n * An instance\n * \n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaves:          'remote-save remote-save-failure',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoves:        'remote-remove remote-remove-failure',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGets:           'remote-get remote-get-failure',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, remoteData ); \n        }\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    var existing = this.$db.preSave( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade, existing );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$db.getKey( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function(models)\n  {\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function() \n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live(\n      {\n        op:   NeuroDatabase.Live.Remove,\n        key:  key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = \n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = \n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle, \n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n    \n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(onFinish)\n  {\n    db.refresh( onFinish );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 108,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);"],"sourceRoot":"/source/"}