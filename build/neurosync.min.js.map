{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","all.js","boot.js","create.js","fetch.js","get.js","methods.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","copyConstructor","func","F","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","parsed","eventize","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","Neuro","cache","database","NeuroDatabase","model","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","arguments","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","values","keys","indices","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","checkNeuro","cached","callbackContext","all","getModels","boot","input","putRemoteData","create","instantiate","$save","$key","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","fetch","buildKeyFromInput","instance","getModel","buildObjectFromKey","$set","$refresh","grabModel","methods","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","encode","data","decode","rawData","ready","persistent","onReadyRemove","onReady","invoked","remoteData","checkModel","result","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","sort","revisionFunction","ar","br","comparatorFunction","isSorted","decoded","revisionCompare","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","slice","RemovePending","Removed","SavePending","refresh","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","status","onRefreshOnline","op","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","filter","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","next","finished","interrupts","run","finish","tryNext","setNext","insertNext","onSuccess","onFailure","type","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","changes","saving","publish","clearLocal","markSynced","handleData","saveNow","clearPending","publishing","Store","Key","Keys","auto","getDefaults","field","pendingLoads","pendingRemoteDatas","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","remotes","handleLoad","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","total","belongsTo","that","isRelatedFactory","initial","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleModelAdded","handleLazyLoad","bulk","existing","given","removing","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","Relation","Operation","Map"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    var $init = model.prototype.$init;\n\n    model.prototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      applyEventListeners( this, modelEvents );\n    };\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      \n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br );\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( isEmpty( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live(\n    {\n      op:     NeuroDatabase.Live.Save,\n      model:  model.$publish,\n      key:    model.$key()\n    });\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n    \n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation, remoteData ), this, remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.model )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this, remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.getModels();\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    return db.putRemoteData( input );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.getModel( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.getModel( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}