{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","parsed","addDynamicProperty","modelPrototype","property","definition","get","set","Object","defineProperty","configurable","enumerable","$init","this","arguments","lastCalculatedValue","handleChange","current","$after","Events","Changes","parseEventListeners","events","callback","secret","out","map","on","once","after","listeners","when","invoke","context","eventType","subcallback","applyEventListeners","l","eventize","onListeners","$this","offListeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$off","$trigger","Neuro","cache","database","NeuroDatabase","model","Function","className","methods","dynamic","init","debug","Debugs","CREATION","all","getModels","create","fetch","input","key","buildKeyFromInput","instance","getModel","buildObjectFromKey","$set","$refresh","boot","$local","$toJSON","$saved","$addOperation","NeuroSaveNow","Initialized","Defaults","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","remoteOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","databaseEvents","modelEvents","eventName","databaseEventString","modelEventString","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","checkNeuro","cached","callbackContext","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","encode","data","decode","rawData","$key","ready","persistent","onReadyRemove","onReady","invoked","grabModel","fromStorage","checkModel","result","parseModel","hasRemote","has","putRemoteData","instantiate","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","decoded","revisionCompare","conflicts","conflicted","notReallySaved","currentValue","savedValue","PartialUpdate","FullUpdate","RemoteUpdate","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","refresh","onLocalError","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","op","$save","relationName","Cascade","UpdateAndSave","CreateAndSave","Local","Removed","$pendingSave","refreshModel","Rest","Created","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","filter","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Remote","next","finished","canCascade","run","finish","tryNext","insertNext","onSuccess","onFailure","previousValue","finishRemove","handleOnline","changes","saving","publishing","handleData","Store","Key","Keys","auto","getDefaults","field","pendingLoads","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","handleLoad","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","total","belongsTo","that","isRelatedFactory","onKeyUpdate","handleKeyUpdate","initial","loaded","onRemoved","clearRelated","onSaved","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleModelAdded","handleLazyLoad","bulk","existing","given","removing","adding","addModel","skipCheck","alreadyRemoved","hasManyThrough","through","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","callSave","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","cascde","dontRemove","Relation","Operation","Map"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  model.all = function()\n  {\n    return database.getModels();\n  };\n\n  model.create = function( props )\n  {\n    return database.create( props );\n  };\n\n  model.fetch = function( input )\n  {\n    var key = database.buildKeyFromInput( input );\n    var instance = database.getModel( key );\n\n    if ( !instance )\n    {\n      instance = database.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n\n  model.boot = function( input )\n  {\n    var instance = new model( input );\n\n    instance.$local = instance.$toJSON( false );\n    instance.$local.$saved = instance.$saved = instance.$toJSON( true );\n    instance.$addOperation( NeuroSaveNow );\n\n    return instance;\n  };\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Event Listeners\n  this.databaseEvents = [];\n  this.modelEvents = [];\n\n  if ( isObject( this.events ) )\n  {\n    for ( var eventType in this.events )\n    {\n      var callback = this.events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, this.databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, this.modelEvents );\n      }\n    }\n  }\n\n  applyEventListeners( this, this.databaseEvents );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  dynamic:              false,\n  methods:              false,\n  events:               false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, fromStorage)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, fromStorage !== false );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      if ( fromStorage )\n      { \n        return db.putRemoteData( input, undefined, undefined, true ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (compare( a[ revision ], b[ revision ] )) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          // TODO\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Create the model\n  create: function(props)\n  {\n    var db = this;\n\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n    var key = model.$key();\n    var cascade = isValue( cascade ) ? cascade : Neuro.Cascade.All;\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    // If we're not supposed to cascade this anywhere, stop!\n    if ( !cascade )\n    {\n      return;\n    }\n\n    // If we're not storing locally OR we're not cascading locally, jump directly to remote.\n    // TODO ensure cascade rest, otherwise call live.\n    if ( db.cache === Neuro.Cache.None || !(cascade & Neuro.Cascade.Local) )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote, cascade );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal, cascade );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n    var key = model.$key();\n    var cascade = isValue( cascade ) ? cascade : Neuro.Cascade.All;\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    // If we're not supposed to cascade this anywhere, stop!\n    if ( !cascade )\n    {\n      return;\n    }\n\n    // If we're not storing locally OR we're not cascading locally, jump directly to remote.\n    // TODO ensure cascade rest, otherwise call live.\n    if ( db.cache === Neuro.Cache.None || !(cascade & Neuro.Cascade.Local) )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote, cascade );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal, cascade );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    var db = this;\n    var cascade = isValue( cascade ) ? cascade : Neuro.Cascade.Rest;\n\n    // If we're not supposed to cascade this anywhere, stop!\n    if ( !cascade )\n    {\n      return;\n    }\n\n    // If we're not storing locally OR we're not cascading locally, jump directly to remote.\n    if ( db.cache !== Neuro.Cache.All || !(cascade & Neuro.Cascade.Local) )\n    {\n      // Getting remotely\n      model.$addOperation( NeuroGetRemote, cascade );\n    }\n    else\n    {\n      // Start by getting locally.\n      model.$addOperation( NeuroGetLocal, cascade );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n\n    // Load Global Model Event Listeners\n    applyEventListeners( this, this.$db.modelEvents );\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ] );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 && isNumber( cascade ) ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ? setProperties : Neuro.Cascade.All ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isValue( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(type)\n  {\n    return !!(this.cascade & type);\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroGetLocal' ), NeuroGetLocal,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cache === Neuro.Cache.All && this.canCascade( Neuro.Cascade.Local ) )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote, this.cascade ); \n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      this.insertNext( NeuroGetRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      this.insertNext( NeuroGetRemote, this.cascade );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroGetRemote' ), NeuroGetRemote,\n{\n\n  run: function(db, model)\n  {\n    db.rest.get( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveCache' ), NeuroRemoveCache,\n{\n\n  run: function(db, model)\n  {\n    model.$pendingSave = false;\n\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Rest )  )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$deleted = true;\n    model.$pendingSave = false;\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      \n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live({\n        op: NeuroDatabase.Live.Remove,\n        key: key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote, this.cascade );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Fill the key if need be\n    var key = model.$key();\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n\n      if ( model.$saved )\n      {\n        model.$local.$saved = model.$saved;\n      }\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      this.tryNext( NeuroSaveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      this.tryNext( NeuroSaveRemote, this.cascade );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cache !== Neuro.Cache.All )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var encoded = this.encoded = model.$toJSON( true );\n    var changes = this.changes = model.$getChanges( encoded );\n    var saving = this.saving = db.fullSave ? encoded : changes;\n    var publishing = this.publishing = db.fullPublish ? encoded : changes;\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( changes ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    if ( model.$saved )\n    {\n      db.rest.update( model, saving, this.success(), this.failure() );\n    }\n    else\n    {\n      db.rest.create( model, saving, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n    var publishing = this.publishing;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    if ( !isEmpty( data ) )\n    {\n      transfer( data, saving );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( model.$local )\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n      else\n      {\n        model.$saved = {};\n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n      db.live({\n        op: NeuroDatabase.Live.Save,\n        model: publishing,\n        key: this.key\n      });\n    }\n\n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$pendingSave )\n    { \n      model.$pendingSave = false;\n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ] );\n    }\n\n    pending.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n    }\n    else\n    {\n      this.handleLoad( model );\n    }\n  },\n\n  handleLoad: function(model)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    Neuro.Cascade.All\n};\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var onKeyUpdate = this.handleKeyUpdate();\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onKeyUpdate: onKeyUpdate,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n\n      model.$off( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  handleKeyUpdate: function()\n  {\n    return function onKeyUpdate(model, related, modelFields, relatedFields)\n    {\n      if ( this.local === modelFields )\n      {\n        var relation = model.$relations[ this.name ];\n\n        if ( relation && related !== relation.model )\n        {\n          this.clearModel( relation );\n          this.setModel( relation, related );\n          this.setProperty( relation );\n        }        \n      }\n    };\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.All,\n  cascadeSave:          Neuro.Cascade.All\n};\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.All,\n  cascadeSave:          Neuro.Cascade.None\n};\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n  \n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var adding = this.finishAddModel( relation, related, skipCheck );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation ), this, false );\n  },\n\n  onAddThrough: function(relation)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, true );\n    };\n  },\n\n  addModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through ), this );\n  },\n\n  onAddModelFromThrough: function(relation, through)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through );\n        this.finishAddModel( relation, related );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, callSave)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callSave )\n      {\n        through.$save( this.cascadeSave );\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, skipCheck)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    Neuro.Cascade.None\n};\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation, true );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation, false, this.cascde );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation, dontRemove)\n  {\n    this.clearModel( relation, dontRemove );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, dontRemove, cascade)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        related.$remove( cascade );\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}