{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","get.js","methods.js","query.js","ready.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","keys","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","Online","Offline","checkNeuro","cached","callbackContext","all","boot","putRemoteData","instance","createModel","instantiate","$save","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","$refresh","fetchAll","onFinish","refresh","grabModel","methods","q","sync","ready","persistent","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReady","invoked","hasData","saving","checkModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","updated","sort","revisionFunction","ar","br","resort","overwrite","decoded","revisionRejected","keyFields","mk","dk","missingModel","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","relationName","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","preSave","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGets","SavedRemoteUpdate","Blocked","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","def","evaluatedValue","$get","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","Cascade","$remove","$exists","$cancel","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","Local","Rest","NoLive","NoRest","Remote","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","run","finish","previousValue","finishRemove","$saving","$publish","liveRemove","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","liveSave","handleData","saveNow","Store","Key","Keys","auto","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","loaded","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note, \n * Arrays are considered objects.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a \n * string it is split based on the delimiter given. If the variable is an \n * array then it is returned. If the variable is any other type it may result \n * in an error.\n * \n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n * \n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom \n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n * \n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n * \n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n * \n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n * \n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid() \n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n  \n  expr.replace( parse.REGEX, function(prop) \n  {\n    if (!valid) \n    {\n      return;\n    }\n\n    if ( isArray( base ) ) \n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i)) \n      {\n        base = base[ i ];\n      }\n      else \n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) ) \n    {\n      if (prop in base) \n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      } \n      else \n      {\n        valid = false;\n      }\n    } \n    else \n    {\n      valid = false;\n    }\n  });\n  \n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n      \n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the \n * constructor for creating instances of the Neuro object defined.\n * \n * @namespace \n * @param {Object} options\n *        The options of \n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };  \n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw 'Model keys cannot be changed.';\n        }\n      }\n\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n      \n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var values = grab( decoded, db.fields );\n    var model = db.instantiate( values, remoteData );\n    var key = model.$key();\n    var missingModel = !db.models.has( key );\n\n    if ( missingModel )\n    {\n      db.models.put( key, model );\n    }\n\n    var relations = {};\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in decoded )\n      {\n        relations[ relationName ] = decoded[ relationName ];\n      }\n    }\n\n    model.$set( relations, undefined, remoteData );\n\n    if ( missingModel )\n    {\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(onFinish)\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  preSave: function(model)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    return this.saveToModels( model );\n  },\n\n  // Save the model\n  save: function(model, cascade, existing)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( !existing )\n    {\n      db.models.put( key, model ); \n      db.updated();\n    }\n\n    return existing;\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\n/**\n * An instance\n * \n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaves:          'remote-save remote-save-failure',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoves:        'remote-remove remote-remove-failure',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGets:           'remote-get remote-get-failure',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, remoteData ); \n        }\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    var existing = this.$db.preSave( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade, existing );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$db.getKey( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function(models)\n  {\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function() \n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live(\n      {\n        op:   NeuroDatabase.Live.Remove,\n        key:  key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = \n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = \n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle, \n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n    \n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(onFinish)\n  {\n    db.refresh( onFinish );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 108,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);"],"sourceRoot":"/source/"}