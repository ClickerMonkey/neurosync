{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","S4","Math","random","toString","substring","uuid","extend","parent","child","override","prop","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","transfer","from","to","swap","a","k","t","evaluate","copy","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","charAt","copyHidden","c","getTime","source","match","diff","curr","old","d","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","localeCompare","createComparator","eventize","target","secret","onListeners","$this","property","events","callback","context","on","this","once","offListeners","listeners","event","eventListeners","splice","deleteProperty","off","$$on","$$once","triggerListeners","args","clear","max","slice","trigger","e","$on","$once","$off","$trigger","Neuro","options","database","NeuroDatabase","model","Function","className","init","debug","Events","CREATION","cache","name","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","rest","store","live","handlePublish","setComparator","setRevision","revision","relations","relationType","RELATIONS","RelationClass","NeuroRelation","relationMap","relationOptions","relation","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveLocal","reset","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasOne","get","checkNeuro","neuro","callbackContext","cached","REST","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_PRESAVE","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","method","data","success","failure","put","key","record","remove","all","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","checkModel","result","parseModel","fromStorage","buildKeyFromInput","has","putRemoteData","removeKey","buildKey","fields","buildKeys","join","keySeparator","$key","buildKeyFromArray","ks","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","encoded","decoded","decode","revisionCompare","$saved","current","$toJSON","conflicts","conflicted","currentValue","savedValue","$local","$addOperation","instantiate","destroyLocalUncachedModel","$hasChanges","destroyLocalCachedModel","removedValue","destroyLocalModel","loadRemote","refresh","records","$deleted","onModels","mapped","onLoadError","status","getModels","getModel","op","encode","rawData","save","$pendingSave","$init","$operation","$relations","$set","$reset","loadRelations","databaseRelations","$getRelation","def","defaults","defaultValue","evaluatedValue","set","value","$get","$relate","relate","$unrelate","unrelated","unrelate","load","$save","setProperties","setValue","$callRelationFunction","$remove","$exists","functionName","OperationType","operation","queue","execute","forSaving","$keys","$isSaved","$isSavedLocally","$isNew","$getChanges","saved","index","removeAt","lastValue","pop","lastKey","size","filter","dest","out","v","reverse","half","ceil","rebuildIndex","partition","left","right","pivot","map","floor","j","qsort","l","next","finished","run","finish","tryNext","insertNext","onSuccess","arguments","onFailure","previousValue","finishRemove","saving","handleData","STORE_NONE","STORE_MODEL","STORE_KEY","STORE_KEYS","SAVE_NONE","SAVE_MODEL","field","auto","setNeuro","onInitialized","preSave","postSave","preRemove","postRemove","clearFields","targetFields","changes","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","related","getStored","local","relatedDatabase","that","initial","loaded","onRemoved","cascade","onSaved","hasForeignKey","handleLoad","clearModel","setRelated","clearForeignKey","setModel","updateForeignKey","setProperty","foreign","cascadeRemove","cascadeSave","HASMANY_INIT","isRelated","pending","delaySorting","delaySaving","removeModel","checkSave","handleModelAdded","handleModel","handleLazyLoad","bulk","isModelArray","addModel","skipCheck","adding","alreadyRemoved","relatedKey","dirty","dontRemove","Relation","Operation"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return x !== undefined && x !== null;\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction extend(parent, child, override)\n{\n  child.prototype = parent;\n\n  for (var prop in override)\n  {\n    child.prototype[ prop ] = override[ prop ];\n  }\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === void 0)\n  {\n    return x;\n  }\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n    return x;\n  }\n  if (isFunction(x) || typeof x !== 'object' || x === null)\n  {\n    return x;\n  }\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n  if (isRegExp(x))\n  {\n    return new RegExp( x.source, x.toString().match(/[^\\/]*$/)[0] );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' || !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' || !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        return compare( b[ comparator ], a[ comparator ] );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        return compare( a[ comparator ], b[ comparator ] );\n      };\n    }\n  }\n\n  return null;\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          callback[0].apply( callback[1], args );  \n        }\n      }\n      \n      if ( clear )\n      {\n        if ( eventListeners.length !== max )\n        {\n          listeners[ event ] = eventListeners.slice( max );  \n        }\n        else\n        {\n          delete listeners[ event ];  \n        }\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/*\nnew Neuro({\n  name: 'name',\n  api: 'http://api/name',\n  pubsub: 'http://url:port',\n  channel: 'houseid',\n  token: 'userid',\n  key: 'id',\n  fields: ['id', 'name', 'updated_at'],\n//  encode: function() {},\n//  decode: function() {}\n});\n*/\n\nfunction Neuro(options)\n{\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + options.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Events.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( 'initialized', [model] );\n\n  return model;\n}\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro(neuro)\n      {\n        if ( neuro.name === name || neuro.className === name )\n        {\n          callback.call( callbackContext, neuro );\n\n          Neuro.off( 'initialized', checkNeuro );\n        }\n      }\n\n      Neuro.on( 'initialized', checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\nNeuro.RELATIONS = {};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  transfer( options, this );\n\n  this.models = new NeuroMap();\n\n  this.initialized = false;\n  this.pendingRefresh = false;\n\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n\n  this.rest = Neuro.rest( this );\n  this.store = Neuro.store( this );\n  this.live = Neuro.live( this, this.handlePublish( this ) );\n\n  this.setComparator( this.comparator );\n  this.setRevision( this.revision );\n\n  this.relations = {};\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.RELATIONS) )\n    {\n      continue;\n    }\n    var RelationClass = Neuro.RELATIONS[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      this.relations[ name ] = relation;\n    }\n  }\n}\n\nNeuroDatabase.prototype =\n{\n\n  //\n  toString: function(model) \n  {\n    return '';\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( 'local-load remote-load', onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( 'local-load remote-load', onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, true );\n\n      if ( result !== false )\n      {\n        callback.call( callbackContext, result );\n      }\n\n      return result;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n\n    if ( !isValue( input ) )\n    {\n      return db.remoteLoaded ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input, undefined, undefined, fromStorage );\n    }\n    else if ( db.remoteLoaded )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator || '/' );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    var ks = this.keySeparator || '/';\n    var key = '';\n\n    for (var i = 0; i < arr.length; i++)\n    {\n      if (i > 0)\n      {\n        key += ks;\n      }\n\n      key += arr[ i ];\n    }\n\n    return key;\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( 'updated' );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (a[ revision ] - b[ revision ]) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator)\n  {\n    this.comparatorFunction = createComparator( comparator );\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Events.SAVE_OLD_REVISION, db, model, encoded );\n\n        return;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( db.cache !== false )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( 'partial-update', [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( 'full-update', [encoded, updated] );\n      }\n\n      model.$trigger( 'remote-update', [encoded] );\n\n      if ( db.cache !== false )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache !== false )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( 'model-added', [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( 'saved' ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( 'detach' );\n\n        return false;\n      }\n\n      model.$trigger( 'remote-remove' );\n\n      db.models.remove( key );\n      db.trigger( 'model-removed', [model] );\n\n      model.$trigger('removed');\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( 'detach' );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$trigger( 'remote-remove' );\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( 'model-removed', [model] );\n\n      model.$trigger('removed');\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === false )\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.cache === false )\n    {\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n\n      return;\n    }\n\n    db.store.all(function(records, keys)\n    {\n      Neuro.debug( Neuro.Events.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Events.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Events.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Events.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( 'local-load', [db] );\n\n      db.updated();\n\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n    });    \n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n    \n    db.rest( 'GET', undefined, undefined, onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n        var key = model.$key();\n\n        mapped[ key ] = model;\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Events.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( 'remote-load', [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Events.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once('online', function()\n          {\n            Neuro.debug( Neuro.Events.REMOTE_LOAD_RESUME, db );\n\n            if ( db.pendingRefresh )\n            {\n              db.pendingRefresh = false;\n\n              db.refresh(); \n            }\n          })\n        }\n\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_ERROR, db, status );\n      }\n    }\n  \n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case 'SAVE':\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Events.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case 'REMOVE':\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Events.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Converts properties in data into their storable form\n  encode: function(data)\n  {\n    return data;\n  },\n\n  // Converts properties in rawData from their storable form to their desired\n  decode: function(rawData)\n  {\n    return rawData;\n  },\n\n  // Save the model\n  save: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( 'model-added', [model] );\n      db.updated();\n\n      model.$trigger('created saved');\n    }\n    else\n    {\n      db.trigger( 'model-updated', [model] );\n\n      model.$trigger('updated saved');\n    }\n\n    if ( db.cache === false )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal );\n    }\n  },\n\n  // Remove the model \n  remove: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( 'model-removed', [model] );\n      db.updated();\n\n      model.$trigger('removed');\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    // TODO Add Debug here?\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    if ( db.cache === false )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value; \n      }\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue)\n  {\n    this.$set( setProperties, setValue );\n\n    this.$callRelationFunction( 'preSave' );\n\n    this.$db.save( this );\n\n    this.$callRelationFunction( 'postSave' );\n  },\n\n  $remove: function()\n  {\n    if ( this.$exists() )\n    {\n      this.$callRelationFunction( 'preRemove' );\n\n      this.$db.remove( this );\n\n      this.$callRelationFunction( 'postRemove' );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $callRelationFunction: function(functionName)\n  {\n    var databaseRelations = this.$db.relations;\n\n    for ( var name in databaseRelations )\n    {\n      databaseRelations[ name ][ functionName ]( this );\n    }\n  },\n\n  $addOperation: function(OperationType) \n  {\n    var operation = new OperationType( this );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function()\n  {\n    var saved = this.$saved;\n    var encoded = this.$toJSON( true );\n    var fields = this.$db.fields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model)\n  {\n    this.model = model;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model );\n    }\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n\n/**\n\n$operation;\n\n$addOperation: function(OperationType) {\n  var operation = new OperationType( this );\n  if ( !this.$operation ) {\n    this.$operation = operation;\n    this.$operation.execute();\n  } else {\n    this.$operation.queue( operation );\n  }\n}\n\n */","function NeuroRemoveLocal(model)\n{\n  this.reset( model );\n}\n\nNeuroRemoveLocal.prototype = new NeuroOperation( true, 'NeuroRemoveLocal' );\n\nNeuroRemoveLocal.prototype.run = function(db, model)\n{\n  var key = model.$key();\n\n  // If there is no local there's nothing to remove from anywhere!\n  if ( !model.$local )\n  {\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL_NONE, model );\n\n    return this.finish();\n  }\n\n  // If this model hasn't been saved we only need to remove it from local storage.\n  if ( model.$saved )\n  {\n    // Mark local copy as deleted in the event we're not online\n    model.$local.$deleted = true;\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  }\n  else\n  {\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL_UNSAVED, model );\n\n    db.store.remove( key, this.success(), this.failure() );\n  }\n};\n\nNeuroRemoveLocal.prototype.onSuccess = function(key, encoded, previousValue)\n{\n  var model = this.model;\n\n  Neuro.debug( Neuro.Events.REMOVE_LOCAL, model );\n\n  if ( model.$saved )\n  {\n    model.$addOperation( NeuroRemoveRemote );\n  }\n};\n\nNeuroRemoveLocal.prototype.onFailure = function(e)\n{\n  var model = this.model;\n\n  Neuro.debug( Neuro.Events.REMOVE_LOCAL_ERROR, model, e );\n\n  if ( model.$saved )\n  {\n    model.$addOperation( NeuroRemoveRemote );\n  }\n};","function NeuroRemoveNow(model)\n{\n  this.reset( model );\n}\n\nNeuroRemoveNow.prototype = new NeuroOperation( true, 'NeuroRemoveNow' );\n\nNeuroRemoveNow.prototype.run = function(db, model)\n{\n  var key = model.$key();\n\n  if ( db.models.has( key ) )\n  {\n    db.models.remove( key );\n    db.trigger( 'model-removed', [model] );\n    \n    db.updated();\n\n    model.$trigger('removed');\n  }\n\n  db.store.remove( key, this.success(), this.failure() );\n};","function NeuroRemoveRemote(model)\n{\n  this.reset( model );\n}\n\nNeuroRemoveRemote.prototype = new NeuroOperation( true, 'NeuroRemoveRemote' );\n\nNeuroRemoveRemote.prototype.run = function(db, model)\n{\n  // Cancel any pending saves\n  model.$pendingSave = false;\n  model.$deleted = true;\n\n  // Grab key & encode to JSON\n  this.key = model.$key();\n\n  // Make the REST call to remove the model\n  db.rest( 'DELETE', model, undefined, this.success(), this.failure() );\n};\n\nNeuroRemoveRemote.prototype.onSuccess = function(data)\n{\n  this.finishRemove();\n};\n\nNeuroRemoveRemote.prototype.onFailure = function(data, status)\n{\n  var operation = this;\n  var key = this.key;\n  var model = this.model;\n\n  if ( status === 404 || status === 410 )\n  {\n    Neuro.debug( Neuro.Events.REMOVE_MISSING, this, key, model );\n\n    this.finishRemove();\n  }\n  else if ( status !== 0 ) \n  {\n    Neuro.debug( Neuro.Events.REMOVE_ERROR, this, status, key, model );\n  } \n  else \n  {\n    // Looks like we're offline!\n    Neuro.checkNetworkStatus();\n\n    // If we are offline, wait until we're online again to resume the delete\n    if (!Neuro.online) \n    {\n      Neuro.once('online', function() \n      {\n        Neuro.debug( Neuro.Events.REMOVE_RESUME, operation, model );\n\n        model.$addOperation( NeuroRemoveRemote );\n      });\n    }\n\n    Neuro.debug( Neuro.Events.REMOVE_OFFLINE, this, model );\n  }\n};\n\nNeuroRemoveRemote.prototype.finishRemove = function()\n{\n  var db = this.db;\n  var key = this.key;\n  var model = this.model;\n\n  Neuro.debug( Neuro.Events.REMOVE_REMOTE, this, key, model );\n\n  // Remove from local storage now\n  this.insertNext( NeuroRemoveNow );\n\n  // Publish REMOVE\n  Neuro.debug( Neuro.Events.REMOVE_PUBLISH, this, key, model );\n\n  db.live({\n    op: 'REMOVE',\n    key: key\n  });\n};","function NeuroSaveLocal(model)\n{\n  this.reset( model );\n}\n\nNeuroSaveLocal.prototype = new NeuroOperation( false, 'NeuroSaveLocal' );\n\nNeuroSaveLocal.prototype.run = function(db, model)\n{\n  // If the model is deleted, return immediately!\n  if ( model.$deleted )\n  {\n    Neuro.debug( Neuro.Events.SAVE_LOCAL_DELETED, this, model );\n\n    return this.finish();\n  }\n\n  var encoded = model.$toJSON( false );\n\n  // If this model doesn't have a local copy yet - create it.\n  if ( !model.$local ) \n  {\n    model.$local = encoded;\n  } \n  else \n  {\n    // Copy to the local copy\n    transfer( encoded, model.$local );\n  }\n\n  db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n};\n\nNeuroSaveLocal.prototype.onSuccess = function(key, encoded, previousValue)\n{\n  var model = this.model;\n\n  Neuro.debug( Neuro.Events.SAVE_LOCAL, this, model );\n\n  this.tryNext( NeuroSaveRemote );\n};\n\nNeuroSaveLocal.prototype.onFailure = function(e)\n{\n  var model = this.model;\n\n  Neuro.debug( Neuro.Events.SAVE_LOCAL_ERROR, this, model, e );\n\n  this.tryNext( NeuroSaveRemote );\n};","function NeuroSaveNow(model)\n{\n  this.reset( model );\n}\n\nNeuroSaveNow.prototype = new NeuroOperation( false, 'NeuroSaveNow' );\n\nNeuroSaveNow.prototype.run = function(db, model)\n{\n  db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n};","function NeuroSaveRemote(model)\n{\n  this.reset( model );\n}\n\nNeuroSaveRemote.prototype = new NeuroOperation( false, 'NeuroSaveRemote' );\n\nNeuroSaveRemote.prototype.run = function(db, model)\n{\n  // If the model is deleted, return immediately!\n  if ( model.$deleted )\n  {\n    Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model );\n\n    return this.finish();\n  }\n\n  // Grab key & encode to JSON\n  var key = this.key = model.$key();\n\n  // The fields that have changed since last save\n  var saving = this.saving = model.$getChanges( true );\n\n  // If there's nothing to save, don't bother!\n  if ( isEmpty( saving ) )\n  {\n    return this.finish();\n  }\n\n  // Make the REST call to save the model\n  db.rest( model.$saved ? 'PUT' : 'POST', model, saving, this.success(), this.failure() );\n};\n\nNeuroSaveRemote.prototype.onSuccess = function(data)\n{\n  var model = this.model;\n\n  Neuro.debug( Neuro.Events.SAVE_REMOTE, this, model );\n\n  this.handleData( data );\n};\n\nNeuroSaveRemote.prototype.onFailure = function(data, status)\n{\n  var operation = this;\n  var db = this.db;\n  var model = this.model;\n\n  // A non-zero status means a real problem occurred\n  if ( status === 409 ) // 409 Conflict\n  {\n    Neuro.debug( Neuro.Events.SAVE_CONFLICT, this, data, model );\n\n    // Update the model with the data saved and returned\n    this.handleData( data, model, this.db );\n  }\n  else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n  {\n    Neuro.debug( Neuro.Events.SAVE_UPDATE_FAIL, this, model );\n\n    this.insertNext( NeuroRemoveNow );\n  }\n  else if ( status !== 0 ) \n  {          \n    Neuro.debug( Neuro.Events.SAVE_ERROR, this, model, status );\n  } \n  else \n  {\n    // Check the network status right now\n    Neuro.checkNetworkStatus();\n\n    // If not online for sure, try saving once online again\n    if (!Neuro.online) \n    {\n      model.$pendingSave = true;\n\n      Neuro.once('online', function() \n      {\n        if ( model.$pendingSave )\n        { \n          model.$pendingSave = false;\n          model.$addOperation( NeuroSaveRemote );\n\n          Neuro.debug( Neuro.Events.SAVE_RESUME, operation, model );\n        }\n      });\n    }\n\n    Neuro.debug( Neuro.Events.SAVE_OFFLINE, this, model );\n  }\n};\n\nNeuroSaveRemote.prototype.handleData = function(data)\n{\n  var db = this.db;\n  var model = this.model;\n  var saving = this.saving;\n\n  // Check deleted one more time before updating model.\n  if ( model.$deleted )\n  {\n    Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model, data );\n\n    return;\n  }\n\n  // If data was returned, place it in saving to update the model and publish\n  for (var prop in data)\n  {\n    if ( !(prop in saving ) )\n    {\n      saving[ prop ] = data[ prop ];\n    }\n  }\n\n  Neuro.debug( Neuro.Events.SAVE_VALUES, this, saving, model );\n\n  // If the model hasn't been saved before - create the record where the \n  // local and model point to the same object.\n  if ( !model.$saved )\n  {\n    if ( db.cache === false )\n    {\n      model.$saved = {};\n    }\n    else\n    {\n      model.$saved = model.$local.$saved = {}; \n    }\n  }\n  \n  // Update the model with the return data\n  db.putRemoteData( saving, this.key, model );\n\n  // Publish saved data to everyone else\n  Neuro.debug( Neuro.Events.SAVE_PUBLISH, this, saving, model );\n\n  db.live({\n    op: 'SAVE',\n    model: saving,\n    key: this.key\n  });\n};","function NeuroRelation()\n{\n\n}\n\nNeuro.STORE_NONE = 0;\nNeuro.STORE_MODEL = 1;\nNeuro.STORE_KEY = 2;\nNeuro.STORE_KEYS = 3;\n\nNeuro.SAVE_NONE = 0;\nNeuro.SAVE_MODEL = 4;\n\nNeuroRelation.prototype = \n{\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.store = options.store || Neuro.STORE_NONE;\n    this.save = options.save || Neuro.SAVE_NONE;\n    this.auto = !!options.auto;\n    this.property = !!options.property;\n\n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro( options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If serialize is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    \n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  preSave: function(model)\n  {\n\n  },\n\n  postSave: function(model)\n  {\n\n  },\n\n  preRemove: function(model)\n  {\n\n  },\n\n  postRemove: function(model)\n  {\n\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.SAVE_MODEL:\n        return related.$toJSON( true );\n\n      case Neuro.STORE_MODEL:\n        if ( related.$local ) \n        {\n          return related.$local;\n        } \n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.STORE_KEY:\n        return related.$key();\n\n      case Neuro.STORE_KEYS:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.BELONGSTO_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade !== false )\n        {\n          model.$remove();\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !this.hasForeignKey( model, relation.model ) && this.cascade !== false )\n        {\n          model.$remove();\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !this.hasForeignKey( model, related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  // same as HasOne\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  hasForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return propsMatch( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      model[ this.name ] = relation.model;\n    }\n  }\n\n});\n\nNeuro.RELATIONS[ 'belongsTo' ] = NeuroBelongsTo;","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\n// cascadeSave = when model is saved, save children?\n// cascadeRemove = when model is deleted, delete children?\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = options.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( options.comparator );\n    this.cascadeRemove = !!options.cascadeRemove;\n    this.cascadeSave = !!options.cascadeSave;\n\n    Neuro.debug( Neuro.Events.HASMANY_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelated( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      var source = relatedDatabase.models;\n        \n      relatedDatabase.ready( this.handleLazyLoad( relation, source ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.STORE_MODEL || this.save === Neuro.SAVE_MODEL )\n      {\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, source)\n  {\n    return function (relatedDatabase)\n    {\n      var map = source.filter( relation.isRelated );\n      var models = map.values;\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      target.put( key, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      target.remove( key );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      this.clearForeignKey( related );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    var foreign = this.foreign;\n\n    this.clearFields( related, foreign );\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  isRelated: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n\n    if ( !relation.delaySorting && !related.isSorted( this.comparator ) )\n    {\n      related.sort( this.comparator );\n    }\n  }\n\n});\n\nNeuro.RELATIONS[ 'hasMany' ] = NeuroHasMany;","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.HASONE_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearModel( relation, true );\n        this.clearForeignKey( model );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Events.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !this.hasForeignKey( model, relation.model ) )\n        {\n          this.clearModel( relation );\n          this.clearForeignKey( model );\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !this.hasForeignKey( model, related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !this.hasForeignKey( model, related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Events.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade !== false )\n      {\n        Neuro.debug( Neuro.Events.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, dontRemove)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.HASONE_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        relation.model.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.HASONE_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  hasForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return propsMatch( model, local, related, foreign );\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      model[ this.name ] = relation.model;\n    }\n  }\n\n});\n\nNeuro.RELATIONS[ 'hasOne' ] = NeuroHasOne;","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Events = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_PRESAVE: 68,       // NeuroModel, relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 71         // NeuroModel, relation, [NeuroModel]\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  return function (method, model, data, success, failure)\n  {\n    // success ( data )\n    // failure ( data, status )\n    \n    failure( {}, 0 );\n  };\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      // implement\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      // implement\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      // implement\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Events.ONLINE );\n  Neuro.trigger('online');\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Events.OFFLINE );\n  Neuro.trigger('offline');\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( 'online', Neuro.setOnline, false );\n    window.addEventListener( 'offline', Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}