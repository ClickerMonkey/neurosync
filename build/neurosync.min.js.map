{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","get.js","methods.js","query.js","ready.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","parse","expr","base","valid","parseInt","format","template","createFormatter","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","Online","Offline","checkNeuro","cached","callbackContext","all","boot","putRemoteData","instance","instantiate","$save","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","$refresh","fetchAll","onFinish","refresh","grabModel","methods","q","sync","ready","persistent","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","ignoredFields","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReadyRemove","onReady","invoked","hasData","saving","checkModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","updated","sort","revisionFunction","ar","br","resort","decoded","revisionRejected","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","preSave","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGets","SavedRemoteUpdate","Blocked","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","def","evaluatedValue","$get","$isDependentsSaved","callbackOnSaved","contextOnSaved","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","Cascade","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","Local","Rest","NoLive","NoRest","Remote","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","run","finish","previousValue","finishRemove","$saving","$publish","liveRemove","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","liveSave","handleData","saveNow","Store","Key","Keys","auto","discriminators","discriminatorToModel","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","loaded","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","delaySorting","delaySaving","checkSave","given","adding","addModel","removeModel","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","postSave","preRemove","handleLazyLoad","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note, \n * Arrays are considered objects.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a \n * string it is split based on the delimiter given. If the variable is an \n * array then it is returned. If the variable is any other type it may result \n * in an error.\n * \n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n * \n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom \n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n * \n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n * \n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n * \n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n * \n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid() \n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n  \n  expr.replace( parse.REGEX, function(prop) \n  {\n    if (!valid) \n    {\n      return;\n    }\n\n    if ( isArray( base ) ) \n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i)) \n      {\n        base = base[ i ];\n      }\n      else \n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) ) \n    {\n      if (prop in base) \n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      } \n      else \n      {\n        valid = false;\n      }\n    } \n    else \n    {\n      valid = false;\n    }\n  });\n  \n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the \n * constructor for creating instances of the Neuro object defined.\n * \n * @namespace \n * @param {Object} options\n *        The options of \n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };  \n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(onFinish)\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  preSave: function(model)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    return this.saveToModels( model );\n  },\n\n  // Save the model\n  save: function(model, cascade, existing)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( !existing )\n    {\n      db.models.put( key, model ); \n      db.updated();\n    }\n\n    return existing;\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\n/**\n * An instance\n * \n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaves:          'remote-save remote-save-failure',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoves:        'remote-remove remote-remove-failure',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGets:           'remote-get remote-get-failure',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, remoteData ); \n        }\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        dependent.$once( NeuroModel.Events.RemoteSaves, callbackOnSaved, contextOnSaved );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    var existing = this.$db.preSave( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade, existing );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$db.getKey( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function(models)\n  {\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function() \n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live(\n      {\n        op:   NeuroDatabase.Live.Remove,\n        key:  key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = \n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = \n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(query)\n    {\n      for (var i = 0; i < query.length; i++)\n      {\n        this.relate( model, query[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle, \n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n    \n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            this.executeQuery( model );\n          }\n          else\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  debugInit:        Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:  Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:    Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:      Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:    Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:   Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  debugInit:        Neuro.Debugs.HASONE_INIT,\n  debugClearModel:  Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:    Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:      Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:    Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:   Neuro.Debugs.HASONE_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove && this.cascadeRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var instance = db.instantiate();\n\n      instance.$save();\n\n      return instance;\n    }\n\n    var fields = grab( props, db.fields );\n    var instance = db.instantiate( fields );\n    var key = instance.$key();\n    var relations = {};\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    instance.$save( relations );\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(onFinish)\n  {\n    db.refresh( onFinish );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n  // 50\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);"],"sourceRoot":"/source/"}