{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroDiscriminatedModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminatedRelationCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","get.js","methods.js","query.js","ready.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","base","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroDiscriminatedModelCollection","discriminator","discriminatorsToModel","NeuroRelationCollection","relator","NeuroDiscriminatedRelationCollection","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","checkNeuro","cached","callbackContext","all","boot","input","putRemoteData","instance","instantiate","$save","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildKeyFromInput","buildObjectFromKey","$set","$refresh","fetchAll","onFinish","refresh","grabModel","methods","q","sync","ready","persistent","currentTime","currentDate","encode","decode","parse","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","ignoredFields","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReadyRemove","onReady","invoked","hasData","saving","checkModel","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","updated","sort","revisionFunction","ar","br","resort","decoded","revisionRejected","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","preSave","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGets","SavedRemoteUpdate","Blocked","$operation","$relations","$dependents","$reset","databaseRelations","$getRelation","def","evaluatedValue","$get","$isDependentsSaved","callbackOnSaved","contextOnSaved","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","Cascade","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","discriminatedValue","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","Local","Rest","NoLive","NoRest","Remote","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","run","finish","previousValue","finishRemove","$saving","$publish","liveRemove","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","liveSave","handleData","saveNow","Store","Key","Keys","auto","discriminators","discriminatorToModel","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","belongsTo","isRelatedFactory","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleLazyLoad","bulk","given","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","hasOne","dirty","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note, \n * Arrays are considered objects.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a \n * string it is split based on the delimiter given. If the variable is an \n * array then it is returned. If the variable is any other type it may result \n * in an error.\n * \n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n * \n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom \n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n * \n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n * \n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n * \n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n * \n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid() \n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the \n * constructor for creating instances of the Neuro object defined.\n * \n * @namespace \n * @param {Object} options\n *        The options of \n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      this.summarize = function(model)\n      {\n        return isValue( model ) ? model[ summarize ] : model;\n      };\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(onFinish)\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  preSave: function(model)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    return this.saveToModels( model );\n  },\n\n  // Save the model\n  save: function(model, cascade, existing)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( !existing )\n    {\n      db.models.put( key, model ); \n      db.updated();\n    }\n\n    return existing;\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\n/**\n * An instance\n * \n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaves:          'remote-save remote-save-failure',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoves:        'remote-remove remote-remove-failure',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGets:           'remote-get remote-get-failure',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        dependent.$once( NeuroModel.Events.RemoteSaves, callbackOnSaved, contextOnSaved );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    var existing = this.$db.preSave( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade, existing );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$db.getKey( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      var map = this.map;\n\n      map.reset();\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Reset, [this] );\n      this.resort();\n    }\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","function NeuroDiscriminatedModelCollection(discriminator, discriminatorsToModel, models, remoteData)\n{\n  this.discriminator = discriminator;\n  this.discriminatorsToModel = discriminatorsToModel;\n\n  this.init( null, models, remoteData );\n}\n\nextendArray( NeuroModelCollection, NeuroDiscriminatedModelCollection, \n{\n\n  buildKeyFromInput: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","\nfunction NeuroDiscriminatedRelationCollection(model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init();\n}\n\nextendArray( NeuroDiscriminatedModelCollection, NeuroDiscriminatedRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function(models)\n  {\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function() \n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live(\n      {\n        op:   NeuroDatabase.Live.Remove,\n        key:  key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = \n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = \n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.loaded = true;\n    \n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < related.length; i++)\n        {\n          this.addModel( relation, related[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n      related.resort( this.comparator );\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove && this.cascadeRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var related = this.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var related = this.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ]; \n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var instance = db.instantiate();\n\n      instance.$save();\n\n      return instance;\n    }\n\n    var fields = grab( props, db.fields );\n    var instance = db.instantiate( fields );\n    var key = instance.$key();\n    var relations = {};\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    instance.$save( relations );\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(onFinish)\n  {\n    db.refresh( onFinish );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n  // 50\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroDiscriminatedRelationCollection( model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroDiscriminatedModelCollection( this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n})(this);"],"sourceRoot":"/source/"}