{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","evaluate","copy","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","charAt","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","localeCompare","createComparator","eventize","target","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","max","slice","trigger","e","$on","$once","$after","$off","$trigger","Neuro","options","database","NeuroDatabase","model","Function","className","init","debug","Events","CREATION","cache","name","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","remoteOperations","afterOnline","rest","store","live","handlePublish","setComparator","setRevision","revision","relations","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveLocal","reset","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","get","checkNeuro","neuro","callbackContext","cached","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_PRESAVE","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","method","data","success","failure","put","key","record","remove","all","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","checkModel","result","parseModel","fromStorage","buildKeyFromInput","has","putRemoteData","removeKey","buildKey","fields","buildKeys","join","keySeparator","$key","buildKeyFromArray","ks","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","encoded","decoded","decode","revisionCompare","$saved","current","$toJSON","conflicts","conflicted","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","instantiate","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","loadRemote","refresh","onLocalError","autoRefresh","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","getModels","getModel","op","encode","rawData","save","UpdateAndSave","CreateAndSave","Removed","$pendingSave","Created","RemoteRemove","$init","$operation","$relations","$set","$reset","loadRelations","databaseRelations","$getRelation","def","defaults","defaultValue","evaluatedValue","set","value","$get","$relate","relate","$unrelate","unrelated","unrelate","load","$save","setProperties","setValue","$callRelationFunction","$remove","$exists","functionName","OperationType","operation","queue","execute","forSaving","$keys","$isSaved","$isSavedLocally","$isNew","$getChanges","saved","index","removeAt","lastValue","pop","lastKey","size","filter","dest","out","v","reverse","half","ceil","rebuildIndex","partition","left","right","pivot","map","floor","j","qsort","l","next","finished","run","finish","tryNext","insertNext","onSuccess","arguments","onFailure","previousValue","finishRemove","handleOnline","saving","handleData","Store","None","Key","Keys","field","auto","discriminator","discriminators","discriminated","setNeuro","loadDiscriminators","onInitialized","preSave","postSave","preRemove","postRemove","clearFields","targetFields","changes","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","related","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","isRelated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","relatedDatabase","loadAllReady","total","belongsTo","that","initial","loaded","onRemoved","cascade","onSaved","hasForeignKey","handleLoad","clearModel","setRelated","clearForeignKey","setModel","updateForeignKey","setProperty","foreign","hasMany","cascadeRemove","cascadeSave","HASMANY_INIT","pending","delaySorting","delaySaving","removeModel","checkSave","handleModelAdded","handleModel","handleLazyLoad","bulk","isModelArray","addModel","skipCheck","adding","alreadyRemoved","relatedKey","hasManyThrough","through","setThrough","throughs","hasOne","dirty","dontRemove","Relation","Operation"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return x !== undefined && x !== null;\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === void 0)\n  {\n    return x;\n  }\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n  if (isFunction(x) || typeof x !== 'object' || x === null)\n  {\n    return x;\n  }\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n  if (isRegExp(x))\n  {\n    return x;\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' || !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' || !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        return compare( b[ comparator ], a[ comparator ] );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        return compare( a[ comparator ], b[ comparator ] );\n      };\n    }\n  }\n\n  return null;\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          callback[0].apply( callback[1], args );  \n        }\n      }\n      \n      if ( clear )\n      {\n        if ( eventListeners.length !== max )\n        {\n          listeners[ event ] = eventListeners.slice( max );  \n        }\n        else\n        {\n          delete listeners[ event ];  \n        }\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/*\nnew Neuro({\n  name: 'name',\n  api: 'http://api/name',\n  pubsub: 'http://url:port',\n  channel: 'houseid',\n  token: 'userid',\n  key: 'id',\n  fields: ['id', 'name', 'updated_at'],\n//  encode: function() {},\n//  decode: function() {}\n});\n*/\n\nfunction Neuro(options)\n{\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + options.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Events.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( 'initialized', [model] );\n\n  return model;\n}\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro(neuro)\n      {\n        if ( neuro.name === name || neuro.className === name )\n        {\n          callback.call( callbackContext, neuro );\n\n          Neuro.off( 'initialized', checkNeuro );\n        }\n      }\n\n      Neuro.on( 'initialized', checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  transfer( options, this );\n\n  this.models = new NeuroMap();\n\n  this.initialized = false;\n  this.pendingRefresh = false;\n\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n\n  this.rest = Neuro.rest( this );\n  this.store = Neuro.store( this );\n  this.live = Neuro.live( this, this.handlePublish( this ) );\n\n  this.setComparator( this.comparator );\n  this.setRevision( this.revision );\n\n  this.relations = {};\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      this.relations[ name ] = relation;\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuroDatabase.prototype =\n{\n\n  //\n  toString: function(model) \n  {\n    return '';\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, true );\n\n      if ( result !== false )\n      {\n        callback.call( callbackContext, result );\n      }\n\n      return result;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n\n    if ( !isValue( input ) )\n    {\n      return db.remoteLoaded ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input, undefined, undefined, fromStorage );\n    }\n    else if ( db.remoteLoaded )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator || '/' );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    var ks = this.keySeparator || '/';\n    var key = '';\n\n    for (var i = 0; i < arr.length; i++)\n    {\n      if (i > 0)\n      {\n        key += ks;\n      }\n\n      key += arr[ i ];\n    }\n\n    return key;\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (a[ revision ] - b[ revision ]) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator)\n  {\n    this.comparatorFunction = createComparator( comparator );\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Events.SAVE_OLD_REVISION, db, model, encoded );\n\n        return;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( db.cache !== false )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      if ( db.cache !== false )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache !== false )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === false )\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote !== false && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === false )\n    {\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Events.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Events.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Events.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Events.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Events.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n    \n    db.rest( 'GET', undefined, undefined, onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n        var key = model.$key();\n\n        mapped[ key ] = model;\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Events.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Events.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Events.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Events.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Events.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Converts properties in data into their storable form\n  encode: function(data)\n  {\n    return data;\n  },\n\n  // Converts properties in rawData from their storable form to their desired\n  decode: function(rawData)\n  {\n    return rawData;\n  },\n\n  // Save the model\n  save: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    if ( db.cache === false )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal );\n    }\n  },\n\n  // Remove the model \n  remove: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    // TODO Add Debug here?\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    if ( db.cache === false )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value; \n      }\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue)\n  {\n    this.$set( setProperties, setValue );\n\n    this.$callRelationFunction( 'preSave' );\n\n    this.$db.save( this );\n\n    this.$callRelationFunction( 'postSave' );\n  },\n\n  $remove: function()\n  {\n    if ( this.$exists() )\n    {\n      this.$callRelationFunction( 'preRemove' );\n\n      this.$db.remove( this );\n\n      this.$callRelationFunction( 'postRemove' );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $callRelationFunction: function(functionName)\n  {\n    var databaseRelations = this.$db.relations;\n\n    for ( var name in databaseRelations )\n    {\n      databaseRelations[ name ][ functionName ]( this );\n    }\n  },\n\n  $addOperation: function(OperationType) \n  {\n    var operation = new OperationType( this );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function()\n  {\n    var saved = this.$saved;\n    var encoded = this.$toJSON( true );\n    var fields = this.$db.fields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model)\n  {\n    this.model = model;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model );\n    }\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroRemoveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Events.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL, model );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$pendingSave = false;\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( 'model-removed', [model] );\n      \n      db.updated();\n\n      model.$trigger('removed');\n    }\n\n    db.store.remove( key, this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest( 'DELETE', model, undefined, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_MISSING, this, key, model );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Events.REMOVE_ERROR, this, status, key, model );\n    } \n    else \n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Events.REMOVE_OFFLINE, this, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_REMOTE, this, key, model );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Events.REMOVE_PUBLISH, this, key, model );\n\n    db.live({\n      op: NeuroDatabase.Live.Remove,\n      key: key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_RESUME, this, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_LOCAL_DELETED, this, model );\n\n      return this.finish();\n    }\n\n    // Fill the key if need be\n    var key = model.$key();\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_LOCAL, this, model );\n\n    this.tryNext( NeuroSaveRemote );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_LOCAL_ERROR, this, model, e );\n\n    this.tryNext( NeuroSaveRemote );\n  }\n\n});\n","function NeuroSaveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n  }\n\n});","function NeuroSaveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var saving = this.saving = model.$getChanges( true );\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( saving ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    db.rest( model.$saved ? 'PUT' : 'POST', model, saving, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_REMOTE, this, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Events.SAVE_CONFLICT, this, data, model );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Events.SAVE_UPDATE_FAIL, this, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Events.SAVE_ERROR, this, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Events.SAVE_OFFLINE, this, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    for (var prop in data)\n    {\n      if ( !(prop in saving ) )\n      {\n        saving[ prop ] = data[ prop ];\n      }\n    }\n\n    Neuro.debug( Neuro.Events.SAVE_VALUES, this, saving, model );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( db.cache === false )\n      {\n        model.$saved = {};\n      }\n      else\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Events.SAVE_PUBLISH, this, saving, model );\n\n    db.live({\n      op: NeuroDatabase.Live.Save,\n      model: saving,\n      key: this.key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$pendingSave )\n    { \n      model.$pendingSave = false;\n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Events.SAVE_RESUME, this, model );\n    }\n  }\n\n});","function NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {\n\n};\n\nNeuro.Store = {\n  None: 0,\n  Model: 1,\n  Key: 2,\n  Keys: 3\n};\n\nNeuro.Save = {\n  None: 0,\n  Model: 4\n};\n\nNeuroRelation.prototype =\n{\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.store = options.store || Neuro.Store.None;\n    this.save = options.save || Neuro.Save.None;\n    this.auto = !!options.auto;\n    this.property = !!options.property;\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n\n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If serialize is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    \n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  preSave: function(model)\n  {\n\n  },\n\n  postSave: function(model)\n  {\n\n  },\n\n  preRemove: function(model)\n  {\n\n  },\n\n  postRemove: function(model)\n  {\n\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        } \n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.BELONGSTO_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade !== false )\n        {\n          model.$remove();\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !this.hasForeignKey( model, relation.model ) && this.cascade !== false )\n        {\n          model.$remove();\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !this.hasForeignKey( model, related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  // same as HasOne\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  hasForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return propsMatch( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = options.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( options.comparator );\n    this.cascadeRemove = !!options.cascadeRemove;\n    this.cascadeSave = !!options.cascadeSave;\n\n    Neuro.debug( Neuro.Events.HASMANY_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelated( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      target.put( key, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      target.remove( key );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      this.clearForeignKey( related );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    var foreign = this.foreign;\n\n    this.clearFields( related, foreign );\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  isRelated: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = options.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = options.local || ( database.name + '_' + database.key );\n\n    this.comparator = createComparator( options.comparator );\n    this.cascadeRemove = !!options.cascadeRemove;\n    this.cascadeSave = !!options.cascadeSave;\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Events.HASMANY_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n  },\n\n  // if initial is given, load related\n  // else, load through\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelated( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      var source = relatedDatabase.models;\n        \n      relatedDatabase.ready( this.handleLazyLoad( relation, source ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, source)\n  {\n    return function (relatedDatabase)\n    {\n      var map = source.filter( relation.isRelated );\n      var models = map.values;\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      target.put( key, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      target.remove( key );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      this.clearForeignKey( related );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    var foreign = this.foreign;\n\n    this.clearFields( related, foreign );\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  isRelated: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.HASONE_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelated( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearModel( relation, true );\n        this.clearForeignKey( model );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Events.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearModel( relation );\n          this.clearForeignKey( model );\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Events.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade !== false )\n      {\n        Neuro.debug( Neuro.Events.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, dontRemove)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.HASONE_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        relation.model.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.HASONE_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  isRelated: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Events = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_PRESAVE: 68,       // NeuroModel, relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72         // NeuroModel, relation, [NeuroModel]\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  return function (method, model, data, success, failure)\n  {\n    // success ( data )\n    // failure ( data, status )\n    \n    failure( {}, 0 );\n  };\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      // implement\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      // implement\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      // implement\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Events.ONLINE );\n  Neuro.trigger('online');\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Events.OFFLINE );\n  Neuro.trigger('offline');\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( 'online', Neuro.setOnline, false );\n    window.addEventListener( 'offline', Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}