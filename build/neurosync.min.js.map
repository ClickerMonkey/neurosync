{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroPage.js","NeuroModelCollection.js","NeuroDiscriminatedModelCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroDiscriminatedRelationCollection.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","NeuroRelationCollection.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","get.js","methods.js","query.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","func","F","extend","parent","child","override","transfer","factory","args","this","arguments","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyFunction","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","saveHaving","having","Havings","createHaving","eventize","secret","onListeners","$this","property","events","callback","context","on","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","base","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","NeuroPage","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","remoteData","NeuroDiscriminatedModelCollection","discriminator","discriminatorsToModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Pending","onSuccess","handleSuccess","onFailure","handleFailure","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroDiscriminatedRelationCollection","relator","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","NeuroRelationCollection","Online","Offline","checkNeuro","cached","callbackContext","all","boot","input","putRemoteData","instantiate","$save","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildKeyFromInput","instance","buildObjectFromKey","$set","$refresh","grabModel","methods","q","sync","currentTime","currentDate","encode","decode","parse","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","ignoredFields","addTimestampField","type","time","timestamps","timeAsDate","where","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","ready","persistent","onReadyRemove","onReady","invoked","hasData","saving","checkModel","result","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","sort","revisionFunction","ar","br","resort","decoded","revisionCompare","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","refresh","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","Blocked","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","first","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","start","end","modelKey","inputs","rebuild","callRemove","updateWhere","discriminatedValue","Success","Failure","Ready","setQuery","skipSync","clearPending","cancel","that","error","finished","interrupts","run","finish","tryNext","setNext","insertNext","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","changes","publish","clearLocal","markSynced","handleData","saveNow","publishing","Store","Key","Keys","auto","discriminators","discriminatorToModel","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","belongsTo","isRelatedFactory","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleLazyLoad","bulk","existing","given","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n}\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copyFunction(x)\n{\n  return function() {\n    return x.apply( this, arguments );\n  };\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    var $init = model.prototype.$init;\n\n    model.prototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      applyEventListeners( this, modelEvents );\n    };\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      \n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br );\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      this.summarize = function(model)\n      {\n        return isValue( model ) ? model[ summarize ] : model;\n      };\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, comparatorNullsFirst)\n  {\n    this.comparator = createComparator( comparator, comparatorNullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    var arr = [];\n    arr.push.apply( arr, this );\n    return arr;\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd = copyFunction( this.handleAdd );\n  this.onAdds = copyFunction( this.handleAdds );\n  this.onRemove = copyFunction( this.handleRemove );\n  this.onRemoves = copyFunction( this.handleRemoves );\n  this.onReset = copyFunction( this.handleReset );\n  this.onUpdates = copyFunction( this.handleUpdates );\n  this.onCleared = copyFunction( this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd, this );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds, this );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove, this );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves, this );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset, this );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates, this );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear, this );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = copyFunction( this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges, this );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    var out = [];\n    out.push.apply( out, this );\n    return out;\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      this.map.reset();\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          this.map.put( parsed.$key(), parsed );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Reset, [this] );\n      this.resort();\n    }\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = this.map.get( key );\n\n      if ( removing )\n      {\n        this.map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","function NeuroDiscriminatedModelCollection(discriminator, discriminatorsToModel, models, remoteData)\n{\n  this.discriminator = discriminator;\n  this.discriminatorsToModel = discriminatorsToModel;\n\n  this.init( null, models, remoteData );\n}\n\nextendArray( NeuroModelCollection, NeuroDiscriminatedModelCollection, \n{\n\n  buildKeyFromInput: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  }\n\n});","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd = copyFunction( this.handleModelAdded );\n  this.onModelRemoved = copyFunction( this.handleModelRemoved );\n  this.onModelUpdated = copyFunction( this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd, this );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved, this );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated, this );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    this.map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Pending;\n\n  this.onSuccess = this.handleSuccess();\n  this.onFailure = this.handleFailure();\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:  0,\n  Success:  1,\n  Failure:  2\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function()\n  {\n    var that = this;\n\n    return function(models)\n    {\n      that.status = NeuroRemoteQuery.Status.Success;\n      that.reset( models, true );\n      that.trigger( NeuroRemoteQuery.Events.Success, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  },\n\n  handleFailure: function()\n  {\n    var that = this;\n\n    return function(models, error)\n    {\n      that.status = NeuroRemoteQuery.Status.Failure;\n      that.trigger( NeuroRemoteQuery.Events.Failure, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  }\n\n});","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n\n    if ( db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","\nfunction NeuroDiscriminatedRelationCollection(model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init();\n}\n\nextendArray( NeuroDiscriminatedModelCollection, NeuroDiscriminatedRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var collection = this.createRelationCollection( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < related.length; i++)\n        {\n          this.addModel( relation, related[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n      related.resort( this.comparator );\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var collection = this.createRelationCollection( model );\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var related = this.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var related = this.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove();\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    q.sync();\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroDiscriminatedRelationCollection( model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroDiscriminatedModelCollection( this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n})(window);"],"sourceRoot":"/source/"}