{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","ClassNameReplacer","match","toUpperCase","charAt","toClassName","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","parsed","addDynamicProperty","modelPrototype","property","definition","get","set","Object","defineProperty","configurable","enumerable","$init","this","arguments","lastCalculatedValue","handleChange","current","$after","Events","Changes","eventize","secret","onListeners","$this","events","callback","context","on","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$off","$trigger","Neuro","cache","database","NeuroDatabase","model","Function","className","methods","dynamic","init","debug","Debugs","CREATION","all","getModels","create","Initialized","Defaults","key","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","remoteOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveCache","cascade","reset","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","checkNeuro","cached","callbackContext","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","keySeparator","loadRelations","loadRemote","autoRefresh","cachePending","fullSave","fullPublish","encode","data","decode","rawData","$key","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","fromStorage","checkModel","result","parseModel","hasRemote","buildKeyFromInput","has","putRemoteData","instantiate","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","decoded","revisionCompare","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","refresh","onLocalError","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","getModel","op","$save","relationName","Cascade","All","UpdateAndSave","CreateAndSave","Local","Removed","$pendingSave","Created","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$operation","$relations","$set","$reset","databaseRelations","$getRelation","def","evaluatedValue","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$callRelationFunction","$remove","$exists","functionName","OperationType","operation","queue","execute","forSaving","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","map","dest","out","v","filter","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","l","None","Rest","Remote","next","finished","canCascade","run","finish","tryNext","insertNext","onSuccess","onFailure","previousValue","finishRemove","handleOnline","changes","saving","publishing","handleData","Store","Key","Keys","auto","getDefaults","field","pendingLoads","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","handleLoad","preSave","postSave","preRemove","postRemove","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","total","belongsTo","that","isRelatedFactory","onKeyUpdate","handleKeyUpdate","initial","loaded","onRemoved","clearRelated","onSaved","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","handleModelAdded","handleLazyLoad","bulk","existing","given","removing","adding","addModel","skipCheck","alreadyRemoved","hasManyThrough","through","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","callSave","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","modelDatabase","keyIndex","keyProp","hasOne","dirty","cascde","dontRemove","Relation","Operation","Map"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction ClassNameReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toClassName(name)\n{\n  return name.replace( /(^.|_.)/g, ClassNameReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  model.all = function()\n  {\n    return database.getModels();\n  };\n\n  model.create = function( props )\n  {\n    return database.create( props );\n  };\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || toClassName( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toClassName( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                true,\n  cachePending:         false,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, fromStorage)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, fromStorage !== false );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      if ( fromStorage )\n      { \n        return db.putRemoteData( input, undefined, undefined, true ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (compare( a[ revision ], b[ revision ] )) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          // TODO\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      if ( db.cache )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( !db.cache )\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( !db.cache )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Create the model\n  create: function(props)\n  {\n    var db = this;\n\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n    var key = model.$key();\n    var cascade = isValue( cascade ) ? cascade : Neuro.Cascade.All;\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    // If we're not supposed to cascade this anywhere, stop!\n    if ( !cascade )\n    {\n      return;\n    }\n\n    // If we're not storing locally OR we're not cascading locally, jump directly to remote.\n    // TODO ensure cascade rest, otherwise call live.\n    if ( !db.cache || !(cascade & Neuro.Cascade.Local) )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote, cascade );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal, cascade );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n    var key = model.$key();\n    var cascade = isValue( cascade ) ? cascade : Neuro.Cascade.All;\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    // If we're not supposed to cascade this anywhere, stop!\n    if ( !cascade )\n    {\n      return;\n    }\n\n    // If we're not storing locally OR we're not cascading locally, jump directly to remote.\n    // TODO ensure cascade rest, otherwise call live.\n    if ( !db.cache || !(cascade & Neuro.Cascade.Local) )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote, cascade );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal, cascade );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ] );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    this.$trigger( NeuroModel.Events.Change, [props, value] );\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 && isNumber( cascade ) ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ? setProperties : Neuro.Cascade.All ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$callRelationFunction( 'preSave' );\n\n    this.$db.save( this, cascade );\n\n    this.$callRelationFunction( 'postSave' );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$callRelationFunction( 'preRemove' );\n\n      this.$db.remove( this, cascade );\n\n      this.$callRelationFunction( 'postRemove' );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $callRelationFunction: function(functionName)\n  {\n    var databaseRelations = this.$db.relations;\n\n    for ( var name in databaseRelations )\n    {\n      databaseRelations[ name ][ functionName ]( this );\n    }\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isValue( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(type)\n  {\n    return !!(this.cascade & type);\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveCache' ), NeuroRemoveCache,\n{\n\n  run: function(db, model)\n  {\n    model.$pendingSave = false;\n\n    if ( db.cache )\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Rest )  )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$deleted = true;\n    model.$pendingSave = false;\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      \n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    if ( db.cache )\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live({\n        op: NeuroDatabase.Live.Remove,\n        key: key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote, this.cascade );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Fill the key if need be\n    var key = model.$key();\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n\n      if ( model.$saved )\n      {\n        model.$local.$saved = model.$saved;\n      }\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      this.tryNext( NeuroSaveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      this.tryNext( NeuroSaveRemote, this.cascade );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cachePending && db.cache )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var encoded = this.encoded = model.$toJSON( true );\n    var changes = this.changes = model.$getChanges( encoded );\n    var saving = this.saving = db.fullSave ? encoded : changes;\n    var publishing = this.publishing = db.fullPublish ? encoded : changes;\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( changes ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    if ( model.$saved )\n    {\n      db.rest.update( model, saving, this.success(), this.failure() );\n    }\n    else\n    {\n      db.rest.create( model, saving, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n    var publishing = this.publishing;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    if ( !isEmpty( data ) )\n    {\n      transfer( data, saving );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( model.$local )\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n      else\n      {\n        model.$saved = {};\n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n      db.live({\n        op: NeuroDatabase.Live.Save,\n        model: publishing,\n        key: this.key\n      });\n    }\n\n    if ( db.cachePending && db.cache )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$pendingSave )\n    { \n      model.$pendingSave = false;\n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ] );\n    }\n\n    pending.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n    }\n    else\n    {\n      this.handleLoad( model );\n    }\n  },\n\n  handleLoad: function(model)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  preSave: function(model)\n  {\n\n  },\n\n  postSave: function(model)\n  {\n\n  },\n\n  preRemove: function(model)\n  {\n\n  },\n\n  postRemove: function(model)\n  {\n\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    Neuro.Cascade.All\n};\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var onKeyUpdate = this.handleKeyUpdate();\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onKeyUpdate: onKeyUpdate,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n\n      model.$off( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  handleKeyUpdate: function()\n  {\n    return function onKeyUpdate(model, related, modelFields, relatedFields)\n    {\n      if ( this.local === modelFields )\n      {\n        var relation = model.$relations[ this.name ];\n\n        if ( relation && related !== relation.model )\n        {\n          this.clearModel( relation );\n          this.setModel( relation, related );\n          this.setProperty( relation );\n        }        \n      }\n    };\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.All,\n  cascadeSave:          Neuro.Cascade.All\n};\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.All,\n  cascadeSave:          Neuro.Cascade.None\n};\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n  \n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var adding = this.finishAddModel( relation, related, skipCheck );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation ), this, false );\n  },\n\n  onAddThrough: function(relation)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, true );\n    };\n  },\n\n  addModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through ), this );\n  },\n\n  onAddModelFromThrough: function(relation, through)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through );\n        this.finishAddModel( relation, related );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, callSave)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callSave )\n      {\n        through.$save( this.cascadeSave );\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, skipCheck)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    Neuro.Cascade.None\n};\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation, true );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation, false, this.cascde );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation, dontRemove)\n  {\n    this.clearModel( relation, dontRemove );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, dontRemove, cascade)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        related.$remove( cascade );\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [], 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {}, 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {}, 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {}, 200 );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}