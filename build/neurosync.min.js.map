{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","find.js","get.js","grab.js","grabAll.js","methods.js","query.js","ready.js","refresh.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","keys","models","NeuroModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","init","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkNeuro","cached","Online","Offline","Cascade","None","Local","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","$save","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","find","firstWhere","grabModel","grabAll","ready","methods","q","sync","persistent","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","put","record","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","resort","clean","overwrite","decoded","revisionRejected","keyFields","mk","dk","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$remove","$exists","$cancel","$clone","f","cloneKey","relationName","clone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","finish","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","auto","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","pendingInitials","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","initials","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page","HasOne","BelongsTo","HasMany","HasManyThrough","HasRemote"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note, \n * Arrays are considered objects.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a \n * string it is split based on the delimiter given. If the variable is an \n * array then it is returned. If the variable is any other type it may result \n * in an error.\n * \n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n * \n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom \n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n * \n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n * \n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n * \n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n * \n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid() \n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n  \n  expr.replace( parse.REGEX, function(prop) \n  {\n    if (!valid) \n    {\n      return;\n    }\n\n    if ( isArray( base ) ) \n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i)) \n      {\n        base = base[ i ];\n      }\n      else \n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) ) \n    {\n      if (prop in base) \n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      } \n      else \n      {\n        valid = false;\n      }\n    } \n    else \n    {\n      valid = false;\n    }\n  });\n  \n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n      \n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the\n * constructor for creating instances of the Neuro object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  if ( Neuro.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Neuro.unloaded.push( database );\n  }\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.autoload = false;\n\nNeuro.unloaded = [];\n\nNeuro.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Neuro.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Neuro.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n\nNeuro.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nNeuro.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuro.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new NeuroModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };  \n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n    \n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw 'Model keys cannot be changed.';\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n      \n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n    \n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === NeuroModel.Status.RemovePending )\n      {\n        Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( NeuroRemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== NeuroModel.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n      \n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( Neuro.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );      \n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n  \n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Neuro.debug( Neuro.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated(); \n    }\n\n    Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model ); \n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\n/**\n * An instance\n *\n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked =\n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    if ( this.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, this.$db, this );\n\n      return false;\n    }\n\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    this.$db.addReference( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].clone( this, values, properties[ relationName ] );\n      }\n    }\n\n    return db.instantiate( values );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );\n","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function(models)\n  {\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype =\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetOffline, [model] );\n    }\n    else\n    {  \n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n    }\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n        \n        model.$trigger( NeuroModel.Events.RemoteRemoveOffline, [model] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n\n        model.$trigger( NeuroModel.Events.RemoteSaveOffline, [model] );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.pendingInitials = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var initials = this.pendingInitials;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], initials[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    initials.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, initialValue, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingInitials.push( initialValue );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, initialValue, remoteData );\n    }\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  clone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};\n","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle, \n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n    \n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n      \n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );        \n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n      \n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );        \n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );      \n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  clone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  clone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  clone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( NeuroModel.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Relationships */\n  global.Neuro.HasOne = NeuroHasOne;\n  global.Neuro.BelongsTo = NeuroBelongsTo;\n  global.Neuro.HasMany = NeuroHasMany;\n  global.Neuro.HasManyThrough = NeuroHasManyThrough;\n  global.Neuro.HasRemote = NeuroHasRemote;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n\n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}