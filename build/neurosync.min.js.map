{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","find.js","get.js","grab.js","grabAll.js","methods.js","query.js","ready.js","refresh.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","collapse","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","keys","models","NeuroModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","store","live","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","init","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkNeuro","cached","Online","Offline","Cascade","None","Local","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","$save","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","find","firstWhere","grabModel","grabAll","ready","methods","q","sync","persistent","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","type","time","timestamps","timestampsAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","put","record","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","resort","clean","overwrite","decoded","revisionRejected","keyFields","mk","dk","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$remove","$exists","$cancel","$clone","f","cloneKey","relationName","clone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","finish","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","auto","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","pendingInitials","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","initials","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page","HasOne","BelongsTo","HasMany","HasManyThrough","HasRemote"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n      \n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the\n * constructor for creating instances of the Neuro object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  if ( Neuro.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Neuro.unloaded.push( database );\n  }\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.autoload = false;\n\nNeuro.unloaded = [];\n\nNeuro.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Neuro.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Neuro.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n\nNeuro.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nNeuro.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuro.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, NeuroDatabase.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, NeuroDatabase.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","\n\nfunction NeuroDatabase(options)\n{\n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new NeuroModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events =\n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw 'Model keys cannot be changed.';\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === NeuroModel.Status.RemovePending )\n      {\n        Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( NeuroRemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== NeuroModel.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( Neuro.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(models)\n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(models, status)\n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Neuro.debug( Neuro.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    if ( this.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, this.$db, this );\n\n      return false;\n    }\n\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    this.$db.addReference( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].clone( this, values, properties[ relationName ] );\n      }\n    }\n\n    return db.instantiate( values );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );\n","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection,\n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );\n","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery,\n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  parse: function(models)\n  {\n    return models;\n  },\n\n  handleSuccess: function()\n  {\n    var models = this.parse.apply( this, arguments );\n\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n  }\n\n});\n","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype =\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetOffline, [model] );\n    }\n    else\n    {  \n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n    }\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n        \n        model.$trigger( NeuroModel.Events.RemoteRemoveOffline, [model] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n\n        model.$trigger( NeuroModel.Events.RemoteSaveOffline, [model] );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.pendingInitials = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var initials = this.pendingInitials;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], initials[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    initials.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, initialValue, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingInitials.push( initialValue );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, initialValue, remoteData );\n    }\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  clone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};\n","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle, \n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n    \n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n      \n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );        \n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n      \n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );        \n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );      \n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  clone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  clone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  clone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || NeuroDatabase.Defaults.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db );\n\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( NeuroModel.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, NeuroDatabase.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    transfer( methods, model.prototype );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || NeuroDatabase.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || NeuroDatabase.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Relationships */\n  global.Neuro.HasOne = NeuroHasOne;\n  global.Neuro.BelongsTo = NeuroBelongsTo;\n  global.Neuro.HasMany = NeuroHasMany;\n  global.Neuro.HasManyThrough = NeuroHasManyThrough;\n  global.Neuro.HasRemote = NeuroHasRemote;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n\n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n\n  global.Neuro.transfer = transfer;\n  global.Neuro.collapse = collapse;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}