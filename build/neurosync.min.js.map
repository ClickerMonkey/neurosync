{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","charAt","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","eventize","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","Neuro","database","NeuroDatabase","model","Function","className","init","debug","Debugs","CREATION","all","getModels","create","inst","$save","cache","name","Events","Initialized","Defaults","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","remoteOperations","afterOnline","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","relations","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveCache","reset","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","get","checkNeuro","cached","callbackContext","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","put","key","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","keySeparator","fields","loadRelations","loadRemote","autoRefresh","cachePending","fullSave","fullPublish","encode","data","decode","rawData","$key","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","fromStorage","checkModel","result","parseModel","hasRemote","buildKeyFromInput","has","putRemoteData","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","decoded","revisionCompare","$saved","current","$toJSON","conflicts","conflicted","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","instantiate","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","refresh","onLocalError","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","getModel","op","save","UpdateAndSave","CreateAndSave","Removed","$pendingSave","Created","RemoteRemove","$init","$operation","$relations","$set","$reset","databaseRelations","$getRelation","def","evaluatedValue","set","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$callRelationFunction","$remove","$exists","functionName","OperationType","operation","queue","execute","forSaving","$keys","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","index","removeAt","lastValue","pop","lastKey","size","filter","dest","out","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","map","floor","j","qsort","l","next","finished","run","finish","tryNext","insertNext","onSuccess","arguments","onFailure","previousValue","finishRemove","handleOnline","changes","saving","publishing","handleData","Store","None","Key","Keys","auto","getDefaults","field","pendingLoads","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","handleLoad","preSave","postSave","preRemove","postRemove","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","relatedDatabase","loadAllReady","total","belongsTo","that","initial","loaded","onRemoved","cascade","onSaved","hasForeignKey","handleModel","clearModel","setRelated","clearForeignKey","setModel","updateForeignKey","setProperty","foreign","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","isRelatedFactory","delaySorting","delaySaving","removeModel","checkSave","handleModelAdded","handleLazyLoad","bulk","isModelArray","addModel","existing","skipCheck","adding","alreadyRemoved","relatedKey","hasManyThrough","through","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","callSave","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","removing","modelDatabase","keyIndex","keyProp","hasOne","dirty","dontRemove","Relation","Operation","Map"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === undefined)\n  {\n    return x;\n  }\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n  if (isFunction(x) || typeof x !== 'object' || x === null)\n  {\n    return x;\n  }\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n  if (isRegExp(x))\n  {\n    return x;\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' || !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' || !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n\n  return null;\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + options.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  model.all = function()\n  {\n    return database.getModels();\n  };\n\n  model.create = function(props)\n  {\n    var inst = new model( props );\n    inst.$save();\n    return inst;\n  };\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || this.name;\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Relations\n  this.relations = {};\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      this.relations[ name ] = relation;\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined, // required\n  className:            null, // defaults to name\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               undefined, // required\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                true,\n  cachePending:         true,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, fromStorage)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, fromStorage !== false );\n\n      if ( result !== false )\n      {\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input, undefined, undefined, fromStorage );\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (a[ revision ] - b[ revision ]) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( db.cache )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      if ( db.cache )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( !db.cache )\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( !db.cache )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n        var key = model.$key();\n\n        mapped[ key ] = model;\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Save the model\n  save: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    if ( !db.cache )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal );\n    }\n  },\n\n  // Remove the model \n  remove: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    if ( !db.cache )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ] );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value; \n      }\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue)\n  {\n    this.$set( setProperties, setValue );\n\n    this.$callRelationFunction( 'preSave' );\n\n    this.$db.save( this );\n\n    this.$callRelationFunction( 'postSave' );\n  },\n\n  $remove: function()\n  {\n    if ( this.$exists() )\n    {\n      this.$callRelationFunction( 'preRemove' );\n\n      this.$db.remove( this );\n\n      this.$callRelationFunction( 'postRemove' );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $callRelationFunction: function(functionName)\n  {\n    var databaseRelations = this.$db.relations;\n\n    for ( var name in databaseRelations )\n    {\n      databaseRelations[ name ][ functionName ]( this );\n    }\n  },\n\n  $addOperation: function(OperationType) \n  {\n    var operation = new OperationType( this );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.fields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model)\n  {\n    this.model = model;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model );\n    }\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroRemoveCache(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveCache' ), NeuroRemoveCache,\n{\n\n  run: function(db, model)\n  {\n    model.$pendingSave = false;\n\n    db.store.remove( model.$key(), this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$pendingSave = false;\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( 'model-removed', [model] );\n      \n      db.updated();\n\n      model.$trigger('removed');\n    }\n\n    db.store.remove( key, this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    } \n    else \n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live({\n      op: NeuroDatabase.Live.Remove,\n      key: key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Fill the key if need be\n    var key = model.$key();\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    this.tryNext( NeuroSaveRemote );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    this.tryNext( NeuroSaveRemote );\n  }\n\n});\n","function NeuroSaveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cachePending && db.cache )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroSaveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var encoded = this.encoded = model.$toJSON( true );\n    var changes = this.changes = model.$getChanges( encoded );\n    var saving = this.saving = db.fullSave ? encoded : changes;\n    var publishing = this.publishing = db.fullPublish ? encoded : changes;\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( changes ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    if ( model.$saved )\n    {\n      db.rest.update( model, saving, this.success(), this.failure() );\n    }\n    else\n    {\n      db.rest.create( model, saving, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n    var publishing = this.publishing;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    for (var prop in data)\n    {\n      if ( !(prop in saving ) )\n      {\n        saving[ prop ] = data[ prop ];\n      }\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( !db.cache )\n      {\n        model.$saved = {};\n      }\n      else\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live({\n      op: NeuroDatabase.Live.Save,\n      model: publishing,\n      key: this.key\n    });\n\n    if ( db.cachePending && db.cache )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$pendingSave )\n    { \n      model.$pendingSave = false;\n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None: 0,\n  Model: 1,\n  Key: 2,\n  Keys: 3\n};\n\nNeuro.Save = {\n  None: 0,\n  Model: 4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ] );\n    }\n\n    pending.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n    }\n    else\n    {\n      this.handleLoad( model );\n    }\n  },\n\n  handleLoad: function(model)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  preSave: function(model)\n  {\n\n  },\n\n  postSave: function(model)\n  {\n\n  },\n\n  preRemove: function(model)\n  {\n\n  },\n\n  postRemove: function(model)\n  {\n\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        } \n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null\n};\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade !== false )\n        {\n          model.$remove();\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !this.hasForeignKey( model, relation.model ) && this.cascade !== false )\n        {\n          model.$remove();\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( model, relation ), this );      \n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !this.hasForeignKey( model, related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  hasForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return propsMatch( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  // TODO set\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          false\n};\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through)\n    {\n      if ( relation.isRelated( through ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var adding = this.finishAddModel( relation, related, skipCheck );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation ), this, false );\n  },\n\n  onAddThrough: function(relation)\n  {\n    var throughs = relation.throughs;\n\n    return function(through)\n    {\n      this.finishAddThrough( relation, through, true );\n    };\n  },\n\n  addModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through ), this );\n  },\n\n  onAddModelFromThrough: function(relation, through)\n  {\n    return function(related)\n    {\n      this.finishAddThrough( relation, through );\n      this.finishAddModel( relation, related );\n    };\n  },\n\n  finishAddThrough: function(relation, through, callSave)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( 'removed', relation.onThroughRemoved );\n\n      if ( callSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, skipCheck)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( 'removed', relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null\n}\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearModel( relation, true );\n        this.clearForeignKey( model );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearModel( relation );\n          this.clearForeignKey( model );\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( model, relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade !== false )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, dontRemove)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        relation.model.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      failure( [], 0 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      failure( {}, 0 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      failure( {}, 0 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      failure( {}, 0 );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      // implement\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      // implement\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      // implement\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}