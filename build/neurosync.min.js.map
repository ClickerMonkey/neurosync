{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroDiscriminatedModelCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroDiscriminatedRelationCollection.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","NeuroRelationCollection.js","all.js","boot.js","collect.js","create.js","fetch.js","get.js","methods.js","query.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","func","F","extend","parent","child","override","transfer","factory","args","this","arguments","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyFunction","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","saveHaving","having","Havings","createHaving","eventize","secret","onListeners","$this","property","events","callback","context","on","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","base","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroDiscriminatedModelCollection","discriminator","discriminatorsToModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Pending","onSuccess","handleSuccess","onFailure","handleFailure","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroDiscriminatedRelationCollection","relator","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","NeuroRelationCollection","Online","Offline","checkNeuro","cached","callbackContext","all","boot","input","putRemoteData","instantiate","$save","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","fetch","buildKeyFromInput","instance","buildObjectFromKey","$set","$refresh","grabModel","methods","q","sync","currentTime","currentDate","encode","decode","parse","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","addTimestampField","type","time","timestamps","timeAsDate","where","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","ready","persistent","onReadyRemove","onReady","invoked","checkModel","result","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","sort","revisionFunction","ar","br","resort","decoded","revisionCompare","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","refresh","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","Blocked","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","filtered","add","collection","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","first","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","discriminatedValue","Success","Failure","Ready","setQuery","skipSync","clearPending","cancel","that","error","next","finished","interrupts","run","finish","tryNext","setNext","insertNext","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","changes","saving","publish","clearLocal","markSynced","handleData","saveNow","publishing","Store","Key","Keys","auto","discriminators","discriminatorToModel","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","belongsTo","isRelatedFactory","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleLazyLoad","bulk","existing","given","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n}\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copyFunction(x)\n{\n  return function() {\n    return x.apply( this, arguments );\n  };\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    var $init = model.prototype.$init;\n\n    model.prototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      applyEventListeners( this, modelEvents );\n    };\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      \n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br );\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      this.summarize = function(model)\n      {\n        return isValue( model ) ? model[ summarize ] : model;\n      };\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes reset'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, comparatorNullsFirst)\n  {\n    this.comparator = createComparator( comparator, comparatorNullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n\n\n\n\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    var arr = [];\n    arr.push.apply( arr, this );\n    return arr;\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd = copyFunction( this.handleAdd );\n  this.onAdds = copyFunction( this.handleAdds );\n  this.onRemove = copyFunction( this.handleRemove );\n  this.onRemoves = copyFunction( this.handleRemoves );\n  this.onReset = copyFunction( this.handleReset );\n  this.onUpdates = copyFunction( this.handleUpdates );\n  this.onCleared = copyFunction( this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd, this );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds, this );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove, this );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves, this );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset, this );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates, this );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear, this );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      this.map.reset();\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          this.map.put( parsed.$key(), parsed );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Reset, [this] );\n      this.resort();\n    }\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = this.map.get( key );\n\n      if ( removing )\n      {\n        this.map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","function NeuroDiscriminatedModelCollection(discriminator, discriminatorsToModel, models, remoteData)\n{\n  this.discriminator = discriminator;\n  this.discriminatorsToModel = discriminatorsToModel;\n\n  this.init( null, models, remoteData );\n}\n\nextendArray( NeuroModelCollection, NeuroDiscriminatedModelCollection, \n{\n\n  buildKeyFromInput: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  }\n\n});","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd = copyFunction( this.handleModelAdded );\n  this.onModelRemoved = copyFunction( this.handleModelRemoved );\n  this.onModelUpdated = copyFunction( this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd, this );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved, this );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated, this );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    this.map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Pending;\n\n  this.onSuccess = this.handleSuccess();\n  this.onFailure = this.handleFailure();\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:  0,\n  Success:  1,\n  Failure:  2\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function()\n  {\n    var that = this;\n\n    return function(models)\n    {\n      that.status = NeuroRemoteQuery.Status.Success;\n      that.reset( models, true );\n      that.trigger( NeuroRemoteQuery.Events.Success, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  },\n\n  handleFailure: function()\n  {\n    var that = this;\n\n    return function(models, error)\n    {\n      that.status = NeuroRemoteQuery.Status.Failure;\n      that.trigger( NeuroRemoteQuery.Events.Failure, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  }\n\n});","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( isEmpty( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live(\n    {\n      op:     NeuroDatabase.Live.Save,\n      model:  model.$publish,\n      key:    model.$key()\n    });\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","\nfunction NeuroDiscriminatedRelationCollection(model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init();\n}\n\nextendArray( NeuroDiscriminatedModelCollection, NeuroDiscriminatedRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var collection = this.createRelationCollection( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < related.length; i++)\n        {\n          this.addModel( relation, related[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n      related.resort( this.comparator );\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var collection = this.createRelationCollection( model );\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var related = this.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var related = this.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove();\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    q.sync();\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroDiscriminatedRelationCollection( model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroDiscriminatedModelCollection( this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n})(window);"],"sourceRoot":"/source/"}