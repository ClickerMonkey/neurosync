{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","ClassNameReplacer","match","toUpperCase","charAt","toClassName","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","parsed","eventize","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","Neuro","cache","database","NeuroDatabase","model","Function","className","methods","init","debug","Debugs","CREATION","all","getModels","create","Events","Initialized","Defaults","key","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","remoteOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveCache","reset","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","get","checkNeuro","cached","callbackContext","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","keySeparator","loadRelations","loadRemote","autoRefresh","cachePending","fullSave","fullPublish","encode","data","decode","rawData","$key","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","fromStorage","checkModel","result","parseModel","hasRemote","buildKeyFromInput","has","putRemoteData","instantiate","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","decoded","revisionCompare","$saved","current","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","refresh","onLocalError","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","getModel","op","$save","relationName","UpdateAndSave","CreateAndSave","Removed","$pendingSave","Created","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$init","$operation","$relations","$set","$reset","databaseRelations","$getRelation","def","evaluatedValue","set","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$callRelationFunction","$remove","$exists","functionName","OperationType","operation","queue","execute","forSaving","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","map","dest","out","v","filter","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","l","next","finished","run","finish","tryNext","insertNext","onSuccess","arguments","onFailure","previousValue","finishRemove","handleOnline","changes","saving","publishing","handleData","Store","None","Key","Keys","auto","getDefaults","field","pendingLoads","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","handleLoad","preSave","postSave","preRemove","postRemove","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","total","belongsTo","cascade","that","isRelatedFactory","onKeyUpdate","handleKeyUpdate","initial","loaded","onRemoved","clearRelated","onSaved","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","handleModelAdded","handleLazyLoad","bulk","existing","given","removing","adding","addModel","skipCheck","alreadyRemoved","hasManyThrough","through","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","callSave","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","modelDatabase","keyIndex","keyProp","hasOne","dirty","dontRemove","Relation","Operation","Map"],"mappings":"CAAA,SAAAA,EAAAC,GCAA,QAAAC,GAAAC,GAEA,MAAAA,KAAAF,EAGA,QAAAG,GAAAD,GAEA,SAAAA,GAAAA,EAAAE,aAAAF,EAAAG,MAAAH,EAAAI,OAGA,QAAAC,GAAAL,GAEA,MAAAC,GAAAD,IAAAA,EAAAM,oBAAAC,GAGA,QAAAC,GAAAR,GAEA,SAAAA,GAAAA,EAAAS,OAAAT,EAAAU,UAGA,QAAAC,GAAAX,GAEA,MAAA,gBAAAA,GAGA,QAAAY,GAAAZ,GAEA,MAAA,gBAAAA,KAAAa,MAAAb,GAGA,QAAAc,GAAAd,GAEA,MAAA,iBAAAA,GAGA,QAAAe,GAAAf,GAEA,MAAAA,aAAAgB,MAGA,QAAAC,GAAAjB,GAEA,MAAAA,aAAAkB,QAGA,QAAAC,GAAAnB,GAEA,MAAAA,aAAAoB,OAGA,QAAAC,GAAArB,GAEA,MAAA,QAAAA,GAAA,gBAAAA,GAGA,QAAAsB,GAAAtB,EAAAuB,GAEA,MAAAvB,aAAAoB,OAAApB,EAAAA,EAAAuB,MAAAA,GAQA,QAAAC,GAAAxB,GAEA,QAAAA,IAAAF,GAAA,OAAAE,GAGA,QAAAyB,GAAAC,EAAA1B,EAAA2B,GAIA,IAAA,GAFAC,GAAAD,GAAAE,EAEAC,EAAA,EAAAC,EAAAL,EAAAM,OAAAD,EAAAD,EAAAA,IAEA,GAAAF,EAAAF,EAAAI,GAAA9B,GAEA,MAAA8B,EAIA,QAAA,EAGA,QAAAG,KAEA,OAAA,OAAA,EAAAC,KAAAC,UAAA,GAAAC,SAAA,IAAAC,UAAA,GAGA,QAAAC,KAEA,MAAAL,KAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,IAGA,QAAAM,GAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAhC,EAAA8B,GAEA,MAAAD,GAAAC,KAAAC,EAAAC,EAIA,KAAA,GAAAb,GAAA,EAAAA,EAAAW,EAAAT,OAAAF,IACA,CACA,GAAAc,GAAAH,EAAAX,GACAe,EAAAF,EAAAb,EAEA,KAAAgB,EAAAN,EAAAI,GAAAF,EAAAG,IAEA,OAAA,EAIA,OAAA,EAMA,QAAAE,GAAAC,EAAAC,EAAAC,GAEAC,EAAAD,EAAAD,EAAA3C,UAAA0C,GAGA,QAAAG,GAAAC,EAAAC,GAEA,IAAA,GAAAC,KAAAF,GAEAC,EAAAC,GAAAF,EAAAE,EAGA,OAAAD,GAGA,QAAAE,GAAAC,EAAA1B,EAAA2B,GAEA,GAAAC,GAAAF,EAAA1B,EACA0B,GAAA1B,GAAA0B,EAAAC,GACAD,EAAAC,GAAAC,EAGA,QAAAC,GAAAC,EAAAC,EAAAC,GAEA,IAAA,GAAAR,KAAAQ,GACA,CACA,GAAAC,GAAAD,EAAAR,GACAU,EAAAH,EAAAP,EAEA,KAAAU,GAAAD,IAAAjE,EAEA,KAAAwD,GAAA,uBAEA9B,GAAAwC,GAEAJ,EAAAN,GAAAU,EAIAJ,EAAAN,GAAAW,EAAAF,GAIAH,EAAAC,QAAAA,EAGA,QAAAK,GAAAC,GAEA,MAAA,KAAAA,EAAAnC,OAAAmC,EAAAC,cAAAD,EAAAE,OAAA,GAAAD,cAGA,QAAAE,GAAAC,GAEA,MAAAA,GAAAC,QAAA,WAAAN,GAGA,QAAAO,GAAAzE,GAEA,MAAAwB,GAAAxB,GAKAQ,EAAAR,GAEA,GAAAA,GAAAS,MAEAJ,EAAAL,GAEA,GAAAA,GAEAC,EAAAD,GAEAA,IAGAiE,EAAAjE,GAhBAA,EAmBA,QAAA0E,GAAAC,EAAAC,EAAAC,GAIA,IAAA,GAFAC,MAEAhD,EAAA,EAAAA,EAAA8C,EAAA5C,OAAAF,IACA,CACA,GAAAiD,GAAAH,EAAA9C,EAEAiD,KAAAJ,KAEAG,EAAAC,GAAAF,EAAAZ,EAAAU,EAAAI,IAAAJ,EAAAI,IAIA,MAAAD,GAGA,QAAAE,GAAAL,EAAAC,EAAAC,GAEA,GAAAlE,EAAAiE,GACA,CACA,GAAAK,GAAAN,EAAAC,EAEA,OAAAC,GAAAZ,EAAAgB,GAAAA,EAMA,IAAA,GAFAC,MAEApD,EAAA,EAAAA,EAAA8C,EAAA5C,OAAAF,IACA,CACA,GAAAiD,GAAAH,EAAA9C,GACAmD,EAAAN,EAAAI,EAEAG,GAAAC,KAAAN,EAAAZ,EAAAgB,GAAAA,GAGA,MAAAC,GAIA,QAAAE,GAAApF,GAEA,IAAA,GAAAsD,KAAAtD,GAEA,MAAAsD,EAAAe,OAAA,UAEArE,GAAAsD,EAIA,OAAAtD,GAGA,QAAAiE,GAAAjE,EAAAqF,GAEA,GAAA,OAAArF,GAAAA,IAAAF,GAAA,gBAAAE,IAAAC,EAAAD,IAAAiB,EAAAjB,GAEA,MAAAA,EAGA,IAAAmB,EAAAnB,GACA,CAGA,IAAA,GAFAsF,MAEAxD,EAAA,EAAAA,EAAA9B,EAAAgC,OAAAF,IAEAwD,EAAAH,KAAAlB,EAAAjE,EAAA8B,IAGA,OAAAwD,GAGA,GAAAvE,EAAAf,GAEA,MAAA,IAAAgB,MAAAhB,EAAAuF,UAGA,IAAAD,KAEA,KAAA,GAAAhC,KAAAtD,IAEAqF,GAAA,MAAA/B,EAAAe,OAAA,MAEAiB,EAAAhC,GAAAW,EAAAjE,EAAAsD,IAIA,OAAAgC,GAGA,QAAAE,GAAAC,EAAAC,EAAAd,EAAAjD,GAIA,IAAA,GAFAgE,MAEA7D,EAAA,EAAAA,EAAA8C,EAAA5C,OAAAF,IACA,CACA,GAAAiD,GAAAH,EAAA9C,EAEAH,GAAA8D,EAAAV,GAAAW,EAAAX,MAEAY,EAAAZ,GAAAd,EAAAwB,EAAAV,KAIA,MAAAY,GAGA,QAAAC,GAAA5F,GAEA,GAAAmB,EAAAnB,IAAAW,EAAAX,GAEA,MAAAA,GAAAgC,MAEA,IAAAX,EAAArB,GACA,CACA,GAAA6F,GAAA,CAEA,KAAA,GAAAvC,KAAAtD,GAEA6F,GAGA,OAAAA,GAGA,MAAA,GAGA,QAAAC,GAAA9F,GAEA,GAAA,OAAAA,GAAA,SAAAA,GAAA,IAAAA,EAEA,OAAA,CAEA,IAAAmB,EAAAnB,IAAAW,EAAAX,GAEA,MAAA,KAAAA,EAAAgC,MAEA,IAAAjB,EAAAf,GAEA,MAAA,KAAAA,EAAAuF,WAAA1E,MAAAb,EAAAuF,UAEA,IAAAlE,EAAArB,GACA,CACA,IAAA,GAAAsD,KAAAtD,GAEA,OAAA,CAEA,QAAA,EAGA,OAAA,EAGA,QAAA6B,GAAA2B,EAAAuC,GAEA,MAAAvC,KAAAuC,EAGA,QAAAjD,GAAAU,EAAAuC,GAEA,GAAAvC,IAAAuC,EAAA,OAAA,CACA,IAAA,OAAAvC,GAAA,OAAAuC,EAAA,OAAA,CACA,IAAAvC,IAAAA,GAAAuC,IAAAA,EAAA,OAAA,CAEA,IAAAC,SAAAxC,GACAyC,QAAAF,EACA,IAAAC,IAAAC,EAAA,OAAA,CAEA,IAAAC,GAAA/E,EAAAqC,GACA2C,EAAAhF,EAAA4E,EACA,IAAAG,IAAAC,EAAA,OAAA,CAEA,IAAAD,EAAA,CACA,GAAA1C,EAAAxB,SAAA+D,EAAA/D,OAAA,OAAA,CACA,KAAA,GAAAF,GAAA,EAAAA,EAAA0B,EAAAxB,OAAAF,IACA,IAAAgB,EAAAU,EAAA1B,GAAAiE,EAAAjE,IACA,OAAA,CAGA,QAAA,EAGA,GAAAf,EAAAyC,GACA,MAAAzC,GAAAgF,IAAAjD,EAAAU,EAAA+B,UAAAQ,EAAAR,UAEA,IAAAtE,EAAAuC,GACA,MAAAvC,GAAA8E,IAAAvC,EAAApB,aAAA2D,EAAA3D,UAGA,IAAA,WAAA4D,EAAA,CACA,IAAA,GAAAjB,KAAAvB,GACA,KAAA,MAAAuB,EAAAV,OAAA,IAAApE,EAAAuD,EAAAuB,KACAA,IAAAgB,IAAAjD,EAAAU,EAAAuB,GAAAgB,EAAAhB,KACA,OAAA,CAIA,KAAA,GAAAA,KAAAgB,GACA,KAAA,MAAAhB,EAAAV,OAAA,IAAApE,EAAA8F,EAAAhB,KACAA,IAAAvB,IACA,OAAA,CAIA,QAAA,EAGA,OAAA,EAGA,QAAA4C,GAAA5C,EAAAuC,GAEA,MAAAvC,KAAAuC,EAAA,EAAAA,EAAAvC,EAAA,GAAA,EAGA,QAAA6C,GAAA7C,EAAAuC,EAAAO,GAEA,GAAA9C,GAAAuC,EAEA,MAAA,EAGA,IAAAQ,GAAA/E,EAAAgC,GACAgD,EAAAhF,EAAAuE,EAEA,OAAAQ,KAAAC,EAEAD,IAAAD,GAAAE,GAAAF,EAAA,GAAA,GAGAvF,EAAAyC,KAEAA,EAAAA,EAAA+B,WAEAxE,EAAAgF,KAEAA,EAAAA,EAAAR,WAEA3E,EAAA4C,IAAA5C,EAAAmF,GAEAK,EAAA5C,EAAAuC,GAEA5E,EAAAqC,IAAArC,EAAA4E,GAEAK,EAAA5C,EAAAxB,OAAA+D,EAAA/D,QAEAlB,EAAA0C,IAAA1C,EAAAiF,GAEAvC,EAAA,GAAA,GAGAA,EAAA,IAAAiD,cAAAV,EAAA,KAGA,QAAAW,GAAA/E,EAAA2E,GAEA,GAAArG,EAAA0B,GAEA,MAAAA,EAEA,IAAAhB,EAAAgB,GAEA,MAAA,MAAAA,EAAA0C,OAAA,IAEA1C,EAAAA,EAAAU,UAAA,GAEA,SAAAmB,EAAAuC,GAEA,GAAAQ,GAAA/E,EAAAgC,GAAAA,EAAA7B,GAAA6B,EACAgD,EAAAhF,EAAAuE,GAAAA,EAAApE,GAAAoE,CAEA,OAAAM,GAAAG,EAAAD,GAAAD,KAKA,SAAA9C,EAAAuC,GAEA,GAAAQ,GAAA/E,EAAAgC,GAAAA,EAAA7B,GAAA6B,EACAgD,EAAAhF,EAAAuE,GAAAA,EAAApE,GAAAoE,CAEA,OAAAM,GAAAE,EAAAC,EAAAF,GAIA,IAAAnF,EAAAQ,GACA,CAGA,IAAA,GAFAgF,MAEA7E,EAAA,EAAAA,EAAAH,EAAAK,OAAAF,IAEA6E,EAAA7E,GAAA4E,EAAA/E,EAAAG,GAAAwE,EAGA,OAAA,UAAA9C,EAAAuC,GAIA,IAAA,GAFAJ,GAAA,EAEA7D,EAAA,EAAAA,EAAA6E,EAAA3E,QAAA,IAAA2D,EAAA7D,IAEA6D,EAAAgB,EAAA7E,GAAA0B,EAAAuC,EAGA,OAAAJ,IAIA,MAAA,MCneA,QAAAiB,GAAAhD,EAAAiD,GAgBA,QAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAlH,EAAAiH,GAAA,CAKA,GAAAD,GAAA3F,EAAA2F,EAAA,IAEAlH,GAAAgH,EAAAC,MAEAD,EAAAC,MAGA,KAAA,GAAAlF,GAAA,EAAAA,EAAAmF,EAAAjF,OAAAF,IAEA/B,EAAAgH,EAAAC,GAAAC,EAAAnF,OAEAiF,EAAAC,GAAAC,EAAAnF,QAGAiF,EAAAC,GAAAC,EAAAnF,IAAAqD,MAAA+B,EAAAC,GAAAJ,EAAA,KAeA,QAAAK,GAAAH,EAAAC,EAAAC,GAIA,MAFAL,GAAAO,KAAA,OAAAJ,EAAAC,EAAAC,GAEAE,KAcA,QAAAC,GAAAL,EAAAC,EAAAC,GAIA,MAFAL,GAAAO,KAAA,SAAAJ,EAAAC,EAAAC,GAEAE,KAGA,QAAAE,GAAAN,EAAAC,EAAAC,GAIA,MAFAL,GAAAO,KAAA,UAAAJ,EAAAC,EAAAC,GAEAE,KAIA,QAAAG,GAAAC,EAAAC,EAAAR,GAEA,GAAAO,GAAAC,IAAAD,GAIA,IAAA,GAFAE,GAAAF,EAAAC,GAEAjE,EAAAkE,EAAA3F,OAAA,EAAAyB,GAAA,EAAAA,IAEAkE,EAAAlE,GAAAmE,KAAAV,GAEAS,EAAAE,OAAApE,EAAA,GAOA,QAAAqE,GAAAnD,EAAArB,GAEAqB,GAAArB,IAAAqB,UAEAA,GAAArB,GAoBA,QAAAyE,GAAAd,EAAAC,GAGA,GAAAnH,EAAAkH,GAOA,CACA,GAAAA,GAAA3F,EAAA2F,EAAA,IAGA,IAAAhH,EAAAiH,GAYA,IAAA,GAAApF,GAAA,EAAAA,EAAAmF,EAAAjF,OAAAF,IAEA0F,EAAAH,KAAAW,KAAAf,EAAAnF,GAAAoF,GACAM,EAAAH,KAAAY,OAAAhB,EAAAnF,GAAAoF,GACAM,EAAAH,KAAAa,QAAAjB,EAAAnF,GAAAoF,OAdA,KAAA,GAAApF,GAAA,EAAAA,EAAAmF,EAAAjF,OAAAF,IAEAgG,EAAAT,KAAAW,KAAAf,EAAAnF,IACAgG,EAAAT,KAAAY,OAAAhB,EAAAnF,IACAgG,EAAAT,KAAAa,QAAAjB,EAAAnF,QAfAgG,GAAAT,KAAA,QACAS,EAAAT,KAAA,UACAS,EAAAT,KAAA,UA4BA,OAAAA,MAIA,QAAAc,GAAAV,EAAAC,EAAAU,EAAAC,GAEA,GAAAZ,GAAAC,IAAAD,GACA,CAIA,IAAA,GAHAE,GAAAF,EAAAC,GACAY,IAAAC,EAEAzG,EAAA,EAAAA,EAAA6F,EAAA3F,OAAAF,IACA,CACA,GAAAoF,GAAAS,EAAA7F,EAEAoF,IAEAA,EAAAsB,KAAAF,IAEApB,EAAAsB,GAAAF,EACApB,EAAAU,GAAAxH,MAAA8G,EAAAuB,GAAAL,GAEAlB,IAAAS,EAAA7F,KAEAA,EAAA,KAMAuG,SAEAZ,GAAAC,IAcA,QAAAgB,GAAAzB,EAAAmB,GAIA,IAAA,GAFAnB,GAAA3F,EAAA2F,EAAA,KAEAnF,EAAA,EAAAA,EAAAmF,EAAAjF,OAAAF,IACA,CACA,GAAA6G,GAAA1B,EAAAnF,EAEAqG,GAAAd,KAAAW,KAAAW,EAAAP,GAAA,GACAD,EAAAd,KAAAY,OAAAU,EAAAP,GAAA,GACAD,EAAAd,KAAAa,QAAAS,EAAAP,GAAA,GAGA,MAAAf,MAzNA,GAAAO,GAAA,EACAa,EAAA,EACAD,EAAA,EAEAD,EAAA,CAwNA1B,IAEAjD,EAAAgF,IAAAxB,EACAxD,EAAAiF,MAAAvB,EACA1D,EAAAkF,OAAAvB,EACA3D,EAAAmF,KAAAhB,EACAnE,EAAAoF,SAAAN,IAIA9E,EAAAwD,GAAAA,EACAxD,EAAA0D,KAAAA,EACA1D,EAAA2D,MAAAA,EACA3D,EAAAmE,IAAAA,EACAnE,EAAA8E,QAAAA,GCrQA,QAAAO,GAAApF,GAEA,GAAAA,EAAAU,OAAA0E,GAAAC,MAEA,MAAAD,GAAAC,MAAArF,EAAAU,KAGA,IAAA4E,GAAA,GAAAC,GAAAvF,GAEAwF,EAAA,GAAAC,UAAA,mBAAAH,EAAAI,UAAA,oDAgCA,OA9BAF,GAAA/I,UAAA,GAAAC,GAAA4I,GAEA9H,EAAAwC,EAAA2F,UAEArG,EAAAU,EAAA2F,QAAAH,EAAA/I,WAGA6I,EAAAE,MAAAA,EACAF,EAAAM,OAEAR,EAAAS,MAAAT,EAAAU,OAAAC,SAAAT,EAAAtF,GAEAwF,EAAA3I,SAAAyI,EACAE,EAAA5I,MAAA4I,EAEAA,EAAAQ,IAAA,WAEA,MAAAV,GAAAW,aAGAT,EAAAU,OAAA,SAAAnF,GAEA,MAAAuE,GAAAY,OAAAnF,IAGAqE,EAAAC,MAAArF,EAAAU,MAAA8E,EACAJ,EAAAC,MAAArF,EAAA0F,WAAAF,EAEAJ,EAAAP,QAAAO,EAAAe,OAAAC,aAAAZ,IAEAA,ECxCA,QAAAD,GAAAvF,GAEA,GAAAC,GAAAsF,EAAAc,QAGAvG,GAAA0D,KAAAxD,EAAAC,EAGA,KAAA,GAAAR,KAAAO,GAEAP,IAAAQ,KAEAuD,KAAA/D,GAAAO,EAAAP,GAKA,IAAA6G,GAAA9C,KAAA8C,IACAC,EAAA/C,KAAA+C,MACA,IAAAjJ,EAAAgJ,GAEA,IAAA,GAAArI,GAAAqI,EAAAnI,OAAA,EAAAF,GAAA,EAAAA,IAEAL,EAAA2I,EAAAD,EAAArI,OAAA,GAEAsI,EAAAC,QAAAF,EAAArI,QAMAL,GAAA2I,EAAAD,MAAA,GAEAC,EAAAC,QAAAF,EAKA9C,MAAAiD,OAAA,GAAAC,GACAlD,KAAAkC,UAAAlC,KAAAkC,WAAAjF,EAAA+C,KAAA9C,MACA8C,KAAAmD,aAAA,EACAnD,KAAAoD,gBAAA,EACApD,KAAAqD,aAAA,EACArD,KAAAsD,cAAA,EACAtD,KAAAuD,iBAAA,EACAvD,KAAAwD,aAAA,EACAxD,KAAAyD,WAAA7G,EAAAmG,GAGA/C,KAAA0D,KAAA9B,EAAA8B,KAAA1D,MACAA,KAAA2D,MAAA/B,EAAA+B,MAAA3D,MACAA,KAAA4D,KAAAhC,EAAAgC,KAAA5D,KAAAA,KAAA6D,cAAA7D,OAGAA,KAAA8D,cAAA9D,KAAA1F,WAAA0F,KAAA+D,sBACA/D,KAAAgE,YAAAhE,KAAAiE,UACAjE,KAAAkE,YAAAlE,KAAAjF,UAGAiF,KAAAmE,aACAnE,KAAAoE,gBAEA,KAAA,GAAAC,KAAA7H,GAEA,GAAA6H,IAAAzC,GAAA0C,UAAA,CAKA,GAAAC,GAAA3C,EAAA0C,UAAAD,EAEA,IAAAE,EAAAtL,oBAAAuL,GAAA,CAKA,GAAAC,GAAAjI,EAAA6H,EAEA,KAAA,GAAAnH,KAAAuH,GACA,CACA,GAAAC,GAAAD,EAAAvH,GACAyH,EAAA,GAAAJ,EAEAI,GAAAvC,KAAApC,KAAA9C,EAAAwH,GAEAC,EAAAC,MAEA5E,KAAAyD,WAAA3F,KAAAZ,GAGA8C,KAAAmE,UAAAjH,GAAAyH,EACA3E,KAAAoE,cAAAtG,KAAAZ,MC5FA,QAAAhE,GAAA2L,GAEA7E,KAAA8E,IAAAD,ECMA,QAAA3B,KAMAlD,KAAA+E,UAMA/E,KAAAgF,QAMAhF,KAAAiF,WC1BA,QAAAC,GAAAC,EAAAC,GAEApF,KAAAmF,WAAAA,EACAnF,KAAAoF,KAAAA,ECJA,QAAAC,GAAArD,GAEAhC,KAAAsF,MAAAtD,GCFA,QAAAuD,GAAAvD,GAEAhC,KAAAsF,MAAAtD,GCFA,QAAAwD,GAAAxD,GAEAhC,KAAAsF,MAAAtD,GCFA,QAAAyD,GAAAzD,GAEAhC,KAAAsF,MAAAtD,GCFA,QAAA0D,GAAA1D,GAEAhC,KAAAsF,MAAAtD,GCFA,QAAA2D,GAAA3D,GAEAhC,KAAAsF,MAAAtD,GCFA,QAAA4D,GAAA5D,GAEAhC,KAAAsF,MAAAtD,GCDA,QAAAwC,MCDA,QAAAqB,KAEA7F,KAAAoF,KAAA,YCFA,QAAAU,KAEA9F,KAAAoF,KAAA,UCFA,QAAAW,MAEA/F,KAAAoF,KAAA,iBCFA,QAAAY,MAEAhG,KAAAoF,KAAA,ShB2CAxD,EAAAe,QAEAC,YAAA,cACAqD,OAAA,SACAC,QAAA,WAGAtE,EAAAC,SAEAD,EAAAuE,IAAA,SAAAjJ,EAAA2C,EAAAC,GAaA,QAAAsG,KAEA,GAAAC,GAAAzE,EAAAC,MAAA3E,EAEAmJ,KAEAxG,EAAA/G,KAAAwN,EAAAD,GAEAzE,EAAAlB,IAAAkB,EAAAe,OAAAC,YAAAwD,IAnBA,GAAAC,GAAAzE,EAAAC,MAAA3E,GACAoJ,EAAAxG,GAAAtH,CA0BA,OAxBAI,GAAAiH,KAEAwG,EAEAxG,EAAA/G,KAAAwN,EAAAD,GAgBAzE,EAAA7B,GAAA6B,EAAAe,OAAAC,YAAAwD,IAIAC,GAGA9G,EAAAqC,GiBrFAA,EAAAS,MAAA,SAAAhC,EAAAkG,KAKA3E,EAAAU,QAEAC,SAAA,EAEAiE,KAAA,EACAC,aAAA,GAEAC,cAAA,EACAC,cAAA,EACAC,cAAA,EACAC,YAAA,EACAC,oBAAA,EACAC,kBAAA,EACAC,mBAAA,EACAC,mBAAA,GAEAC,WAAA,EACAC,oBAAA,GACAC,kBAAA,GACAC,iBAAA,GAEAC,cAAA,GACAC,gBAAA,GAEAC,YAAA,GACAC,aAAA,GACAC,cAAA,GACAC,iBAAA,GACAC,WAAA,GACAC,aAAA,GACAC,YAAA,GACAC,YAAA,GACAC,aAAA,GAEAC,kBAAA,GAEAC,WAAA,GACAC,iBAAA,GACAC,mBAAA,GACAC,mBAAA,GAEAC,oBAAA,GACAC,oBAAA,GAEAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,cAAA,GACAC,cAAA,GACAC,mBAAA,GAEAN,aAAA,GACAO,mBAAA,GACAC,qBAAA,GACAC,kBAAA,GACAC,qBAAA,GAEAC,sBAAA,GAEAC,OAAA,GACAC,QAAA,GAEAC,eAAA,GAEAC,YAAA,GACAC,oBAAA,GACAC,kBAAA,GACAC,sBAAA,GACAC,eAAA,GACAC,mBAAA,GACAC,iBAAA,GACAC,eAAA,GACAC,kBAAA,GACAC,iBAAA,GACAC,kBAAA,GACAC,cAAA,GAEAC,eAAA,GACAC,uBAAA,GACAC,qBAAA,GACAC,yBAAA,GACAC,kBAAA,GACAC,sBAAA,GACAC,oBAAA,GACAC,qBAAA,GACAC,oBAAA,GACAC,qBAAA,GACAC,iBAAA,GAEAC,aAAA,GACAC,qBAAA,GACAC,mBAAA,GACAC,gBAAA,GACAC,uBAAA,GACAC,eAAA,GACAC,aAAA,GACAC,YAAA,GACAC,kBAAA,GACAC,wBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,iBAAA,GAEAC,iBAAA,GACAC,yBAAA,GACAC,uBAAA,GACAC,8BAAA,GACAC,oBAAA,GACAC,2BAAA,GACAC,mBAAA,GACAC,iBAAA,GACAC,gBAAA,GACAC,sBAAA,GACAC,4BAAA,GACAC,sBAAA,GACAC,sBAAA,IACAC,sBAAA,IACAC,qBAAA,IACAC,qBAAA,IACAC,wBAAA,IC7HAjL,EAAA8B,KAAA,SAAA5B,GAGA,OAIAU,IAAA,SAAAsK,EAAAC,GAEAD,KAAA,MAKApK,OAAA,SAAAV,EAAAgL,EAAAF,EAAAC,GAEAD,KAAA,MAKAG,OAAA,SAAAjL,EAAAgL,EAAAF,EAAAC,GAEAD,KAAA,MAKAI,OAAA,SAAAlL,EAAA8K,EAAAC,GAEAD,KAAA,QCxBAlL,EAAA+B,MAAA,SAAA7B,GAEA,OAkBAqL,IAAA,SAAArK,EAAAsK,EAAAN,EAAAC,GAEAD,EAAAhK,EAAAsK,IAiBAF,OAAA,SAAApK,EAAAgK,EAAAC,GAEAD,EAAAhK,EAAAsK,SAYA5K,IAAA,SAAAsK,EAAAC,GAEAD,YCjDAlL,EAAAgC,KAAA,SAAA9B,EAAAuL,GAEA,MAAA,UAAAC,MCfA1L,EAAA2L,OAAAC,OAAAC,UAAAC,UAAA,EAEA9L,EAAA+L,cAAA,EAGA/L,EAAAgM,UAAA,WAEAhM,EAAA2L,QAAA,EACA3L,EAAAS,MAAAT,EAAAU,OAAA+G,QACAzH,EAAAP,QAAAO,EAAAe,OAAAsD,SAIArE,EAAAiM,WAAA,WAEAjM,EAAA2L,QAAA,EACA3L,EAAAS,MAAAT,EAAAU,OAAAgH,SACA1H,EAAAP,QAAAO,EAAAe,OAAAuD,UAKAtE,EAAAkM,sBAAA,WAEAN,OAAAO,kBAEAP,OAAAO,iBAAAnM,EAAAe,OAAAsD,OAAArE,EAAAgM,WAAA,GACAJ,OAAAO,iBAAAnM,EAAAe,OAAAuD,QAAAtE,EAAAiM,YAAA,KAIAG,SAAAC,KAAAC,SAAAtM,EAAAgM,UACAI,SAAAC,KAAAE,UAAAvM,EAAAiM,aAKAjM,EAAAwM,mBAAA,WAEA,GAAAb,GAAAC,OAAAC,UAAAC,MAEA9L,GAAA+L,eAEAJ,GAAA,GAGAA,KAAA,GAAA3L,EAAA2L,UAAA,EAEA3L,EAAAgM,YAGAL,KAAA,GAAA3L,EAAA2L,UAAA,GAEA3L,EAAAiM,cpB2CA9L,EAAAY,QAEA0L,OAAA,UACAC,WAAA,cACAC,UAAA,aACAC,QAAA,UACAC,WAAA,cACAC,aAAA,gBACAC,aAAA,gBACAC,MAAA,kCAGA7M,EAAA8M,MAEAC,KAAA,OACAC,OAAA,UAGAhN,EAAAc,UAEA3F,KAAAzE,EACAyJ,UAAA,KACAY,IAAA,KACAkM,aAAA,IACAjM,UACAtG,YACAnC,WAAA,KACAyJ,qBAAA,KACAE,SAAA,KACAgL,eAAA,EACAC,YAAA,EACAC,aAAA,EACAtN,OAAA,EACAuN,cAAA,EACAC,UAAA,EACAC,aAAA,EACAC,OAAA,SAAAC,GAAA,MAAAA,IACAC,OAAA,SAAAC,GAAA,MAAAA,IACA3U,SAAA,SAAAiH,GAAA,MAAAA,GAAA2N,SAGA5N,EAAA9I,WAIA2W,MAAA,SAAA/P,EAAAC,EAAA+P,GAaA,QAAAC,KAEAjL,EAAAnE,IAAAqB,EAAAY,OAAAiM,MAAAmB,GAGA,QAAAA,KAEAF,GAEAC,MAEAE,GAAAH,KAEAhQ,EAAA/G,KAAAwN,EAAAzB,MAAA,GAEAiL,IAEAE,GAAA,GA5BA,GAAAnL,GAAA7E,KACAsG,EAAAxG,GAAA+E,EACAmL,GAAA,CAiCA,OA/BAnL,GAAA1B,aAEAtD,EAAA/G,KAAAwN,EAAAzB,GACAmL,GAAA,GAyBAnL,EAAA9E,GAAAgC,EAAAY,OAAAiM,MAAAmB,GAGAC,GAIAC,UAAA,SAAAC,EAAArQ,EAAAC,EAAAqQ,GAMA,QAAAC,KAEA,GAAAC,GAAAxL,EAAAyL,WAAAJ,EAAAC,KAAA,EAQA,OANAE,MAAA,GAAA5S,IAEAA,GAAA,EACAoC,EAAA/G,KAAAwN,EAAA+J,IAGA,OAAAA,GAAA,GAAA,EAdA,GAAAxL,GAAA7E,KACAsG,EAAAxG,GAAA+E,EACApH,GAAA,CAeA2S,MAEAvL,EAAA+K,MAAAQ,EAAAvL,GAAA,IAiBAyL,WAAA,SAAAJ,EAAAC,GAEA,GAAAtL,GAAA7E,KACAuQ,EAAA1L,EAAAvB,eAAAuB,EAAAqK,UAEA,KAAA/U,EAAA+V,GAEA,MAAAK,GAAA,MAAA,CAGApX,GAAA+W,GAEAA,EAAA,GAAAA,GAAA9W,MAEAJ,EAAAkX,KAEAA,EAAA,GAAAA,GAGA,IAAApN,GAAA+B,EAAA2L,kBAAAN,EAEA,OAAAA,aAAArL,GAAA7C,OAEA6C,EAAA5B,OAAAwN,IAAA3N,IAGA+B,EAAA5B,OAAAkK,IAAArK,EAAAoN,GAGAA,GAEArL,EAAA5B,OAAAwN,IAAA3N,GAEA+B,EAAA5B,OAAAkD,IAAArD,GAEA9I,EAAAkW,GAEAC,EAEAtL,EAAA6L,cAAAR,EAAAzX,EAAAA,GAAA,GAIAoM,EAAA8L,YAAA9L,EAAA4K,OAAAS,IAGAK,EAEA,MAGA,GAIAK,UAAA,SAAA5O,GAEA,GAAA5F,GAAA4D,KAAA8C,GAEA,IAAAhJ,EAAAsC,GAEA,IAAA,GAAA3B,GAAA,EAAAA,EAAA2B,EAAAzB,OAAAF,UAEAuH,GAAA5F,EAAA3B,eAKAuH,GAAA5F,IAKAyU,SAAA,SAAA7O,EAAAe,GAEA,GAAAD,GAAA9C,KAAA8Q,UAAA9O,EAAAe,EAOA,OALAjJ,GAAAgJ,KAEAA,EAAAA,EAAAiO,KAAA/Q,KAAAgP,eAGAlM,GAIAgO,UAAA,SAAA9O,EAAAe,GAEA,GAAAD,GAAA,IAEA,IAAAhJ,EAAAiJ,GACA,CACAD,IAEA,KAAA,GAAArI,GAAA,EAAAA,EAAAsI,EAAApI,OAAAF,IAEAqI,EAAAhF,KAAAkE,EAAAe,EAAAtI,SAKAqI,GAAAd,EAAAe,GAEAD,IAEAA,EAAAd,EAAAe,GAAA9H,IAIA,OAAA6H,IAIA0N,kBAAA,SAAAN,GAEA,MAAAA,aAAAlQ,MAAAgC,MAEAkO,EAAAP,OAEA7V,EAAAoW,GAEAlQ,KAAAgR,kBAAAd,GAEAlW,EAAAkW,GAEAlQ,KAAA6Q,SAAAX,EAAAlQ,KAAA8C,KAGAoN,GAIAc,kBAAA,SAAA3W,GAEA,MAAAA,GAAA0W,KAAA/Q,KAAAgP,eAIAiC,OAAA,SAAAjP,GAEA,MAAAhC,MAAA6Q,SAAA7O,EAAAhC,KAAA8C,MAIAoO,QAAA,SAAAlP,GAEA,MAAAhC,MAAA8Q,UAAA9O,EAAAhC,KAAA8C,MAIAqO,UAAA,SAAAnP,EAAAe,EAAAqO,GAEA,GAAAtX,EAAAiJ,GACA,CACA,IAAA,GAAAtI,GAAA,EAAAA,EAAAsI,EAAApI,OAAAF,IAEA,IAAA2W,EAAApP,EAAAe,EAAAtI,KAEA,OAAA,CAIA,QAAA,EAIA,MAAA2W,GAAApP,EAAAe,KAKAsO,QAAA,WAEArR,KAAAsR,OACAtR,KAAAqB,QAAAU,EAAAY,OAAA6L,UAMAxK,YAAA,SAAAC,GAEArL,EAAAqL,GAEAjE,KAAAuR,iBAAAtN,EAEA3K,EAAA2K,GAEAjE,KAAAuR,iBAAA,SAAApV,EAAAuC,GAEA,MAAAuF,KAAA9H,IAAA8H,IAAAvF,GAAAM,EAAA7C,EAAA8H,GAAAvF,EAAAuF,KAAA,GAKAjE,KAAAuR,iBAAA,SAAApV,EAAAuC,GAEA,OAAA,IAOAoF,cAAA,SAAAxJ,EAAA2E,GAEAe,KAAAwR,mBAAAnS,EAAA/E,EAAA2E,IAGAiF,YAAA,SAAAnJ,GAEAnC,EAAAmC,GAEAiF,KAAAjF,SAAAA,EAEAzB,EAAAyB,GAEAiF,KAAAjF,SAAA,SAAAiH,GAEA,MAAA7H,GAAA6H,GAAAA,EAAAjH,GAAAiH,GAKAhC,KAAAjF,SAAA,SAAAiH,GAEA,MAAAA,GAAA2N,SAMA2B,KAAA,WAEAtR,KAAAyR,YAEAzR,KAAAiD,OAAAqO,KAAAtR,KAAAwR,qBAKAC,SAAA,WAEA,MAAAzR,MAAAiD,OAAAwO,SAAAzR,KAAAwR,qBAKAd,cAAA,SAAA1D,EAAAlK,EAAAd,EAAAmO,GAEA,GAAAtL,GAAA7E,KACA8C,EAAAA,GAAA+B,EAAAoM,OAAAjE,GACAhL,EAAAA,GAAA6C,EAAA5B,OAAAkD,IAAArD,GACA4O,EAAA7M,EAAA4K,OAAA7S,EAAAoQ,GAEA,IAAAhL,EACA,CACA,GAAA2P,GAAA3R,KAAAuR,iBAAAvP,EAAAgL,EAEA,IAAA2E,KAAA,GAAAA,EAAA,EAIA,MAFA/P,GAAAS,MAAAT,EAAAU,OAAA2F,kBAAApD,EAAA7C,EAAAgL,GAEAhL,EAIA,GAAAA,GAAAA,EAAA4P,OACA,CACA,GAAAC,GAAA7P,EAAA8P,SAAA,GACAC,KACAC,GAAA,EACAX,KACAY,EAAAxT,EAAAuD,EAAA4P,QACAzN,EAAAU,EAAAV,SAEA,KAAA,GAAAlI,KAAA+Q,GAEA,GAAA,MAAA/Q,EAAAe,OAAA,MAKAf,IAAAkI,IAAA,CAMA,GAAA+N,GAAAL,EAAA5V,GACAkW,EAAAnQ,EAAA4P,OAAA3V,EAEAgW,IAAAxW,EAAAyW,EAAAC,IAEAnQ,EAAA/F,GAAAyV,EAAAzV,GACAoV,EAAApV,GAAA+Q,EAAA/Q,GAEA4I,EAAAhD,QAEAG,EAAAoQ,OAAAnW,GAAA+Q,EAAA/Q,MAKA8V,EAAA9V,GAAA+Q,EAAA/Q,GACA+V,GAAA,GAGAhQ,EAAA4P,OAAA3V,GAAAW,EAAAoQ,EAAA/Q,IAGA+V,EAEAhQ,EAAAL,SAAAzI,EAAAyJ,OAAA0P,eAAArF,EAAA+E,IAIA/P,EAAAL,SAAAzI,EAAAyJ,OAAA2P,YAAAtF,EAAAqE,IAGArP,EAAAL,SAAAzI,EAAAyJ,OAAA4P,cAAAvF,IAEAnI,EAAAhD,OAEAG,EAAAwQ,cAAA7M,OAKA3D,GAAA6C,EAAA8L,YAAAe,EAAAvB,GAEAtL,EAAAhD,OAEAG,EAAAoQ,OAAApF,EACAhL,EAAA4P,OAAA5P,EAAAoQ,OAAAR,OAAAhV,EAAAoQ,GAEAhL,EAAAwQ,cAAA7M,IAIA3D,EAAA4P,OAAA7T,EAAAiP,EAeA,OAXAnI,GAAA5B,OAAAwN,IAAA3N,KAEA+B,EAAA5B,OAAAkK,IAAArK,EAAAd,GACA6C,EAAAxD,QAAAU,EAAAY,OAAA8L,YAAAzM,IAEAmO,GAEAnO,EAAAL,SAAAzI,EAAAyJ,OAAA8P,QAIAzQ,GAGA0Q,0BAAA,SAAA1Q,EAAAc,GAEA,GAAA+B,GAAA7E,IAEA,OAAAgC,GAEAA,EAAA2Q,qBAEA3Q,GAAA4P,OAEA/M,EAAA+L,UAAA5O,GAEAA,EAAAL,SAAAzI,EAAAyJ,OAAAiQ,SAEA,IAGA/N,EAAA5B,OAAAiK,OAAApK,GACA+B,EAAAxD,QAAAU,EAAAY,OAAAgM,cAAA3M,IAEAA,EAAAL,SAAAzI,EAAAyJ,OAAAkQ,iBAEAjR,EAAAS,MAAAT,EAAAU,OAAAsE,cAAA/B,EAAA7C,IAEA,IAGA,GAGA8Q,wBAAA,SAAA9Q,EAAAc,GAEA,GAAA+B,GAAA7E,IAEA,OAAAgC,GAGAA,EAAA2Q,qBAGA3Q,GAAA4P,aACA5P,GAAAoQ,OAAAR,OAEA/M,EAAA+L,UAAA5O,GACA6C,EAAA+L,UAAA5O,EAAAoQ,QAEApQ,EAAAL,SAAAzI,EAAAyJ,OAAAiQ,QAEA5Q,EAAAwQ,cAAA7M,IAEA,IAGA3D,EAAAwQ,cAAAhN,GAEAX,EAAA5B,OAAAiK,OAAApK,GACA+B,EAAAxD,QAAAU,EAAAY,OAAAgM,cAAA3M,IAEAA,EAAAL,SAAAzI,EAAAyJ,OAAAkQ,iBAEAjR,EAAAS,MAAAT,EAAAU,OAAAsE,cAAA/B,EAAA7C,IAgBA,IAZA6C,EAAAlB,MAAAuJ,OAAApK,EAAA,SAAAiQ,GAEAA,GAEAnR,EAAAS,MAAAT,EAAAU,OAAAsE,cAAA/B,EAAAkO,MAKA,IAOAC,kBAAA,SAAAlQ,GAEA,GAAA+B,GAAA7E,KACAgC,EAAA6C,EAAA5B,OAAAkD,IAAArD,EAEA,OAAA+B,GAAAhD,MAMAgD,EAAAiO,wBAAA9Q,EAAAc,GAJA+B,EAAA6N,0BAAA1Q,EAAAc,IAUAV,KAAA,WA0BA,QAAA6Q,GAAAC,EAAAlO,GAEApD,EAAAS,MAAAT,EAAAU,OAAA4E,WAAArC,EAAAqO,GAEArO,EAAA5B,OAAAqC,OAEA,KAAA,GAAA7K,GAAA,EAAAA,EAAAyY,EAAAvY,OAAAF,IACA,CACA,GAAAuS,GAAAkG,EAAAzY,GACAqI,EAAAkC,EAAAvK,GACAiX,EAAA7M,EAAA4K,OAAA7S,EAAAoQ,GAAA,IACAhL,EAAA6C,EAAA8L,YAAAe,GAAA,EAEA1P,GAAAoQ,OAAApF,EAEAA,EAAAmG,UAEAvR,EAAAS,MAAAT,EAAAU,OAAA6E,oBAAAtC,EAAA7C,GAEAA,EAAAwQ,cAAA/M,KAIAuH,EAAA4E,QAQAhQ,EAAAS,MAAAT,EAAAU,OAAA+E,iBAAAxC,EAAA7C,GAEAA,EAAAoQ,OAAAR,OAAA5P,EAAA4P,SARAhQ,EAAAS,MAAAT,EAAAU,OAAA8E,kBAAAvC,EAAA7C,GAEAA,EAAAwQ,cAAA5M,IAUA9C,IAAAd,EAAA2N,OAEA9K,EAAA5B,OAAAkK,IAAArK,EAAAd,GAIA6C,EAAAlB,MAAAuJ,OAAApK,IAKA+B,EAAA1B,aAAA,EACA0B,EAAAxB,aAAA,EAEAwB,EAAAxD,QAAAU,EAAAY,OAAA4L,WAAA1J,IAEAA,EAAAwM,UAEAxM,EAAAqK,YAEArK,EAAAuO,UAIA,QAAAC,KAEAxO,EAAA1B,aAAA,EAEA0B,EAAAqK,WAEArK,EAAAuO,UAIAvO,EAAAxD,QAAAU,EAAAY,OAAA0L,QAAAxJ,IA/FA,GAAAA,GAAA7E,IAOA,OALA6E,GAAAqK,YAAArK,EAAAsK,aAEAvN,EAAA1B,MAAA,SAAA2E,EAAAyO,SAAAzO,GAGAA,EAAAhD,UAeAgD,GAAAlB,MAAAnB,IAAAyQ,EAAAI,QAbAxO,EAAAqK,WAEArK,EAAAuO,WAIAvO,EAAA1B,aAAA,EACA0B,EAAAxD,QAAAU,EAAAY,OAAA0L,QAAAxJ,OAoFAyO,SAAA,WAEAtT,KAAAwD,aAAA,EAEA,IAAAxD,KAAAuD,kBAEAvD,KAAAuT,gBAIAA,aAAA,WAEA,GAAA1O,GAAA7E,IAEA6E,GAAAsK,aAAAtK,EAAAvB,cAEAuB,EAAArB,cAEAqB,EAAArB,aAAA,EAEA5B,EAAAS,MAAAT,EAAAU,OAAAmE,aAAA5B,GAEAA,EAAAuO,YAMAA,QAAA,WAMA,QAAAI,GAAAvQ,GAIA,IAAA,GAFAwQ,MAEAhZ,EAAA,EAAAA,EAAAwI,EAAAtI,OAAAF,IACA,CACA,GAAAuH,GAAA6C,EAAA6L,cAAAzN,EAAAxI,GAEA,IAAAuH,EACA,CACA,GAAAc,GAAAd,EAAA2N,MAEA8D,GAAA3Q,GAAAd,GAMA,IAAA,GAFAgD,GAAAH,EAAA5B,OAAA+B,KAEAvK,EAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IACA,CACA,GAAA2B,GAAA4I,EAAAvK,EAEA,MAAA2B,IAAAqX,IACA,CACA,GAAApV,GAAAwG,EAAA5B,OAAAkD,IAAA/J,EAEAiC,GAAAuT,SAEAhQ,EAAAS,MAAAT,EAAAU,OAAA0E,mBAAAnC,EAAAzI,GAEAyI,EAAAmO,kBAAA5W,KAKAyI,EAAA1B,aAAA,EACA0B,EAAAvB,cAAA,EAEAuB,EAAAxD,QAAAU,EAAAY,OAAA2L,YAAAzJ,IAEAA,EAAAwM,UAEAzP,EAAAS,MAAAT,EAAAU,OAAAuE,YAAAhC,EAAA5B,GAGA,QAAAyQ,GAAAzQ,EAAA0Q,GAEA,IAAAA,GAEA/R,EAAAwM,qBAEAxM,EAAA2L,SAEA1I,EAAAzB,gBAAA,EAEAxB,EAAA3B,KAAA,SAAA4E,EAAA+O,gBAAA/O,IAGAjD,EAAAS,MAAAT,EAAAU,OAAAwE,oBAAAjC,KAIAjD,EAAAS,MAAAT,EAAAU,OAAAyE,kBAAAlC,EAAA8O,GAEA9O,EAAA1B,aAAA,EACA0B,EAAAxD,QAAAU,EAAAY,OAAA0L,QAAAxJ,KArEA,GAAAA,GAAA7E,IAEA6E,GAAAnB,KAAAlB,IAAAgR,EAAAE,IAyEAE,gBAAA,WAEA,GAAA/O,GAAA7E,IAEA4B,GAAAS,MAAAT,EAAAU,OAAA2E,mBAAApC,GAEAA,EAAAzB,iBAEAyB,EAAAzB,gBAAA,EAEAyB,EAAAuO,YAKA3Q,UAAA,WAEA,MAAAzC,MAAAiD,OAAA8B,QAIA8O,SAAA,SAAA/Q,GAOA,MALAhJ,GAAAgJ,KAEAA,EAAA9C,KAAAgR,kBAAAlO,IAGA9C,KAAAiD,OAAAkD,IAAArD,IAIAe,cAAA,SAAAgB,GAEA,MAAA,UAAAyI,GAEA,GAAAxK,GAAAwK,EAAAxK,IACAkK,EAAAM,EAAAtL,KAEA,QAAAsL,EAAAwG,IAEA,IAAA/R,GAAA8M,KAAAC,KAEAjK,EAAA6L,cAAA1D,EAAAlK,GACA+B,EAAAwM,UAEAzP,EAAAS,MAAAT,EAAAU,OAAAgF,cAAAzC,EAAAyI,EAAAtL,MAAAc,EACA,MAEA,KAAAf,GAAA8M,KAAAE,OAEAlK,EAAAmO,kBAAAlQ,IAEA+B,EAAAwM,UAGAzP,EAAAS,MAAAT,EAAAU,OAAAiF,gBAAA1C,EAAA/B,MAOA6N,YAAA,SAAAnB,EAAAW,GAEA,MAAA,IAAAnQ,MAAAgC,MAAAwN,EAAAW,IAIAzN,OAAA,SAAAnF,GAEA,GAAAsH,GAAA7E,IAEA,KAAAhG,EAAAuD,GACA,CACA,GAAAyE,GAAA6C,EAAA8L,aAIA,OAFA3O,GAAA+R,QAEA/R,EAGA,GAAAe,GAAA1F,EAAAE,EAAAsH,EAAA9B,QACAf,EAAA6C,EAAA8L,YAAA5N,GACAD,EAAAd,EAAA2N,OACAxL,IAEAU,GAAA5B,OAAAkK,IAAArK,EAAAd,GACA6C,EAAAxD,QAAAU,EAAAY,OAAA8L,YAAAzM,IACA6C,EAAAwM,SAEA,KAAA,GAAA5W,GAAA,EAAAA,EAAAoK,EAAAT,cAAAzJ,OAAAF,IACA,CACA,GAAAuZ,GAAAnP,EAAAT,cAAA3J,EAEAuZ,KAAAzW,KAEA4G,EAAA6P,GAAAzW,EAAAyW,IAMA,MAFAhS,GAAA+R,MAAA5P,GAEAnC,GAIA4C,KAAA,SAAA5C,GAEA,GAAA6C,GAAA7E,KACA8C,EAAAd,EAAA2N,MAGA,OAAA3N,GAAAmR,aAEAvR,GAAAS,MAAAT,EAAAU,OAAA0F,aAAAnD,EAAA7C,IAMA6C,EAAA5B,OAAAwN,IAAA3N,IAUA+B,EAAAxD,QAAAU,EAAAY,OAAA+L,cAAA1M,IAEAA,EAAAL,SAAAzI,EAAAyJ,OAAAsR,iBAVApP,EAAA5B,OAAAkK,IAAArK,EAAAd,GACA6C,EAAAxD,QAAAU,EAAAY,OAAA8L,YAAAzM,IACA6C,EAAAwM,UAEArP,EAAAL,SAAAzI,EAAAyJ,OAAAuR,qBASArP,EAAAhD,MAQAG,EAAAwQ,cAAA9M,GALA1D,EAAAwQ,cAAA5M,MAUAsH,OAAA,SAAAlL,GAEA,GAAA6C,GAAA7E,KACA8C,EAAAd,EAAA2N,MAGA9K,GAAA5B,OAAAwN,IAAA3N,KAEA+B,EAAA5B,OAAAiK,OAAApK,GACA+B,EAAAxD,QAAAU,EAAAY,OAAAgM,cAAA3M,IACA6C,EAAAwM,UAEArP,EAAAL,SAAAzI,EAAAyJ,OAAAwR,UAIAnS,EAAAmR,UAAA,EAGAnR,EAAAoS,eAEAxS,EAAAS,MAAAT,EAAAU,OAAAyG,mBAAAlE,EAAA7C,GAEAA,EAAAoS,cAAA,GAGAvP,EAAAhD,MAQAG,EAAAwQ,cAAAjN,GALAvD,EAAAwQ,cAAA/M,KAWAlG,EAAAwC,EAAA9I,WC5gCAC,EAAAyJ,QAEA0R,QAAA,UACA5B,MAAA,QACAJ,cAAA,iBACAC,WAAA,cACA9D,QAAA,UACAoE,OAAA,SACAsB,cAAA,gBACAD,cAAA,gBACAK,UAAA,aACAC,eAAA,kBACAJ,QAAA,UACA5B,aAAA,gBACAiC,aAAA,gBACA3B,gBAAA,wBACA4B,kBAAA,uBAGAvb,EAAAD,WAGAyb,MAAA,SAAAnX,EAAA6T,GAgBA,GAdApR,KAAAoU,cAAA,EACApU,KAAA2U,WAAA,KACA3U,KAAA4U,cAEAxD,EAEApR,KAAA6U,KAAAtX,GAIAyC,KAAA8U,OAAAvX,GAIAyC,KAAA8E,IAAAmK,cACA,CACA,GAAA8F,GAAA/U,KAAA8E,IAAAX,SAEA,KAAA,GAAAjH,KAAA6X,GAEA/U,KAAAgV,aAAA9X,KAKA4X,OAAA,SAAAvX,GAEA,GAAA0X,GAAAjV,KAAA8E,IAAArI,SACAsG,EAAA/C,KAAA8E,IAAA/B,OACAoB,EAAAnE,KAAA8E,IAAAX,SAEA,IAAAnK,EAAAib,GACA,CACA,IAAA,GAAAxa,GAAA,EAAAA,EAAAsI,EAAApI,OAAAF,IACA,CACA,GAAAwB,GAAA8G,EAAAtI,GACAiC,EAAAuY,EAAAhZ,GACAiZ,EAAA9X,EAAAV,EAEAsD,MAAA/D,GAAAiZ,EAGA,IAAA,GAAAjZ,KAAAkI,GAEA,GAAAlI,IAAAgZ,GACA,CACA,GAAAvY,GAAAuY,EAAAhZ,GACAiZ,EAAA9X,EAAAV,GACAiI,EAAA3E,KAAAgV,aAAA/Y,EAEA0I,GAAAwQ,IAAAnV,KAAAkV,QAMA,KAAA,GAAAza,GAAA,EAAAA,EAAAsI,EAAApI,OAAAF,IACA,CACA,GAAAwB,GAAA8G,EAAAtI,EAEAuF,MAAA/D,GAAAxD,EAIAuH,KAAA6U,KAAAtX,IAGAsX,KAAA,SAAAtX,EAAA6X,GAEA,GAAApb,EAAAuD,GAEA,IAAA,GAAAtB,KAAAsB,GAEAyC,KAAA6U,KAAA5Y,EAAAsB,EAAAtB,QAGA,IAAA3C,EAAAiE,GACA,CACA,GAAAoH,GAAA3E,KAAAgV,aAAAzX,EAEAoH,GAEAA,EAAAwQ,IAAAnV,KAAAoV,GAIApV,KAAAzC,GAAA6X,IAKAC,KAAA,SAAA9X,EAAAC,GAEA,GAAA1D,EAAAyD,GAEA,MAAAF,GAAA2C,KAAAzC,EAAAC,EAEA,IAAAxD,EAAAuD,GACA,CACA,IAAA,GAAAG,KAAAH,GAEAA,EAAAG,GAAAF,EAAAZ,EAAAoD,KAAAtC,IAAAsC,KAAAtC,EAGA,OAAAH,GAEA,GAAAjE,EAAAiE,GACA,CACA,GAAAoH,GAAA3E,KAAAgV,aAAAzX,EAEA,IAAAoH,EACA,CACA,GAAAI,GAAAJ,EAAAwB,IAAAnG,KAEA,OAAAxC,GAAAZ,EAAAmI,GAAAA,EAIA,MAAAvH,GAAAZ,EAAAoD,KAAAzC,IAAAyC,KAAAzC,KAKA+X,QAAA,SAAArZ,EAAAsZ,GAEA,GAAA5Q,GAAA3E,KAAAgV,aAAA/Y,EAEA0I,IAEAA,EAAA4Q,OAAAvV,KAAAuV,IAIAC,UAAA,SAAAvZ,EAAAwZ,GAEA,GAAA9Q,GAAA3E,KAAAgV,aAAA/Y,EAEA0I,IAEAA,EAAA+Q,SAAA1V,KAAAyV,IAIAE,WAAA,SAAA1Z,EAAA2Z,GAEA,GAAAjR,GAAA3E,KAAAgV,aAAA/Y,EAEA,OAAA0I,IAAAA,EAAAkR,UAAA7V,KAAA4V,IAGAZ,aAAA,SAAA/Y,GAEA,GAAA8Y,GAAA/U,KAAA8E,IAAAX,SAEA,IAAAlI,IAAA8Y,GACA,CACA,GAAApQ,GAAAoQ,EAAA9Y,EAOA,OALAA,KAAA+D,MAAA4U,YAEAjQ,EAAAmR,KAAA9V,MAGA2E,EAGA,OAAA,GAGAoP,MAAA,SAAAgC,EAAAC,GAEAhW,KAAA6U,KAAAkB,EAAAC,GAEAhW,KAAAiW,sBAAA,WAEAjW,KAAA8E,IAAAF,KAAA5E,MAEAA,KAAAiW,sBAAA,aAGAC,QAAA,WAEAlW,KAAAmW,YAEAnW,KAAAiW,sBAAA,aAEAjW,KAAA8E,IAAAoI,OAAAlN,MAEAA,KAAAiW,sBAAA,gBAIAE,QAAA,WAEA,OAAAnW,KAAAmT,UAAAnT,KAAA8E,IAAA7B,OAAAwN,IAAAzQ,KAAA2P,SAGAsG,sBAAA,SAAAG,GAEA,GAAArB,GAAA/U,KAAA8E,IAAAX,SAEA,KAAA,GAAAjH,KAAA6X,GAEAA,EAAA7X,GAAAkZ,GAAApW,OAIAwS,cAAA,SAAA6D,GAEA,GAAAC,GAAA,GAAAD,GAAArW,KAEAA,MAAA2U,WAOA3U,KAAA2U,WAAA4B,MAAAD,IALAtW,KAAA2U,WAAA2B,EACAtW,KAAA2U,WAAA6B,YAQA1E,QAAA,SAAA2E,GAEA,GAAAzJ,GAAAhN,KAAA8E,IAAAyK,OAAAlS,EAAA2C,KAAAA,KAAA8E,IAAA/B,QAAA,IAEAgS,EAAA/U,KAAA8E,IAAAX,UACAA,EAAAnE,KAAA4U,UAEA,KAAA,GAAA1X,KAAAiH,GAEA4Q,EAAA7X,GAAAqS,OAAAvP,KAAAgN,EAAAyJ,EAGA,OAAAzJ,IAGA2C,KAAA,WAEA,MAAA3P,MAAA8E,IAAAmM,OAAAjR,OAGA0W,MAAA,WAEA,MAAA1W,MAAA8E,IAAAoM,QAAAlR,OAGA2W,QAAA,WAEA,MAAA3W,MAAA8E,IAAAqM,UAAAnR,KAAAA,KAAA8E,IAAAhC,IAAA3I,IAGAyc,SAAA,WAEA,QAAA5W,KAAA4R,QAGAiF,gBAAA,WAEA,QAAA7W,KAAAoS,QAGA0E,OAAA,WAEA,QAAA9W,KAAA4R,QAAA5R,KAAAoS,SAGA2E,YAAA,SAAAC,GAEA,GAAAC,GAAAjX,KAAA4R,OACA5E,EAAAgK,GAAAhX,KAAA8R,SAAA,GACA/O,EAAA/C,KAAA8E,IAAArB,UAEA,OAAAwT,GAAA9Y,EAAA6O,EAAAiK,EAAAlU,EAAAtH,GAAAuR,GAGA2F,YAAA,WAEA,IAAA3S,KAAA4R,OAEA,OAAA,CAGA,IAAA5E,GAAAhN,KAAA8R,SAAA,GACAmF,EAAAjX,KAAA4R,MAEA,KAAA,GAAA3V,KAAA+Q,GACA,CACA,GAAAkF,GAAAlF,EAAA/Q,GACAkW,EAAA8E,EAAAhb,EAEA,KAAAR,EAAAyW,EAAAC,GAEA,OAAA,EAIA,OAAA,GAGApX,SAAA,WAEA,MAAAiF,MAAA8E,IAAA5C,UAAA,IAAAgV,KAAAC,UAAAnX,KAAA8R,aAKAvS,EAAArG,EAAAD,WAAA,GClVAiK,EAAAjK,WASAqM,MAAA,WAMA,MAJAtF,MAAA+E,OAAApK,OAAA,EACAqF,KAAAgF,KAAArK,OAAA,EACAqF,KAAAiF,WAEAjF,MAWAmN,IAAA,SAAArK,EAAAsS,GAaA,MAXAtS,KAAA9C,MAAAiF,QAEAjF,KAAA+E,OAAA/E,KAAAiF,QAAAnC,IAAAsS,GAIApV,KAAAiF,QAAAnC,GAAA9C,KAAA+E,OAAApK,OACAqF,KAAA+E,OAAAjH,KAAAsX,GACApV,KAAAgF,KAAAlH,KAAAgF,IAGA9C,MASAmG,IAAA,SAAArD,GAEA,MAAA9C,MAAA+E,OAAA/E,KAAAiF,QAAAnC,KAUAoK,OAAA,SAAApK,GAEA,GAAAsU,GAAApX,KAAAiF,QAAAnC,EAOA,OALAvJ,GAAA6d,IAEApX,KAAAqX,SAAAD,GAGApX,MAUAqX,SAAA,SAAAD,GAEA,GAAAtU,GAAA9C,KAAAgF,KAAAoS,GACAE,EAAAtX,KAAA+E,OAAAwS,MACAC,EAAAxX,KAAAgF,KAAAuS,KAWA,OATAH,GAAApX,KAAA+E,OAAApK,SAEAqF,KAAA+E,OAAAqS,GAAAE,EACAtX,KAAAgF,KAAAoS,GAAAI,EACAxX,KAAAiF,QAAAuS,GAAAJ,SAGApX,MAAAiF,QAAAnC,GAEA9C,MASAyQ,IAAA,SAAA3N,GAEA,MAAAA,KAAA9C,MAAAiF,SAQAwS,KAAA,WAEA,MAAAzX,MAAA+E,OAAApK,QAGA+c,SAAA,SAAAC,EAAAC,GAOA,IAAA,GALAC,GAAAD,GAAA,GAAA1U,GACAxI,EAAAsF,KAAAyX,OACA1S,EAAA/E,KAAA+E,OACAC,EAAAhF,KAAAgF,KAEAvK,EAAA,EAAAC,EAAAD,EAAAA,IACA,CACA,GAAAqd,GAAA/S,EAAAtK,GACA2B,EAAA4I,EAAAvK,EAEAkd,GAAAlH,IAAArU,IAEAyb,EAAA1K,IAAA/Q,EAAA0b,GAIA,MAAAD,IAWAE,OAAA,SAAAlY,EAAA+X,GAOA,IAAA,GALAC,GAAAD,GAAA,GAAA1U,GACAxI,EAAAsF,KAAAyX,OACA1S,EAAA/E,KAAA+E,OACAC,EAAAhF,KAAAgF,KAEAvK,EAAA,EAAAC,EAAAD,EAAAA,IACA,CACA,GAAAqd,GAAA/S,EAAAtK,GACA2B,EAAA4I,EAAAvK,EAEAoF,GAAAiY,EAAA1b,IAEAyb,EAAA1K,IAAA/Q,EAAA0b,GAIA,MAAAD,IASAG,QAAA,WAKA,IAAA,GAHAC,GAAAjY,KAAAyX,OAAA,EACAS,EAAArd,KAAAsd,KAAAF,EAAA,GAEAxd,EAAA,EAAAyd,EAAAzd,EAAAA,IAEAyB,EAAA8D,KAAA+E,OAAAtK,EAAAwd,EAAAxd,GACAyB,EAAA8D,KAAAgF,KAAAvK,EAAAwd,EAAAxd,EAKA,OAFAuF,MAAAoY,eAEApY,MAQAyR,SAAA,SAAAnX,GAEA,IAAAA,EAEA,OAAA,CAKA,KAAA,GAFA2I,GAAAjD,KAAA+E,OAEAtK,EAAA,EAAAC,EAAAuI,EAAAtI,OAAA,EAAAD,EAAAD,EAAAA,IAEA,GAAAH,EAAA2I,EAAAxI,GAAAwI,EAAAxI,EAAA,IAAA,EAEA,OAAA,CAIA,QAAA,GAeA6W,KAAA,SAAAhX,GAKA,QAAA+d,GAAAC,EAAAC,GAMA,IAJA,GAAAC,GAAAb,EAAA5S,OAAAlK,KAAA4d,OAAAF,EAAAD,GAAA,IACA7d,EAAA6d,EACAI,EAAAH,EAEAG,GAAAje,GACA,CACA,KAAAH,EAAAqd,EAAA5S,OAAAtK,GAAA+d,GAAA,GAAA/d,GACA,MAAAH,EAAAqd,EAAA5S,OAAA2T,GAAAF,GAAA,GAAAE,GAEAA,IAAAje,IACAyB,EAAAyb,EAAA5S,OAAAtK,EAAAie,GACAxc,EAAAyb,EAAA3S,KAAAvK,EAAAie,GACAje,IACAie,KAIA,MAAAje,GAIA,QAAAke,GAAAL,EAAAC,GAEA,GAAAnB,GAAAiB,EAAAC,EAAAC,EAEAnB,GAAA,EAAAkB,GAEAK,EAAAL,EAAAlB,EAAA,GAGAmB,EAAAnB,GAEAuB,EAAAvB,EAAAmB,GArCA,GAAAZ,GAAA3X,KAyCAuY,EAAAvY,KAAAyX,OAAA,CAUA,OAPAc,GAAA,IAEAI,EAAA,EAAAJ,GAEAvY,KAAAoY,gBAGApY,MASAoY,aAAA,WAEApY,KAAAiF,UAEA,KAAA,GAAAxK,GAAA,EAAAme,EAAA5Y,KAAAgF,KAAArK,OAAAie,EAAAne,EAAAA,IAEAuF,KAAAiF,QAAAjF,KAAAgF,KAAAvK,IAAAA,CAGA,OAAAuF,QCjUAkF,EAAAjM,WAEAqM,MAAA,SAAAtD,GAEAhC,KAAAgC,MAAAA,EACAhC,KAAA6E,GAAA7C,EAAA8C,IACA9E,KAAA6Y,KAAA,KACA7Y,KAAA8Y,UAAA,GAGAvC,MAAA,SAAAD,GAEAtW,KAAA6Y,OAAAvC,EAAAnR,WAEAnF,KAAA6Y,KAAAtC,MAAAD,GAIAtW,KAAA6Y,KAAAvC,GAIAE,QAAA,WAEAxW,KAAA6E,GAAAtB,mBAEAvD,KAAA+Y,IAAA/Y,KAAA6E,GAAA7E,KAAAgC,QAGA+W,IAAA,SAAAlU,EAAA7C,GAEA,KAAA,sCAGAgX,OAAA,WAmBA,MAjBAhZ,MAAA8Y,WAEA9Y,KAAA8Y,UAAA,GAEA9Y,KAAAgC,MAAA2S,WAAA3U,KAAA6Y,OAEA7Y,KAAA6Y,KAAArC,UAGAxW,KAAA6E,GAAAtB,mBAEA,IAAAvD,KAAA6E,GAAAtB,kBAEAvD,KAAA6E,GAAA0O,gBAIAvT,MAGAiZ,QAAA,SAAA5C,GAEArW,KAAA6Y,OAEA7Y,KAAA6Y,KAAA,GAAAxC,GAAArW,KAAAgC,SAIAkX,WAAA,SAAA7C,GAEA,GAAAvC,GAAA,GAAAuC,GAAArW,KAAAgC,MAEA8R,GAAA+E,KAAA7Y,KAAA6Y,KACA7Y,KAAA6Y,KAAA/E,GAGAhH,QAAA,WAEA,GAAAgH,GAAA9T,IAEA,OAAA,YAEA8T,EAAAqF,UAAApgB,MAAA+a,EAAAsF,WACAtF,EAAAkF,WAIAG,UAAA,aAKApM,QAAA,WAEA,GAAA+G,GAAA9T,IAEA,OAAA,YAEA8T,EAAAuF,UAAAtgB,MAAA+a,EAAAsF,WACAtF,EAAAkF,WAIAK,UAAA,cCrGA3d,EAAA,GAAAwJ,IAAA,EAAA,oBAAAG,GAGA0T,IAAA,SAAAlU,EAAA7C,GAEAA,EAAAoS,cAAA,EAEAvP,EAAAlB,MAAAuJ,OAAAlL,EAAA2N,OAAA3P,KAAA8M,UAAA9M,KAAA+M,cCPArR,EAAA,GAAAwJ,IAAA,EAAA,oBAAAK,GAGAwT,IAAA,SAAAlU,EAAA7C,GAEA,GAAAc,GAAAd,EAAA2N,MAGA,OAAA3N,GAAAoQ,YAQApQ,EAAA4P,QAGA5P,EAAAoQ,OAAAe,UAAA,EAEAtO,EAAAlB,MAAAwJ,IAAArK,EAAAd,EAAAoQ,OAAApS,KAAA8M,UAAA9M,KAAA+M,aAIAnL,EAAAS,MAAAT,EAAAU,OAAA6G,qBAAAnH,GAEA6C,EAAAlB,MAAAuJ,OAAApK,EAAA9C,KAAA8M,UAAA9M,KAAA+M,cAjBAnL,EAAAS,MAAAT,EAAAU,OAAA4G,kBAAAlH,GAEAhC,KAAAgZ,WAmBAG,UAAA,SAAArW,EAAAkK,EAAAsM,GAEA,GAAAtX,GAAAhC,KAAAgC,KAEAJ,GAAAS,MAAAT,EAAAU,OAAAmG,aAAAzG,GAEAA,EAAA4P,QAEA5P,EAAAwQ,cAAA/M,IAIA4T,UAAA,SAAA/X,GAEA,GAAAU,GAAAhC,KAAAgC,KAEAJ,GAAAS,MAAAT,EAAAU,OAAA0G,mBAAAhH,EAAAV,GAEAU,EAAA4P,QAEA5P,EAAAwQ,cAAA/M,MCnDA/J,EAAA,GAAAwJ,IAAA,EAAA,kBAAAM,GAGAuT,IAAA,SAAAlU,EAAA7C,GAEA,GAAAc,GAAAd,EAAA2N,MAEA3N,GAAAmR,UAAA,EACAnR,EAAAoS,cAAA,EAEAvP,EAAA5B,OAAAwN,IAAA3N,KAEA+B,EAAA5B,OAAAiK,OAAApK,GACA+B,EAAAxD,QAAAU,EAAAY,OAAAgM,cAAA3M,IAEA6C,EAAAwM,UAEArP,EAAAL,SAAAzI,EAAAyJ,OAAAwR,UAGAtP,EAAAlB,MAAAuJ,OAAApK,EAAA9C,KAAA8M,UAAA9M,KAAA+M,cCpBArR,EAAA,GAAAwJ,IAAA,EAAA,qBAAAO,GAGAsT,IAAA,SAAAlU,EAAA7C,GAGAA,EAAAoS,cAAA,EACApS,EAAAmR,UAAA,EAGAnT,KAAA8C,IAAAd,EAAA2N,OAGA9K,EAAAnB,KAAAwJ,OAAAlL,EAAAhC,KAAA8M,UAAA9M,KAAA+M,YAGAoM,UAAA,SAAA3J,GAEAxP,KAAAuZ,gBAGAF,UAAA,SAAA7J,EAAAmE,GAEA,GAAA7Q,GAAA9C,KAAA8C,IACAd,EAAAhC,KAAAgC,KAEA,OAAA2R,GAAA,MAAAA,GAEA/R,EAAAS,MAAAT,EAAAU,OAAAoG,eAAA1G,EAAAc,GAEA9C,KAAAuZ,gBAEA,IAAA5F,EAEA/R,EAAAS,MAAAT,EAAAU,OAAAqG,aAAA3G,EAAA2R,EAAA7Q,IAKAlB,EAAAwM,qBAGAxM,EAAA2L,QAEA3L,EAAA3B,KAAA,SAAAD,KAAAwZ,aAAAxZ,MAGA4B,EAAAS,MAAAT,EAAAU,OAAAsG,eAAA5G,KAIAuX,aAAA,WAEA,GAAA1U,GAAA7E,KAAA6E,GACA/B,EAAA9C,KAAA8C,IACAd,EAAAhC,KAAAgC,KAEAJ,GAAAS,MAAAT,EAAAU,OAAAwG,cAAA9G,EAAAc,GAGA9C,KAAAkZ,WAAA1T,GAGA5D,EAAAS,MAAAT,EAAAU,OAAAkG,eAAAxG,EAAAc,GAEA+B,EAAAjB,MACAkQ,GAAA/R,EAAA8M,KAAAE,OACAjM,IAAAA,KAIA0W,aAAA,WAEA,GAAAxX,GAAAhC,KAAAgC,KAEAJ,GAAAS,MAAAT,EAAAU,OAAAuG,cAAA7G,GAEAA,EAAAwQ,cAAA/M,MC7EA/J,EAAA,GAAAwJ,IAAA,EAAA,kBAAAQ,GAGAqT,IAAA,SAAAlU,EAAA7C,GAGA,GAAAA,EAAAmR,SAIA,MAFAvR,GAAAS,MAAAT,EAAAU,OAAA8F,mBAAApG,GAEAhC,KAAAgZ,QAIA,IAAAlW,GAAAd,EAAA2N,OACA3C,EAAAhL,EAAA8P,SAAA,EAGA9P,GAAAoQ,OAOAtW,EAAAkR,EAAAhL,EAAAoQ,QALApQ,EAAAoQ,OAAApF,EAQAnI,EAAAlB,MAAAwJ,IAAArK,EAAAd,EAAAoQ,OAAApS,KAAA8M,UAAA9M,KAAA+M,YAGAoM,UAAA,SAAArW,EAAAkK,EAAAsM,GAEA,GACAtX,IADAhC,KAAA6E,GACA7E,KAAAgC,MAEAJ,GAAAS,MAAAT,EAAAU,OAAA4F,WAAAlG,GAEAhC,KAAAiZ,QAAArT,IAGAyT,UAAA,SAAA/X,GAEA,GAAAU,GAAAhC,KAAAgC,KAEAJ,GAAAS,MAAAT,EAAAU,OAAA6F,iBAAAnG,EAAAV,GAEAtB,KAAAiZ,QAAArT,MC/CAlK,EAAA,GAAAwJ,IAAA,EAAA,gBAAAS,GAGAoT,IAAA,SAAAlU,EAAA7C,GAEA6C,EAAAuK,cAAAvK,EAAAhD,MAEA7B,KAAAgZ,SAIAnU,EAAAlB,MAAAwJ,IAAAnL,EAAA2N,OAAA3N,EAAAoQ,OAAApS,KAAA8M,UAAA9M,KAAA+M,cCXArR,EAAA,GAAAwJ,IAAA,EAAA,mBAAAU,GAGAmT,IAAA,SAAAlU,EAAA7C,GAGA,GAAAA,EAAAmR,SAIA,MAFAvR,GAAAS,MAAAT,EAAAU,OAAAgG,oBAAAtG,GAEAhC,KAAAgZ,QAIA,IAGAhM,IAHAhN,KAAA8C,IAAAd,EAAA2N,OAGA3P,KAAAgN,QAAAhL,EAAA8P,SAAA,IACA2H,EAAAzZ,KAAAyZ,QAAAzX,EAAA+U,YAAA/J,GACA0M,EAAA1Z,KAAA0Z,OAAA7U,EAAAwK,SAAArC,EAAAyM,CACAzZ,MAAA2Z,WAAA9U,EAAAyK,YAAAtC,EAAAyM,CAGA,OAAAhb,GAAAgb,GAEAzZ,KAAAgZ,cAIAhX,EAAA4P,OAEA/M,EAAAnB,KAAAuJ,OAAAjL,EAAA0X,EAAA1Z,KAAA8M,UAAA9M,KAAA+M,WAIAlI,EAAAnB,KAAAhB,OAAAV,EAAA0X,EAAA1Z,KAAA8M,UAAA9M,KAAA+M,aAIAoM,UAAA,SAAA3J,GAEA,GAAAxN,GAAAhC,KAAAgC,KAEAJ,GAAAS,MAAAT,EAAAU,OAAAyF,YAAA/F,GAEAhC,KAAA4Z,WAAApK,IAGA6J,UAAA,SAAA7J,EAAAmE,GAEA,GAEA3R,IADAhC,KAAA6E,GACA7E,KAAAgC,MAGA,OAAA2R,GAEA/R,EAAAS,MAAAT,EAAAU,OAAAoF,cAAA1F,EAAAwN,GAGAxP,KAAA4Z,WAAApK,EAAAxN,EAAAhC,KAAA6E,KAEA,MAAA8O,GAAA,MAAAA,GAEA/R,EAAAS,MAAAT,EAAAU,OAAAqF,iBAAA3F,GAEAhC,KAAAkZ,WAAA1T,IAEA,IAAAmO,EAEA/R,EAAAS,MAAAT,EAAAU,OAAAsF,WAAA5F,EAAA2R,IAKA/R,EAAAwM,qBAGAxM,EAAA2L,SAEAvL,EAAAoS,cAAA,EAEAxS,EAAA3B,KAAA,SAAAD,KAAAwZ,aAAAxZ,OAGA4B,EAAAS,MAAAT,EAAAU,OAAAuF,aAAA7F,KAIA4X,WAAA,SAAApK,GAEA,GAAA3K,GAAA7E,KAAA6E,GACA7C,EAAAhC,KAAAgC,MACA0X,EAAA1Z,KAAA0Z,OACAC,EAAA3Z,KAAA2Z,UAGA,OAAA3X,GAAAmR,aAEAvR,GAAAS,MAAAT,EAAAU,OAAAgG,oBAAAtG,EAAAwN,IAMA/Q,EAAA+Q,IAEA1T,EAAA0T,EAAAkK,GAGA9X,EAAAS,MAAAT,EAAAU,OAAAkF,YAAAxF,EAAA0X,GAIA1X,EAAA4P,SAEA/M,EAAAhD,MAMAG,EAAA4P,OAAA5P,EAAAoQ,OAAAR,UAJA5P,EAAA4P,WASA/M,EAAA6L,cAAAgJ,EAAA1Z,KAAA8C,IAAAd,GAGAJ,EAAAS,MAAAT,EAAAU,OAAAmF,aAAAzF,EAAA2X,GAEA9U,EAAAjB,MACAkQ,GAAA/R,EAAA8M,KAAAC,KACA9M,MAAA2X,EACA7W,IAAA9C,KAAA8C,WAGA+B,EAAAuK,cAAAvK,EAAAhD,OAEA7B,KAAAkZ,WAAA7T,MAIAmU,aAAA,WAEA,GAAAxX,GAAAhC,KAAAgC,KAEAA,GAAAoS,eAEApS,EAAAoS,cAAA,EACApS,EAAAwQ,cAAA5M,GAEAhE,EAAAS,MAAAT,EAAAU,OAAAwF,YAAA9F,OCxJAJ,EAAA0C,aAEA1C,EAAAiY,OACAC,KAAA,EACA1gB,MAAA,EACA2gB,IAAA,EACAC,KAAA,GAGApY,EAAAkN,MACAgL,KAAA,EACA1gB,MAAA,GAGAoL,EAAA3B,UAEAb,MAAAvJ,EACAkL,MAAA/B,EAAAiY,MAAAC,KACAlV,KAAAhD,EAAAkN,KAAAgL,KACAG,MAAA,EACAta,UAAA,GAGA6E,EAAAvL,WAGAihB,YAAA,SAAApY,EAAAqY,EAAA3d,GAEA,MAAAgI,GAAA3B,UAWAT,KAAA,SAAAN,EAAAqY,EAAA3d,GAEAF,EAAA0D,KAAAxD,EAAAwD,KAAAka,YAAApY,EAAAqY,EAAA3d,IAEAwD,KAAA8B,SAAAA,EACA9B,KAAA9C,KAAAid,EACAna,KAAAxD,QAAAA,EACAwD,KAAAoa,gBACApa,KAAAmD,aAAA,EAEAnD,KAAAqa,cAAA7d,EAAA6d,eAAA,gBACAra,KAAAsa,eAAA9d,EAAA8d,mBACAta,KAAAua,gBAAA/d,EAAA8d,cAEA,IAAAE,GAAAxa,KAAAwa,SAAA1Y,EAAAqY,EAAA3d,EAEArD,GAAAqD,EAAAwF,OAMAwY,EAAA1hB,KAAAkH,KAAAxD,EAAAwF,OAJAJ,EAAAuE,IAAA3J,EAAAwF,MAAAwY,EAAAxa,OAYAwa,SAAA,SAAA1Y,EAAAqY,EAAA3d,GAEA,MAAA,UAAAie,GAEAza,KAAAgC,MAAAyY,EAEAza,KAAAL,WAEAK,KAAAL,SAAAvF,EAAA0H,EAAAiB,OAAA/C,KAAA9C,SAAA,GAGA8C,KAAAua,eAEAva,KAAA0a,qBAGA1a,KAAA2a,cAAA7Y,EAAAqY,EAAA3d,KAWAme,cAAA,SAAA7Y,EAAAiB,EAAAvG,KAKAoe,qBAAA,WAEA5a,KAAAmD,aAAA,CAIA,KAAA,GAFA0X,GAAA7a,KAAAoa,aAEA3f,EAAA,EAAAA,EAAAogB,EAAAlgB,OAAAF,IAEAuF,KAAA8a,WAAAD,EAAApgB,GAGAogB,GAAAlgB,OAAA,GAYAmb,KAAA,SAAA9T,GAEAhC,KAAAmD,YAMAnD,KAAA8a,WAAA9Y,GAJAhC,KAAAoa,aAAAtc,KAAAkE,IAQA8Y,WAAA,SAAA9Y,KAKAuT,OAAA,SAAAvT,EAAAkO,KAKAwF,SAAA,SAAA1T,EAAAkO,KAKA2F,UAAA,SAAA7T,EAAAkO,KAKA/J,IAAA,SAAAnE,KAKAmT,IAAA,SAAAnT,EAAAkO,GAEAlQ,KAAA0V,SAAA1T,GACAhC,KAAAuV,OAAAvT,EAAAkO,IAGAX,OAAA,SAAAvN,EAAA6V,EAAApB,KAKAsE,QAAA,SAAA/Y,KAKAgZ,SAAA,SAAAhZ,KAKAiZ,UAAA,SAAAjZ,KAKAkZ,WAAA,SAAAlZ,KAKAmZ,aAAA,SAAAjL,GAEA,IAAApW,EAAAoW,GAEA,OAAA,CAGA,IAAAkL,GAAApb,KAAAgC,MAAA3I,SACAgiB,EAAAD,EAAAtY,GAEA,KAAAhJ,EAAAuhB,GAEA,OAAA,CAGA,IAAAA,EAAA1gB,SAAAuV,EAAAvV,OAEA,OAAA,CAGA,KAAA,GAAAF,GAAA,EAAAA,EAAAyV,EAAAvV,OAAAF,IAEA,IAAAlB,EAAA2W,EAAAzV,MAAAnB,EAAA4W,EAAAzV,IAEA,OAAA,CAIA,QAAA,GAGA6gB,YAAA,SAAA/e,EAAAgf,GAEA,GAAA9B,IAAA,CAEA,IAAAngB,EAAAiiB,GAEAhf,EAAAgf,KAEAhf,EAAAgf,GAAA,KACA9B,GAAA,OAKA,KAAA,GAAAhf,GAAA,EAAAA,EAAA8gB,EAAA5gB,OAAAF,IACA,CACA,GAAA+gB,GAAAD,EAAA9gB,EAEA8B,GAAAif,KAEAjf,EAAAif,GAAA,KACA/B,GAAA,GAUA,MALAA,IAAAzZ,KAAAia,OAAA1d,EAAAua,UAEAva,EAAAwX,QAGA0F,GAGAgC,aAAA,SAAAlf,EAAAgf,EAAAhV,EAAAmV,GAEA,GAAAjC,IAAA,CAIA,IAFAlT,EAAAoJ,OAEArW,EAAAiiB,GACA,CACA,GAAAI,GAAApf,EAAAgf,GACAK,EAAArV,EAAAmV,EAEAjgB,GAAAkgB,EAAAC,KAEArf,EAAAgf,GAAAK,EACAnC,GAAA,OAKA,KAAA,GAAAhf,GAAA,EAAAA,EAAA8gB,EAAA5gB,OAAAF,IACA,CACA,GAAA+gB,GAAAD,EAAA9gB,GACAkhB,EAAApf,EAAAif,GACAK,EAAAH,EAAAjhB,GACAqhB,EAAAvV,EAAAsV,EAEApgB,GAAAkgB,EAAAG,KAEAvf,EAAAif,GAAA5e,EAAAkf,GACArC,GAAA,GAeA,MAVAA,KAEAzZ,KAAAia,OAAA1d,EAAAua,UAEAva,EAAAwX,QAGAxX,EAAAoF,SAAAzI,EAAAyJ,OAAA2R,WAAA/X,EAAAgK,EAAAgV,EAAAG,KAGAjC,GAGAsC,eAAA,SAAAC,EAAAC,GAEA,IAAAA,EAEA,MAAA,KAKA,KAAA,GAFAC,MAEAzhB,EAAA,EAAAA,EAAAuhB,EAAArhB,OAAAF,IACA,CACA,GAAAmb,GAAA5V,KAAAmc,UAAAH,EAAAvhB,GAAAwhB,EAEA,QAAArG,GAEAsG,EAAApe,KAAA8X,GAIA,MAAAsG,IAGAC,UAAA,SAAAvG,EAAAqG,GAEA,GAAArG,EAEA,OAAAqG,GAEA,IAAAra,GAAAkN,KAAA1V,MACA,MAAAwc,GAAA9D,SAAA,EAEA,KAAAlQ,GAAAiY,MAAAzgB,MACA,GAAAwc,EAAAxD,OAEA,MAAAwD,GAAAxD,MAIA,IAAAgK,GAAAxG,EAAA9D,SAAA,EAOA,OALA8D,GAAAhE,SAEAwK,EAAAxK,OAAAgE,EAAAhE,QAGAwK,CAGA,KAAAxa,GAAAiY,MAAAE,IACA,MAAAnE,GAAAjG,MAEA,KAAA/N,GAAAiY,MAAAG,KACA,MAAApE,GAAAc,QAKA,MAAA,OAKAgE,mBAAA,WAEA,IAAA,GAAAL,KAAAra,MAAAsa,eACA,CACA,GAAApd,GAAA8C,KAAAsa,eAAAD,EAEAzY,GAAAuE,IAAAjJ,EAAA8C,KAAAqc,iBAAArc,QAIAqc,iBAAA,SAAAhC,GAEA,MAAA,UAAAI,GAEAza,KAAAsa,eAAAD,GAAAI,IAIA6B,iBAAA,SAAAta,GAEA,MAAAA,GAAAhC,KAAAqa,gBAGAkC,yBAAA,SAAAva,GAEA,GAAAqY,GAAAra,KAAAsc,iBAAAta,EAEA,IAAAqY,IAAAra,MAAAsa,eACA,CACA,GAAAtY,GAAAhC,KAAAsa,eAAAD,EAEA,OAAArY,GAAA3I,SAGA,OAAA,GAGAmjB,mBAAA,SAAAtM,GAEA,GAAAlW,EAAAkW,GACA,CACA,GAAArL,GAAA7E,KAAAuc,yBAAArM,EAEA,OAAArL,GAAAyL,WAAAJ,GAGA,OAAA,GAGAD,UAAA,SAAA4F,EAAA4G,EAAAvM,EAAArQ,GAEA,GAAAG,KAAAua,cACA,CACA,GAAAva,KAAA0c,kBAAAxM,EAAArQ,GAEA,OAAA,CAIAG,MAAA2c,uBAAAF,KAOAC,kBAAA,SAAAxM,EAAArQ,GAEA,GAAA7F,EAAAkW,GACA,CACA,GAAArL,GAAA7E,KAAAuc,yBAAArM,EAEA,IAAArL,KAAA,EAIA,MAFAA,GAAAoL,UAAAC,EAAA0M,QAAA5c,OAEA,EAIA,OAAA,GAGA2c,uBAAA,SAAA3a,GAEA,IAAA,GAAAqY,KAAAra,MAAAsa,eACA,CACA,GAAAlV,GAAApF,KAAAsa,eAAAD,EAEA,IAAArY,YAAAoD,GAEA,MAAAiV,GAIA,OAAA,GAGAwC,eAAA,SAAAhH,EAAAhW,GAEA,GAAAG,KAAAua,cAEAva,KAAA8c,qBAAAjH,EAAAhW,OAGA,CACA,GAAAub,GAAApb,KAAAgC,MAAA3I,QAEA+hB,GAAAxL,MAAA5P,KAAA+c,aAAAlH,EAAAhW,GAAAG,QAIA+c,aAAA,SAAAlH,EAAAhW,GAEA,MAAA,UAAAgF,GAEA,GAAA+Q,GAAA/Q,EAAA5B,OAAA8U,OAAAlC,EAEAhW,GAAA/G,KAAAkH,KAAA4V,KAIAkH,qBAAA,SAAAjH,EAAAhW,GAEA,GAAA+V,GAAA,GAAA1S,GACAoD,EAAAtG,KACAgd,EAAAze,EAAAyB,KAAAsa,gBACAzI,EAAA,CAEA,KAAA,GAAAwI,KAAAra,MAAAsa,eACA,CACA,GAAAlV,GAAApF,KAAAsa,eAAAD,GACAxV,EAAAO,EAAA/L,QAEAwL,GAAA+K,MAAA,SAAA/K,GAEAA,EAAA5B,OAAA8U,OAAAlC,EAAAD,KAEA/D,IAAAmL,GAEAnd,EAAA/G,KAAAwN,EAAAsP,QC3fAhU,EAAA0C,UAAA2Y,UAAApX,EAEAA,EAAAhD,UAEAb,MAAAvJ,EACAkL,MAAA/B,EAAAiY,MAAAC,KACAlV,KAAAhD,EAAAkN,KAAAgL,KACAG,MAAA,EACAta,UAAA,EACAyc,MAAA,KACAc,SAAA,GAGAxhB,EAAA,GAAA8I,GAAAqB,GAGAqU,YAAA,SAAApY,EAAAqY,EAAA3d,GAEA,MAAAqJ,GAAAhD,UAGA8X,cAAA,SAAA7Y,EAAAqY,EAAA3d,GAEA,GAAA4e,GAAApb,KAAAgC,MAAA3I,QAEA2G,MAAAoc,MAAApc,KAAAoc,OAAAhB,EAAAle,KAAA,IAAAke,EAAAtY,IAEAlB,EAAAS,MAAAT,EAAAU,OAAA8H,eAAApK,MAEAA,KAAA4a,wBAGAE,WAAA,SAAA9Y,GAEA,GAAAmb,GAAAnd,KACA6V,EAAA7V,KAAAod,iBAAApb,GACAqb,EAAArd,KAAAsd,kBACAlC,EAAApb,KAAAgC,MAAA3I,SACAkkB,EAAAvb,EAAAhC,KAAA9C,MAEAyH,EAAA3C,EAAA4S,WAAA5U,KAAA9C,OAEAvB,OAAAqG,EACAub,QAAAA,EACA1H,UAAAA,EACA7T,MAAA,KACAwb,QAAA,EAEAH,YAAAA,EAEAI,UAAA,WAEA7b,EAAAS,MAAAT,EAAAU,OAAA+H,uBAAA8S,EAAAnb,EAAA2C,GAEA3E,KAAAkd,QAEAlb,EAAAkU,UAIAlW,KAAA0d,aAAA/Y,IAGAgZ,QAAA,WAEA/b,EAAAS,MAAAT,EAAAU,OAAAgI,qBAAA6S,EAAAnb,EAAA2C,GAEAkR,EAAAlR,EAAA3C,SAEAhC,KAAAkd,QAEAlb,EAAAkU,UAIAlW,KAAA0d,aAAA/Y,KAMA3C,GAAAT,IAAArI,EAAAyJ,OAAA2R,UAAA3P,EAAA0Y,YAAArd,MAEAvB,EAAA8e,IAAAnC,EAAAjK,UAAAnP,EAAAhC,KAAAoc,MAAAjiB,KAEAojB,EAAA5f,EAAAqE,EAAAhC,KAAAoc,OAEAxa,EAAAS,MAAAT,EAAAU,OAAAiI,yBAAAvK,KAAAgC,EAAAub,IAGA9e,EAAA8e,KAEA3b,EAAAS,MAAAT,EAAAU,OAAAkI,kBAAAxK,KAAAgC,EAAAub,GAEAnC,EAAAnL,UAAAsN,EAAAvd,KAAA4d,YAAAjZ,GAAA3E,QAKAmV,IAAA,SAAAnT,EAAAkO,GAEA,GAAAzR,EAAAyR,GAEAlQ,KAAA0V,SAAA1T,OAGA,CACA,GAAAoZ,GAAApb,KAAAgC,MAAA3I,SACAuc,EAAAwF,EAAA9K,WAAAJ,GACAvL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA0Y,KAAAjR,EAAAkR,UAAAD,KAEA5V,KAAA6d,WAAAlZ,GACA3E,KAAA8d,WAAAnZ,EAAAiR,MAMAL,OAAA,SAAAvT,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAuc,EAAAwF,EAAA9K,WAAAJ,GACAvL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA0Y,IAEAjR,EAAA3C,QAAA4T,IAEA5V,KAAA6d,WAAAlZ,GACA3E,KAAA8d,WAAAnZ,EAAAiR,KAMAF,SAAA,SAAA1T,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,MACA0Y,EAAAwF,EAAA9K,WAAAJ;AAEA0F,GAAAjR,EAAA3C,QAAA4T,GAEA5V,KAAA0d,aAAA/Y,IAKAkR,UAAA,SAAA7T,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,MACA0Y,EAAAwF,EAAA9K,WAAAJ,EAEA,OAAA0F,KAAAjR,EAAA3C,OAIA8b,WAAA,SAAAnZ,EAAAiR,GAEA5V,KAAA+d,SAAApZ,EAAAiR,GACA5V,KAAAge,iBAAArZ,EAAAhJ,OAAAia,GACA5V,KAAAie,YAAAtZ,IAGA+Y,aAAA,SAAA/Y,GAEA3E,KAAA6d,WAAAlZ,GACA3E,KAAAke,gBAAAvZ,EAAAhJ,QACAqE,KAAAie,YAAAtZ,IAIAwB,IAAA,SAAAnE,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,OAAAyH,GAAA3C,OAIAuN,OAAA,SAAAvN,EAAA6V,EAAApB,GAEA,GAAA9R,GAAA3C,EAAA4S,WAAA5U,KAAA9C,MACA+e,EAAAxF,EAAAzW,KAAA4E,KAAA5E,KAAA2D,KAEAgB,IAAAsX,IAEApE,EAAA7X,KAAA9C,MAAA8C,KAAAmc,UAAAxX,EAAA3C,MAAAia,KAIAf,WAAA,SAAAlZ,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEAyH,KAEA/C,EAAAS,MAAAT,EAAAU,OAAAqI,qBAAA3K,KAAAgC,EAAA2C,GAEA3E,KAAA6d,WAAAlZ,GACA3E,KAAAie,YAAAtZ,GAEA3C,EAAAN,KAAAxI,EAAAyJ,OAAA2R,UAAA3P,EAAA0Y,eAIAQ,WAAA,SAAAlZ,GAEA,GAAAiR,GAAAjR,EAAA3C,KAEA4T,KAEAhU,EAAAS,MAAAT,EAAAU,OAAAmI,sBAAAzK,KAAA2E,GAEAiR,EAAAlU,KAAAxI,EAAAyJ,OAAA8P,MAAA9N,EAAAgZ,SACA/H,EAAAlU,KAAAxI,EAAAyJ,OAAAwR,QAAAxP,EAAA8Y,WAEA9Y,EAAA3C,MAAA,KACA2C,EAAA6Y,QAAA,IAIAO,SAAA,SAAApZ,EAAAiR,GAEAA,EAAArU,IAAArI,EAAAyJ,OAAA8P,MAAA9N,EAAAgZ,QAAA3d,MACA4V,EAAArU,IAAArI,EAAAyJ,OAAAwR,QAAAxP,EAAA8Y,UAAAzd,MAEA2E,EAAA3C,MAAA4T,EACAjR,EAAA6Y,QAAA,EAEA5b,EAAAS,MAAAT,EAAAU,OAAAoI,oBAAA1K,KAAA2E,IAIAiZ,YAAA,SAAAjZ,GAEA,MAAA,UAAAiR,GAEAhU,EAAAS,MAAAT,EAAAU,OAAAwI,iBAAA9K,KAAA2E,EAAAhJ,OAAAgJ,EAAAiR,GAEAjR,EAAA6Y,UAAA,IAEA5H,GAEA5V,KAAA+d,SAAApZ,EAAAiR,GACA5V,KAAAge,iBAAArZ,EAAAhJ,OAAAia,IAIA5V,KAAAke,gBAAAvZ,EAAAhJ,QAGAgJ,EAAA6Y,QAAA,EAEAxd,KAAAie,YAAAtZ,MAMAyY,iBAAA,SAAApb,GAEA,GAAAoZ,GAAApb,KAAAgC,MAAA3I,SACA+iB,EAAApc,KAAAoc,MACA+B,EAAA/C,EAAAtY,GAEA,OAAA,UAAA8S,GAEA,MAAA1a,GAAA8G,EAAAoa,EAAAxG,EAAAuI,KAKAD,gBAAA,SAAAlc,GAEA,GAAAoa,GAAApc,KAAAoc,KAEAxa,GAAAS,MAAAT,EAAAU,OAAAsI,oBAAA5K,KAAAgC,EAAAoa,GAEApc,KAAAsb,YAAAtZ,EAAAoa,IAIA4B,iBAAA,SAAAhc,EAAA4T,GAEA,GAAAwF,GAAApb,KAAAgC,MAAA3I,SACA+iB,EAAApc,KAAAoc,MACA+B,EAAA/C,EAAAtY,GAEAlB,GAAAS,MAAAT,EAAAU,OAAAuI,qBAAA7K,KAAAgC,EAAAoa,EAAAxG,EAAAuI,GAEAne,KAAAyb,aAAAzZ,EAAAoa,EAAAxG,EAAAuI,IAIAF,YAAA,SAAAtZ,GAEA,GAAA3E,KAAAL,SACA,CACA,GAAAqC,GAAA2C,EAAAhJ,OACAia,EAAAjR,EAAA3C,KAEAA,GAAAhC,KAAA9C,QAAA0Y,IAEA5T,EAAAhC,KAAA9C,MAAA0Y,EAEA5T,EAAAL,SAAAzI,EAAAyJ,OAAA4R,gBAAAvU,KAAA2E,OAKA2Y,gBAAA,WAEA,MAAA,UAAAtb,EAAA4T,EAAAwI,EAAAC,GAEA,GAAAre,KAAAoc,QAAAgC,EACA,CACA,GAAAzZ,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEAyH,IAAAiR,IAAAjR,EAAA3C,QAEAhC,KAAA6d,WAAAlZ,GACA3E,KAAA+d,SAAApZ,EAAAiR,GACA5V,KAAAie,YAAAtZ,SCtUA/C,EAAA0C,UAAAga,QAAAxY,EAEAA,EAAAjD,UAEAb,MAAAvJ,EACAkL,MAAA/B,EAAAiY,MAAAC,KACAlV,KAAAhD,EAAAkN,KAAAgL,KACAG,MAAA,EACAta,UAAA,EACAwe,QAAA,KACA7jB,WAAA,KACAyJ,sBAAA,EACAwa,eAAA,EACAC,aAAA,GAGA9iB,EAAA,GAAA8I,GAAAsB,GAGAoU,YAAA,SAAApY,EAAAqY,EAAA3d,GAEA,MAAAsJ,GAAAjD,UAGA8X,cAAA,SAAA7Y,EAAAqY,EAAA3d,GAEAwD,KAAAme,QAAAne,KAAAme,SAAArc,EAAA5E,KAAA,IAAA4E,EAAAgB,IACA9C,KAAA1F,WAAA+E,EAAAW,KAAA1F,WAAA0F,KAAA+D,sBACA/D,KAAAye,SAAAze,KAAA0e,iBAEA9c,EAAAS,MAAAT,EAAAU,OAAAyI,aAAA/K,MAEAA,KAAA4a,wBAGAE,WAAA,SAAA9Y,GAEA,GAAAmb,GAAAnd,KACAob,EAAApb,KAAAgC,MAAA3I,SACAwc,EAAA7V,KAAAod,iBAAApb,GACAub,EAAAvb,EAAAhC,KAAA9C,MAEAyH,EAAA3C,EAAA4S,WAAA5U,KAAA9C,OAEAvB,OAAAqG,EACA6T,UAAAA,EACA0H,QAAAA,EACA1C,WACA5X,OAAA,GAAAC,GACAwW,QAAA,EACAiF,cAAA,EACAC,aAAA,EAEAnB,UAAA,WAEA7b,EAAAS,MAAAT,EAAAU,OAAA0I,qBAAAmS,EAAAnb,EAAAhC,KAAA2E,GAEAwY,EAAA0B,YAAAla,EAAA3E,MAAA,IAGA2d,QAAA,WAEAhZ,EAAA+U,SAKA9X,EAAAS,MAAAT,EAAAU,OAAA2I,mBAAAkS,EAAAnb,EAAAhC,KAAA2E,GAEAkR,EAAA7V,OAMAmd,EAAA7L,KAAA3M,GACAwY,EAAA2B,UAAAna,IALAwY,EAAA0B,YAAAla,EAAA3E,QAYAgC,GAAA2N,OAGAyL,EAAArb,GAAAgC,EAAAY,OAAA8L,WAAAzO,KAAA+e,iBAAApa,GAAA3E,KAGA,IAAA4V,GAAAjR,EAAA1B,OAAA8B,MAuBA,IArBA6Q,EAAAT,IAAA,SAAAjF,GAEAiN,EAAAhI,IAAAnT,EAAAkO,IAGA0F,EAAAL,OAAA,SAAArF,GAEAiN,EAAA5H,OAAAvT,EAAAkO,IAGA0F,EAAAF,SAAA,SAAAxF,GAEAiN,EAAAzH,SAAA1T,EAAAkO,IAGA0F,EAAAC,UAAA,SAAA3F,GAEA,MAAAiN,GAAAtH,UAAA7T,EAAAkO,IAIApW,EAAAyjB,GACA,CACA3b,EAAAS,MAAAT,EAAAU,OAAA4I,gBAAAlL,KAAAgC,EAAA2C,EAAA4Y,EAEA,KAAA,GAAA9iB,GAAA,EAAAA,EAAA8iB,EAAA5iB,OAAAF,IACA,CACA,GAAAyV,GAAAqN,EAAA9iB,GACAqI,EAAAsY,EAAA5K,kBAAAN,EAEAvL,GAAAkW,QAAA/X,IAAA,EACAsY,EAAAnL,UAAAC,EAAAlQ,KAAA4d,YAAAjZ,GAAA3E,WAKA4B,GAAAS,MAAAT,EAAAU,OAAA6I,uBAAAnL,KAAAgC,EAAA2C,GAEAyW,EAAAxL,MAAA5P,KAAAgf,eAAAra,GAAA3E,KAIAA,MAAAie,YAAAtZ,IAGAsa,KAAA,SAAAta,EAAA9E,GAEA8E,EAAAga,cAAA,EACAha,EAAAia,aAAA,EAEA/e,EAAA9G,MAAAiH,MAEA2E,EAAAga,cAAA,EACAha,EAAAia,aAAA,EAEA5e,KAAAsR,KAAA3M,GACA3E,KAAA8e,UAAAna,IAGAwQ,IAAA,SAAAnT,EAAAkO,GAEA,GAAAzR,EAAAyR,GAEAlQ,KAAA0V,SAAA1T,OAGA,CACA,GAAAoZ,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,MACAgiB,EAAAva,EAAA1B,OACAkc,EAAA,GAAAjc,EAEA,IAAAlD,KAAAmb,aAAAjL,GAEA,IAAA,GAAAzV,GAAA,EAAAA,EAAAyV,EAAAvV,OAAAF,IACA,CACA,GAAAmb,GAAAwF,EAAA9K,WAAAJ,EAAAzV,GAEAmb,IAEAuJ,EAAAhS,IAAAyI,EAAAjG,OAAAiG,OAKA,CACA,GAAAA,GAAAwF,EAAA9K,WAAAJ,EAEA0F,IAEAuJ,EAAAhS,IAAAyI,EAAAjG,OAAAiG,GAIA,GAAAwJ,GAAAF,EAAAxH,SAAAyH,GAAApa,OACAsa,EAAAF,EAAAzH,SAAAwH,GAAAna,MAEA/E,MAAAif,KAAAta,EAAA,WAEA,IAAA,GAAAlK,GAAA,EAAAA,EAAA4kB,EAAA1kB,OAAAF,IAEAuF,KAAAsf,SAAA3a,EAAA0a,EAAA5kB,GAGA,KAAA,GAAAA,GAAA,EAAAA,EAAA2kB,EAAAzkB,OAAAF,IAEAuF,KAAA6e,YAAAla,EAAAya,EAAA3kB,QAMA8a,OAAA,SAAAvT,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,IAAA8C,KAAAmb,aAAAjL,GAEAlQ,KAAAif,KAAAta,EAAA,WAEA,IAAA,GAAAlK,GAAA,EAAAA,EAAAyV,EAAAvV,OAAAF,IACA,CACA,GAAAmb,GAAAwF,EAAA9K,WAAAJ,EAAAzV,GAEAmb,IAEA5V,KAAAsf,SAAA3a,EAAAiR,UAKA,IAAAzb,EAAA+V,GACA,CACA,GAAA0F,GAAAwF,EAAA9K,WAAAJ,EAEA0F,IAEA5V,KAAAsf,SAAA3a,EAAAiR,KAKAF,SAAA,SAAA1T,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,IAAA8C,KAAAmb,aAAAjL,GAEAlQ,KAAAif,KAAAta,EAAA,WAEA,IAAA,GAAAlK,GAAA,EAAAA,EAAAyV,EAAAvV,OAAAF,IACA,CACA,GAAAmb,GAAAwF,EAAA9K,WAAAJ,EAAAzV,GAEAmb,IAEA5V,KAAA6e,YAAAla,EAAAiR,UAKA,IAAAzb,EAAA+V,GACA,CACA,GAAA0F,GAAAwF,EAAA9K,WAAAJ,EAEA0F,IAEA5V,KAAA6e,YAAAla,EAAAiR,OAOA,KAAA,GAFApT,GAAAmC,EAAA1B,OAAA8B,OAEAtK,EAAA+H,EAAA7H,OAAA,EAAAF,GAAA,EAAAA,IAEAuF,KAAA6e,YAAAla,EAAAnC,EAAA/H,KAKAob,UAAA,SAAA7T,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,MACAgiB,EAAAva,EAAA1B,MAEA,IAAAjD,KAAAmb,aAAAjL,GACA,CACA,IAAA,GAAAzV,GAAA,EAAAA,EAAAyV,EAAAvV,OAAAF,IACA,CACA,GAAAmb,GAAAwF,EAAA9K,WAAAJ,EAAAzV,GAEA,IAAAmb,IAAAsJ,EAAAzO,IAAAmF,EAAAjG,QAEA,OAAA,EAIA,MAAAO,GAAAvV,OAAA,EAEA,GAAAR,EAAA+V,GACA,CACA,GAAA0F,GAAAwF,EAAA9K,WAAAJ,EAEA,OAAA0F,IAAAsJ,EAAAzO,IAAAmF,EAAAjG,QAGA,OAAA,GAGAxJ,IAAA,SAAAnE,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,OAAAyH,GAAA1B,OAAA8B,QAGAwK,OAAA,SAAAvN,EAAA6V,EAAApB,GAEA,GAAA9R,GAAA3C,EAAA4S,WAAA5U,KAAA9C,MACA+e,EAAAxF,EAAAzW,KAAA4E,KAAA5E,KAAA2D,KAEAgB,IAAAsX,IAEApE,EAAA7X,KAAA9C,MAAA8C,KAAA+b,eAAApX,EAAA1B,OAAA8B,OAAAkX,KAIAjB,SAAA,SAAAhZ,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,IAAAyH,GAAA3E,KAAAwe,YACA,CACA5c,EAAAS,MAAAT,EAAAU,OAAAsJ,iBAAA5L,KAAAgC,EAAA2C,GAEAA,EAAA+U,QAAA,EACA/U,EAAAia,aAAA,CAIA,KAAA,GAFA3b,GAAA0B,EAAA1B,OAAA8B,OAEAtK,EAAA,EAAAA,EAAAwI,EAAAtI,OAAAF,IACA,CACA,GAAAmb,GAAA3S,EAAAxI,EAEAmb,GAAAjD,eAEAiD,EAAA7B,QAIApP,EAAA+U,QAAA,EACA/U,EAAAia,aAAA,IAIA3D,UAAA,SAAAjZ,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEAyH,IAAA3E,KAAAue,gBAEA3c,EAAAS,MAAAT,EAAAU,OAAAqJ,kBAAA3L,KAAAgC,EAAA2C,GAEA3E,KAAAif,KAAAta,EAAA,WAIA,IAAA,GAFA1B,GAAA0B,EAAA1B,OAAA8B,OAEAtK,EAAA,EAAAA,EAAAwI,EAAAtI,OAAAF,IACA,CACA,GAAAmb,GAAA3S,EAAAxI,EAEAmb,GAAAM,eAMA4I,UAAA,SAAAna,GAEAA,EAAAia,cAEA5e,KAAA2D,QAAA/B,EAAAiY,MAAAzgB,OAAA4G,KAAA4E,OAAAhD,EAAAkN,KAAA1V,SAEAwI,EAAAS,MAAAT,EAAAU,OAAAoJ,kBAAA1L,KAAA2E,GAEAA,EAAAhJ,OAAAoY,UAKAgL,iBAAA,SAAApa,GAEA,MAAA,UAAAiR,GAEAjR,EAAAkR,UAAAD,KAEAhU,EAAAS,MAAAT,EAAAU,OAAAmJ,kBAAAzL,KAAA2E,EAAAiR,GAEA5V,KAAAsf,SAAA3a,EAAAiR,MAKAgI,YAAA,SAAAjZ,GAEA,MAAA,UAAAiR,GAEA,GAAAiF,GAAAlW,EAAAkW,QACA/X,EAAA8S,EAAAjG,MAEA7M,KAAA+X,KAEAjZ,EAAAS,MAAAT,EAAAU,OAAAkJ,wBAAAxL,KAAA2E,EAAAiR,GAEA5V,KAAAsf,SAAA3a,EAAAiR,GAAA,SAEAiF,GAAA/X,MAKAkc,eAAA,SAAAra,GAEA,MAAA,UAAAyW,GAEA,GAAAxF,GAAAwF,EAAAnY,OAAA8U,OAAApT,EAAAkR,WACA5S,EAAA2S,EAAA7Q,MAEAnD,GAAAS,MAAAT,EAAAU,OAAAiJ,kBAAAvL,KAAA2E,EAAA1B,GAEAjD,KAAAif,KAAAta,EAAA,WAEA,IAAA,GAAAlK,GAAA,EAAAA,EAAAwI,EAAAtI,OAAAF,IAEAuF,KAAAsf,SAAA3a,EAAA1B,EAAAxI,QAMA6kB,SAAA,SAAA3a,EAAAiR,EAAA2J,GAEA,GAAAhjB,GAAAoI,EAAA1B,OACAH,EAAA8S,EAAAjG,OACA0P,GAAA9iB,EAAAkU,IAAA3N,EAqBA,OAnBAuc,KAEAzd,EAAAS,MAAAT,EAAAU,OAAAgJ,YAAAtL,KAAA2E,EAAAiR,GAEArZ,EAAA4Q,IAAArK,EAAA8S,GAEAA,EAAArU,IAAArI,EAAAyJ,OAAAwR,QAAAxP,EAAA8Y,WACA7H,EAAArU,IAAArI,EAAAyJ,OAAA8R,kBAAA9P,EAAAgZ,SAEA3d,KAAAge,iBAAArZ,EAAAhJ,OAAAia,GAEA5V,KAAAsR,KAAA3M,GAEA4a,GAEAvf,KAAA8e,UAAAna,IAIA0a,GAGAR,YAAA,SAAAla,EAAAiR,EAAA4J,GAEA,GAAAjjB,GAAAoI,EAAA1B,OACA4X,EAAAlW,EAAAkW,QACA/X,EAAA8S,EAAAjG,MAEApT,GAAAkU,IAAA3N,KAEAlB,EAAAS,MAAAT,EAAAU,OAAA8I,eAAApL,KAAA2E,EAAAiR,GAEArZ,EAAA2Q,OAAApK,GAEA8S,EAAAlU,KAAAxI,EAAAyJ,OAAAwR,QAAAxP,EAAA8Y,WACA7H,EAAAlU,KAAAxI,EAAAyJ,OAAA8R,kBAAA9P,EAAAgZ,UAEA6B,GAAAxf,KAAAue,eAEA3I,EAAAM,UAGAlW,KAAAke,gBAAAtI,GACA5V,KAAAsR,KAAA3M,GACA3E,KAAA8e,UAAAna,UAGAkW,GAAA/X,IAGA4b,eAAA,WAEA,GAAAP,GAAAne,KAAAme,QACA9C,EAAArb,KAAAgC,MAAA3I,SAAAyJ,GAEA,IAAAxJ,EAAA6kB,GAEA,MAAArkB,GAAAuhB,GAEAjhB,EAAAihB,EAAA8C,MAAA,EAIA9C,IAAA8C,CAKA,IAAArkB,EAAAuhB,GACA,CACA,IAAA,GAAA5gB,GAAA,EAAAA,EAAA0jB,EAAAxjB,OAAAF,IAEA,GAAAL,EAAAihB,EAAA8C,EAAA1jB,OAAA,EAEA,OAAA,CAGA,QAAA,EAIA,MAAAL,GAAA+jB,EAAA9C,MAAA,GAOA2C,iBAAA,SAAAhc,EAAA4T,GAEA,GAAAuI,GAAAne,KAAAme,QACA/B,EAAApa,EAAA8C,IAAAhC,GAEA9C,MAAAyb,aAAA7F,EAAAuI,EAAAnc,EAAAoa,IAGA8B,gBAAA,SAAAtI,GAEA,GAAA5V,KAAAye,SACA,CACA,GAAAN,GAAAne,KAAAme,OAEAne,MAAAsb,YAAA1F,EAAAuI,KAIAf,iBAAA,SAAApb,GAEA,GAAAmc,GAAAne,KAAAme,QACA/B,EAAApa,EAAA8C,IAAAhC,GAEA,OAAA,UAAA8S,GAEA,MAAA1a,GAAA0a,EAAAuI,EAAAnc,EAAAoa,KAIA6B,YAAA,SAAAtZ,GAEA3E,KAAAL,WAEAgF,EAAAhJ,OAAAqE,KAAA9C,MAAAyH,EAAA1B,OAAA8B,SAIAuM,KAAA,SAAA3M,GAEA,GAAAiR,GAAAjR,EAAA1B,MAEA0B,GAAAga,eAEA/I,EAAAnE,SAAAzR,KAAA1F,cAEAsH,EAAAS,MAAAT,EAAAU,OAAA+I,aAAArL,KAAA2E,GAEAiR,EAAAtE,KAAAtR,KAAA1F,aAGAqK,EAAAhJ,OAAAgG,SAAAzI,EAAAyJ,OAAA4R,gBAAAvU,KAAA2E,QCnkBA/C,EAAA0C,UAAAmb,eAAA1Z,GAEAA,GAAAlD,UAEAb,MAAAvJ,EACAkL,MAAA/B,EAAAiY,MAAAC,KACAlV,KAAAhD,EAAAkN,KAAAgL,KACAG,MAAA,EACAta,UAAA,EACA+f,QAAAjnB,EACA2jB,MAAA,KACA+B,QAAA,KACA7jB,WAAA,KACAyJ,sBAAA,EACAwa,eAAA,EACAC,aAAA,GAGA9iB,EAAA,GAAA8I,GAAAuB,IAGAmU,YAAA,SAAApY,EAAAqY,EAAA3d,GAEA,MAAAuJ,IAAAlD,UAGA8X,cAAA,SAAA7Y,EAAAqY,EAAA3d,GAEA,GAAA4e,GAAApb,KAAAgC,MAAA3I,QAEA2G,MAAAme,QAAAne,KAAAme,SAAA/C,EAAAle,KAAA,IAAAke,EAAAtY,IACA9C,KAAAoc,MAAApc,KAAAoc,OAAAta,EAAA5E,KAAA,IAAA4E,EAAAgB,IACA9C,KAAA1F,WAAA+E,EAAAW,KAAA1F,WAAA0F,KAAA+D,sBAEA5K,EAAAqD,EAAAkjB,SAMA1f,KAAA2f,WAAAnjB,EAAAkjB,SAJA9d,EAAAuE,IAAA3J,EAAAkjB,QAAA1f,KAAA2f,WAAA3f,MAOA4B,EAAAS,MAAAT,EAAAU,OAAAuJ,iBAAA7L,OAGA2f,WAAA,SAAAD,GAEA1f,KAAA0f,QAAAA,EAEA1f,KAAA4a,wBAGAE,WAAA,SAAA9Y,GAEA,GAAAmb,GAAAnd,KACAob,EAAApb,KAAAgC,MAAA3I,SACAumB,EAAA5f,KAAA0f,QAAArmB,SACAwc,EAAA7V,KAAAod,iBAAApb,GACAub,EAAAvb,EAAAhC,KAAA9C,MAEAyH,EAAA3C,EAAA4S,WAAA5U,KAAA9C,OAEAvB,OAAAqG,EACA6T,UAAAA,EACA0H,QAAAA,EACA1C,WACA5X,OAAA,GAAAC,GACA2c,SAAA,GAAA3c,GACAwW,QAAA,EACAiF,cAAA,EACAC,aAAA,EAEAnB,UAAA,WAEA7b,EAAAS,MAAAT,EAAAU,OAAAwJ,yBAAAqR,EAAAnb,EAAAhC,KAAA2E,GAEAwY,EAAA0B,YAAAla,EAAA3E,OAGA2d,QAAA,WAEAhZ,EAAA+U,SAKA9X,EAAAS,MAAAT,EAAAU,OAAAyJ,uBAAAoR,EAAAnb,EAAAhC,KAAA2E,GAEAwY,EAAA7L,KAAA3M,GACAwY,EAAA2B,UAAAna,KAGAmb,iBAAA,WAEAle,EAAAS,MAAAT,EAAAU,OAAA0J,8BAAAmR,EAAAnb,EAAAhC,KAAA2E,GAEAwY,EAAA4C,uBAAApb,EAAA3E,OAMAgC,GAAA2N,OAGAiQ,EAAA7f,GAAAgC,EAAAY,OAAA8L,WAAAzO,KAAA+e,iBAAApa,GAAA3E,KAGA,IAAA4V,GAAAjR,EAAA1B,OAAA8B,MAuBA,IArBA6Q,EAAAT,IAAA,SAAAjF,GAEAiN,EAAAhI,IAAAnT,EAAAkO,IAGA0F,EAAAL,OAAA,SAAArF,GAEAiN,EAAA5H,OAAAvT,EAAAkO,IAGA0F,EAAAF,SAAA,SAAAxF,GAEAiN,EAAAzH,SAAA1T,EAAAkO,IAGA0F,EAAAC,UAAA,SAAA3F,GAEA,MAAAiN,GAAAtH,UAAA7T,EAAAkO,IAIApW,EAAAyjB,GACA,CACA3b,EAAAS,MAAAT,EAAAU,OAAA2J,oBAAAjM,KAAAgC,EAAA2C,EAAA4Y,EAEA,KAAA,GAAA9iB,GAAA,EAAAA,EAAA8iB,EAAA5iB,OAAAF,IACA,CACA,GAAAyV,GAAAqN,EAAA9iB,GACAqI,EAAAsY,EAAA5K,kBAAAN,EAEAvL,GAAAkW,QAAA/X,IAAA,EACAsY,EAAAnL,UAAAC,EAAAlQ,KAAA4d,YAAAjZ,GAAA3E,WAKA4B,GAAAS,MAAAT,EAAAU,OAAA4J,2BAAAlM,KAAAgC,EAAA2C,GAEAib,EAAAhQ,MAAA5P,KAAAgf,eAAAra,GAAA3E,KAIAA,MAAAie,YAAAtZ,IAGAsa,KAAA,SAAAta,EAAA9E,GAEA8E,EAAAga,cAAA,EACAha,EAAAia,aAAA,EAEA/e,EAAA9G,MAAAiH,MAEA2E,EAAAga,cAAA,EACAha,EAAAia,aAAA,EAEA5e,KAAAsR,KAAA3M,GACA3E,KAAA8e,UAAAna,IAGAwQ,IAAA,SAAAnT,EAAAkO,GAEA,GAAAzR,EAAAyR,GAEAlQ,KAAA0V,SAAA1T,OAGA,CACA,GAAAoZ,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,MACAgiB,EAAAva,EAAA1B,OACAkc,EAAA,GAAAjc,EAEA,IAAAlD,KAAAmb,aAAAjL,GAEA,IAAA,GAAAzV,GAAA,EAAAA,EAAAyV,EAAAvV,OAAAF,IACA,CACA,GAAAmb,GAAAwF,EAAA9K,WAAAJ,EAAAzV,GAEAmb,IAEAuJ,EAAAhS,IAAAyI,EAAAjG,OAAAiG,OAKA,CACA,GAAAA,GAAAwF,EAAA9K,WAAAJ,EAEA0F,IAEAuJ,EAAAhS,IAAAyI,EAAAjG,OAAAiG,GAIA,GAAAwJ,GAAAF,EAAAxH,SAAAyH,GAAApa,OACAsa,EAAAF,EAAAzH,SAAAwH,GAAAna,MAEA/E,MAAAif,KAAAta,EAAA,WAEA,IAAA,GAAAlK,GAAA,EAAAA,EAAA4kB,EAAA1kB,OAAAF,IAEAuF,KAAAsf,SAAA3a,EAAA0a,EAAA5kB,GAGA,KAAA,GAAAA,GAAA,EAAAA,EAAA2kB,EAAAzkB,OAAAF,IAEAuF,KAAA6e,YAAAla,EAAAya,EAAA3kB,QAMA8a,OAAA,SAAAvT,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,IAAA8C,KAAAmb,aAAAjL,GAEAlQ,KAAAif,KAAAta,EAAA,WAEA,IAAA,GAAAlK,GAAA,EAAAA,EAAAyV,EAAAvV,OAAAF,IACA,CACA,GAAAmb,GAAAwF,EAAA9K,WAAAJ,EAAAzV,GAEAmb,IAEA5V,KAAAsf,SAAA3a,EAAAiR,UAKA,IAAAzb,EAAA+V,GACA,CACA,GAAA0F,GAAAwF,EAAA9K,WAAAJ,EAEA0F,IAEA5V,KAAAsf,SAAA3a,EAAAiR,KAKAF,SAAA,SAAA1T,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,IAAA8C,KAAAmb,aAAAjL,GAEAlQ,KAAAif,KAAAta,EAAA,WAEA,IAAA,GAAAlK,GAAA,EAAAA,EAAAyV,EAAAvV,OAAAF,IACA,CACA,GAAAmb,GAAAwF,EAAA9K,WAAAJ,EAAAzV,GAEAmb,IAEA5V,KAAA6e,YAAAla,EAAAiR,UAKA,IAAAzb,EAAA+V,GACA,CACA,GAAA0F,GAAAwF,EAAA9K,WAAAJ,EAEA0F,IAEA5V,KAAA6e,YAAAla,EAAAiR,OAOA,KAAA,GAFApT,GAAAmC,EAAA1B,OAAA8B,OAEAtK,EAAA+H,EAAA7H,OAAA,EAAAF,GAAA,EAAAA,IAEAuF,KAAA6e,YAAAla,EAAAnC,EAAA/H,KAKAob,UAAA,SAAA7T,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,MACAgiB,EAAAva,EAAA1B,MAEA,IAAAjD,KAAAmb,aAAAjL,GACA,CACA,IAAA,GAAAzV,GAAA,EAAAA,EAAAyV,EAAAvV,OAAAF,IACA,CACA,GAAAmb,GAAAwF,EAAA9K,WAAAJ,EAAAzV,GAEA,IAAAmb,IAAAsJ,EAAAzO,IAAAmF,EAAAjG,QAEA,OAAA,EAIA,MAAAO,GAAAvV,OAAA,EAEA,GAAAR,EAAA+V,GACA,CACA,GAAA0F,GAAAwF,EAAA9K,WAAAJ,EAEA,OAAA0F,IAAAsJ,EAAAzO,IAAAmF,EAAAjG,QAGA,OAAA,GAGAxJ,IAAA,SAAAnE,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,OAAAyH,GAAA1B,OAAA8B,QAGAwK,OAAA,SAAAvN,EAAA6V,EAAApB,GAEA,GAAA9R,GAAA3C,EAAA4S,WAAA5U,KAAA9C,MACA+e,EAAAxF,EAAAzW,KAAA4E,KAAA5E,KAAA2D,KAEAgB,IAAAsX,IAEApE,EAAA7X,KAAA9C,MAAA8C,KAAA+b,eAAApX,EAAA1B,OAAA8B,OAAAkX,KAIAjB,SAAA,SAAAhZ,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,IAAAyH,GAAA3E,KAAAwe,YACA,CACA5c,EAAAS,MAAAT,EAAAU,OAAA0d,oBAAAhgB,KAAAgC,EAAA2C,GAEAA,EAAA+U,QAAA,EACA/U,EAAAia,aAAA,CAIA,KAAA,GAFA3b,GAAA0B,EAAA1B,OAAA8B,OAEAtK,EAAA,EAAAA,EAAAwI,EAAAtI,OAAAF,IACA,CACA,GAAAmb,GAAA3S,EAAAxI,EAEAmb,GAAAjD,eAEAiD,EAAA7B,QAIApP,EAAA+U,QAAA,EACA/U,EAAAia,aAAA,IAIA3D,UAAA,SAAAjZ,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEAyH,IAAA3E,KAAAue,gBAEA3c,EAAAS,MAAAT,EAAAU,OAAAoK,sBAAA1M,KAAAgC,EAAA2C,GAEA3E,KAAAif,KAAAta,EAAA,WAIA,IAAA,GAFA1B,GAAA0B,EAAAkb,SAAA9a,OAEAtK,EAAA,EAAAA,EAAAwI,EAAAtI,OAAAF,IACA,CACA,GAAAmb,GAAA3S,EAAAxI,EAEAmb,GAAAM,eAMA4I,UAAA,SAAAna,GAEAA,EAAAia,cAEA5e,KAAA2D,QAAA/B,EAAAiY,MAAAzgB,OAAA4G,KAAA4E,OAAAhD,EAAAkN,KAAA1V,SAEAwI,EAAAS,MAAAT,EAAAU,OAAAmK,sBAAAzM,KAAA2E,GAEAA,EAAAhJ,OAAAoY,UAKAgL,iBAAA,SAAApa,GAEA,MAAA,UAAA+a,GAEA/a,EAAAkR,UAAA6J,KAAA/a,EAAAkb,SAAApP,IAAAiP,EAAA/P,UAEA/N,EAAAS,MAAAT,EAAAU,OAAAkK,sBAAAxM,KAAA2E,EAAA+a,GAEA1f,KAAAigB,oBAAAtb,EAAA+a,MAKA9B,YAAA,SAAAjZ,GAEA,MAAA,UAAAiR,GAEA,GAAAiF,GAAAlW,EAAAkW,QACAQ,EAAAzF,EAAAjG,MAEA0L,KAAAR,KAEAjZ,EAAAS,MAAAT,EAAAU,OAAAiK,4BAAAvM,KAAA2E,EAAAiR,GAEA5V,KAAAsf,SAAA3a,EAAAiR,GAAA,SAEAiF,GAAAQ,MAKA2D,eAAA,SAAAra,GAEA,MAAA,UAAAib,GAEA,GAAAM,GAAAN,EAAA3c,OACAkd,EAAAD,EAAAnI,OAAApT,EAAAkR,WACAgK,EAAAM,EAAApb,MAEA,KAAA8a,EAAAllB,SAKAiH,EAAAS,MAAAT,EAAAU,OAAAgK,sBAAAtM,KAAA2E,EAAAkb,GAEA7f,KAAAif,KAAAta,EAAA,WAEA,IAAA,GAAAlK,GAAA,EAAAA,EAAAolB,EAAAllB,OAAAF,IAEAuF,KAAAigB,oBAAAtb,EAAAkb,EAAAplB,SAMA6kB,SAAA,SAAA3a,EAAAiR,EAAA2J,GAEA,GAAAF,GAAArf,KAAAogB,eAAAzb,EAAAiR,EAAA2J,EAOA,OALAF,IAEArf,KAAAqgB,WAAA1b,EAAAiR,GAGAyJ,GAGAgB,WAAA,SAAA1b,EAAAiR,GAEA,GAAAgK,GAAA5f,KAAA0f,QAAArmB,SACAinB,EAAAtgB,KAAAugB,iBAAA5b,EAAAiR,EAEAgK,GAAA3P,UAAAqQ,EAAAtgB,KAAAwgB,aAAA7b,GAAA3E,MAAA,IAGAwgB,aAAA,SAAA7b,GAEA,MAAA,UAAA+a,GAEA1f,KAAAygB,iBAAA9b,EAAA+a,GAAA,KAIAO,oBAAA,SAAAtb,EAAA+a,GAEA,GAAAtE,GAAApb,KAAAgC,MAAA3I,SACAgiB,EAAAD,EAAAvK,SAAA6O,EAAA1f,KAAAme,QAEA/C,GAAAnL,UAAAoL,EAAArb,KAAA0gB,sBAAA/b,EAAA+a,GAAA1f,OAGA0gB,sBAAA,SAAA/b,EAAA+a,GAEA,MAAA,UAAA9J,GAEAA,IAEA5V,KAAAygB,iBAAA9b,EAAA+a,GACA1f,KAAAogB,eAAAzb,EAAAiR,MAKA6K,iBAAA,SAAA9b,EAAA+a,EAAAiB,GAEA,GAAAd,GAAAlb,EAAAkb,SACAS,EAAAZ,EAAA/P,MAEAkQ,GAAApP,IAAA6P,KAEA1e,EAAAS,MAAAT,EAAAU,OAAAsK,qBAAA5M,KAAA2E,EAAA+a,GAEAG,EAAA1S,IAAAmT,EAAAZ,GAEAA,EAAAne,IAAArI,EAAAyJ,OAAAwR,QAAAxP,EAAAmb,kBAEAa,GAEAjB,EAAA3L,UAKAqM,eAAA,SAAAzb,EAAAiR,EAAA2J,GAEA,GAAAvD,GAAArX,EAAA1B,OACAoY,EAAAzF,EAAAjG,OACA0P,GAAArD,EAAAvL,IAAA4K,EAmBA,OAjBAgE,KAEAzd,EAAAS,MAAAT,EAAAU,OAAA+J,gBAAArM,KAAA2E,EAAAiR,GAEAoG,EAAA7O,IAAAkO,EAAAzF,GAEAA,EAAArU,IAAArI,EAAAyJ,OAAAwR,QAAAxP,EAAA8Y,WACA7H,EAAArU,IAAArI,EAAAyJ,OAAA8R,kBAAA9P,EAAAgZ,SAEA3d,KAAAsR,KAAA3M,GAEA4a,GAEAvf,KAAA8e,UAAAna,IAIA0a,GAGAR,YAAA,SAAAla,EAAAiR,EAAA4J,GAEA,GAAAnE,GAAAzF,EAAAjG,MAEA3P,MAAA4gB,oBAAAjc,EAAA0W,IAEArb,KAAA6gB,cAAAlc,EAAAiR,EAAA4J,IAIAqB,cAAA,SAAAlc,EAAAiR,EAAA4J,GAEA,GAAAI,GAAA5f,KAAA0f,QAAArmB,SACAynB,EAAA9gB,KAAAugB,iBAAA5b,EAAAiR,GACA9S,EAAA8c,EAAA3O,OAAA6P,GACAjB,EAAAlb,EAAAkb,SACAH,EAAAG,EAAA1Z,IAAArD,EAEA9C,MAAA+gB,oBAAApc,EAAA+a,EAAA9J,GAAA,IAGAmK,uBAAA,SAAApb,EAAA+a,GAEA,GAAAtE,GAAApb,KAAAgC,MAAA3I,SACAgiB,EAAAD,EAAAvK,SAAA6O,EAAA1f,KAAAme,QAEAne,MAAA+gB,oBAAApc,EAAA+a,IAEA1f,KAAA4gB,oBAAAjc,EAAA0W,IAIA0F,oBAAA,SAAApc,EAAA+a,EAAA9J,EAAAoL,GAEA,GAAA5B,KAAAM,CAEA,IAAAN,EACA,CACAxd,EAAAS,MAAAT,EAAAU,OAAAuK,wBAAA7M,KAAA2E,EAAA+a,EAAA9J,EAEA,IAAAiK,GAAAlb,EAAAkb,SACAS,EAAAZ,EAAA/P,MAEA+P,GAAAhe,KAAAxI,EAAAyJ,OAAAwR,QAAAxP,EAAAmb,kBAEAkB,GAEAtB,EAAAxJ,UAGA2J,EAAA3S,OAAAoT,GAGA,MAAAlB,IAGAwB,oBAAA,SAAAjc,EAAA0W,GAEA,GAAAR,GAAAlW,EAAAkW,QACAmB,EAAArX,EAAA1B,OACA2S,EAAAoG,EAAA7V,IAAAkV,EAiBA,OAfAzF,KAEAhU,EAAAS,MAAAT,EAAAU,OAAA6J,mBAAAnM,KAAA2E,EAAAiR,GAEAoG,EAAA9O,OAAAmO,GAEAzF,EAAAlU,KAAAxI,EAAAyJ,OAAAwR,QAAAxP,EAAA8Y,WACA7H,EAAAlU,KAAAxI,EAAAyJ,OAAA8R,kBAAA9P,EAAAgZ,SAEA3d,KAAAsR,KAAA3M,GACA3E,KAAA8e,UAAAna,UAGAkW,GAAAQ,GAEAzF,GAGAwH,iBAAA,SAAApb,GAEA,GAAAmc,GAAAnc,EAAA8C,IAAAhC,IACAsZ,EAAApc,KAAAoc,KAEA,OAAA,UAAAsD,GAEA,MAAAxkB,GAAAwkB,EAAAtD,EAAApa,EAAAmc,KAIAF,YAAA,SAAAtZ,GAEA3E,KAAAL,WAEAgF,EAAAhJ,OAAAqE,KAAA9C,MAAAyH,EAAA1B,OAAA8B,SAIAuM,KAAA,SAAA3M,GAEA,GAAAiR,GAAAjR,EAAA1B,MAEA0B,GAAAga,eAEA/I,EAAAnE,SAAAzR,KAAA1F,cAEAsH,EAAAS,MAAAT,EAAAU,OAAA8J,iBAAApM,KAAA2E,GAEAiR,EAAAtE,KAAAtR,KAAA1F,aAGAqK,EAAAhJ,OAAAgG,SAAAzI,EAAAyJ,OAAA4R,gBAAAvU,KAAA2E,MAIA4b,iBAAA,SAAA5b,EAAAiR,GASA,IAAA,GAPA5T,GAAA2C,EAAAhJ,OACAslB,EAAAjf,EAAA8C,IACAsW,EAAApb,KAAAgC,MAAA3I,SACAumB,EAAA5f,KAAA0f,QAAArmB,SACAinB,EAAAV,EAAA9c,IACAA,KAEArI,EAAA,EAAAA,EAAA6lB,EAAA3lB,OAAAF,IACA,CACA,GAAAwB,GAAAqkB,EAAA7lB,EAEA,IAAAwB,IAAA+D,KAAAme,QAEArb,EAAA7G,GAAA2Z,EAAAjG,WAEA,IAAA1T,IAAA+D,KAAAoc,MAEAtZ,EAAA7G,GAAA+F,EAAA2N,WAEA,IAAA7V,EAAAkG,KAAAme,SACA,CACA,GAAA+C,GAAA9mB,EAAA4F,KAAAme,QAAAliB,GACAklB,EAAA/F,EAAAtY,IAAAoe,EAEApe,GAAA7G,GAAA2Z,EAAAuL,OAEA,IAAArnB,EAAAkG,KAAAoc,OACA,CACA,GAAA8E,GAAA9mB,EAAA4F,KAAAoc,MAAAngB,GACAklB,EAAAF,EAAAne,IAAAoe,EAEApe,GAAA7G,GAAA+F,EAAAmf,IAIA,MAAAre,MCpsBAlB,EAAA0C,UAAA8c,OAAApb,GAEAA,GAAAnD,UAEAb,MAAAvJ,EACAkL,MAAA/B,EAAAiY,MAAAC,KACAlV,KAAAhD,EAAAkN,KAAAgL,KACAG,MAAA,EACAta,UAAA,EACAyc,MAAA,KACAc,SAAA,GAGAxhB,EAAA,GAAA8I,GAAAwB,IAGAkU,YAAA,SAAApY,EAAAqY,EAAA3d,GAEA,MAAAwJ,IAAAnD,UAGA8X,cAAA,SAAA7Y,EAAAqY,EAAA3d,GAEA,GAAA4e,GAAApb,KAAAgC,MAAA3I,QAEA2G,MAAAoc,MAAApc,KAAAoc,OAAAhB,EAAAle,KAAA,IAAAke,EAAAtY,IAEAlB,EAAAS,MAAAT,EAAAU,OAAAkH,YAAAxJ,MAEAA,KAAA4a,wBAGAE,WAAA,SAAA9Y,GAEA,GAAAmb,GAAAnd,KACA6V,EAAA7V,KAAAod,iBAAApb,GACAoZ,EAAApb,KAAAgC,MAAA3I,SACAkkB,EAAAvb,EAAAhC,KAAA9C,MAEAyH,EAAA3C,EAAA4S,WAAA5U,KAAA9C,OAEAvB,OAAAqG,EACAub,QAAAA,EACA1H,UAAAA,EACA7T,MAAA,KACAwb,QAAA,EACA6D,OAAA,EACA3H,QAAA,EAEA+D,UAAA,WAEA7b,EAAAS,MAAAT,EAAAU,OAAAmH,oBAAA0T,EAAAnb,EAAA2C,GAEA3E,KAAA0d,aAAA/Y,GAAA,IAEAgZ,QAAA,WAEAhZ,EAAA+U,SAKA9X,EAAAS,MAAAT,EAAAU,OAAAoH,kBAAAyT,EAAAnb,EAAA2C,GAEAkR,EAAAlR,EAAA3C,QAEAhC,KAAA0d,aAAA/Y,KAKAlG,GAAA8e,IAAAnC,EAAAjK,UAAAnP,EAAAhC,KAAAoc,MAAAjiB,KAEAojB,EAAA5f,EAAAqE,EAAAhC,KAAAoc,OAEAxa,EAAAS,MAAAT,EAAAU,OAAAqH,sBAAA3J,KAAAgC,EAAAub,IAGA9e,EAAA8e,KAEA3b,EAAAS,MAAAT,EAAAU,OAAAsH,eAAA5J,KAAAgC,EAAAub,GAEAnC,EAAAnL,UAAAsN,EAAAvd,KAAA4d,YAAAjZ,GAAA3E,QAIAmV,IAAA,SAAAnT,EAAAkO,GAEA,GAAAzR,EAAAyR,GAEAlQ,KAAA0V,SAAA1T,OAGA,CACA,GAAAoZ,GAAApb,KAAAgC,MAAA3I,SACAuc,EAAAwF,EAAA9K,WAAAJ,GACAvL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA0Y,KAAAjR,EAAAkR,UAAAD,KAEA5V,KAAA6d,WAAAlZ,GACA3E,KAAA8d,WAAAnZ,EAAAiR,MAKAL,OAAA,SAAAvT,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAuc,EAAAwF,EAAA9K,WAAAJ,GACAvL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA0Y,IAEAjR,EAAA3C,QAAA4T,IAEA5V,KAAA6d,WAAAlZ,GACA3E,KAAA8d,WAAAnZ,EAAAiR,KAKAF,SAAA,SAAA1T,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,MACA0Y,EAAAwF,EAAA9K,WAAAJ,EAEA0F,IAAAjR,EAAA3C,QAAA4T,GAEA5V,KAAA0d,aAAA/Y,IAIAkR,UAAA,SAAA7T,EAAAkO,GAEA,GAAAkL,GAAApb,KAAAgC,MAAA3I,SACAsL,EAAA3C,EAAA4S,WAAA5U,KAAA9C,MACA0Y,EAAAwF,EAAA9K,WAAAJ,EAEA,OAAA0F,KAAAjR,EAAA3C,OAGAmE,IAAA,SAAAnE,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,OAAAyH,GAAA3C,OAGAuN,OAAA,SAAAvN,EAAA6V,EAAApB,GAEA,GAAA9R,GAAA3C,EAAA4S,WAAA5U,KAAA9C,MACA+e,EAAAxF,EAAAzW,KAAA4E,KAAA5E,KAAA2D,KAEAgB,IAAAsX,IAEApE,EAAA7X,KAAA9C,MAAA8C,KAAAmc,UAAAxX,EAAA3C,MAAAia,KAIAlB,QAAA,SAAA/Y,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEA,IAAAyH,GAAAA,EAAA3C,MACA,CACA,GAAA4T,GAAAjR,EAAA3C,OAEA2C,EAAAkR,UAAAD,IAKAjR,EAAA0c,OAAAzL,EAAAjD,iBAEA/Q,EAAAS,MAAAT,EAAAU,OAAAyH,eAAA/J,KAAAgC,EAAA2C,GAEAA,EAAA+U,QAAA,EACA9D,EAAA7B,QACApP,EAAA+U,QAAA,EACA/U,EAAA0c,OAAA,KAKAnG,WAAA,SAAAlZ,GAEA,GAAA2C,GAAA3C,EAAA4S,WAAA5U,KAAA9C,KAEAyH,IAEA3E,KAAAkd,UAEAtb,EAAAS,MAAAT,EAAAU,OAAA0H,kBAAAhK,KAAAgC,EAAA2C,GAEA3E,KAAA6d,WAAAlZ,KAKAmZ,WAAA,SAAAnZ,EAAAiR,GAEA5V,KAAA+d,SAAApZ,EAAAiR,GACA5V,KAAAge,iBAAArZ,EAAAhJ,OAAAia,GACA5V,KAAAie,YAAAtZ,IAGA+Y,aAAA,SAAA/Y,EAAA2c,GAEAthB,KAAA6d,WAAAlZ,EAAA2c,GACAthB,KAAAke,gBAAAvZ,EAAAhJ,QACAqE,KAAAie,YAAAtZ,IAGAkZ,WAAA,SAAAlZ,EAAA2c,GAEA,GAAA1L,GAAAjR,EAAA3C,KAEA4T,KAEAhU,EAAAS,MAAAT,EAAAU,OAAAuH,mBAAA7J,KAAA2E,GAEAiR,EAAAlU,KAAAxI,EAAAyJ,OAAA8P,MAAA9N,EAAAgZ,SACA/H,EAAAlU,KAAAxI,EAAAyJ,OAAAwR,QAAAxP,EAAA8Y,WAEA6D,GAEA1L,EAAAM,UAGAvR,EAAA3C,MAAA,KACA2C,EAAA0c,OAAA,EACA1c,EAAA6Y,QAAA,IAIAO,SAAA,SAAApZ,EAAAiR,GAEAA,EAAArU,IAAArI,EAAAyJ,OAAA8P,MAAA9N,EAAAgZ,QAAA3d,MACA4V,EAAArU,IAAArI,EAAAyJ,OAAAwR,QAAAxP,EAAA8Y,UAAAzd,MAEA2E,EAAA3C,MAAA4T,EACAjR,EAAA0c,OAAA,EACA1c,EAAA6Y,QAAA,EAEA5b,EAAAS,MAAAT,EAAAU,OAAAwH,iBAAA9J,KAAA2E,IAGAiZ,YAAA,SAAAjZ,GAEA,MAAA,UAAAiR,GAEAhU,EAAAS,MAAAT,EAAAU,OAAA6H,cAAAnK,KAAA2E,EAAAhJ,OAAAgJ,EAAAiR,GAEAjR,EAAA6Y,UAAA,IAEA5H,GAEA5V,KAAA+d,SAAApZ,EAAAiR,GACA5V,KAAAge,iBAAArZ,EAAAhJ,OAAAia,IAIA5V,KAAAke,gBAAAvZ,EAAAhJ,QAGAgJ,EAAA6Y,QAAA,EAEAxd,KAAAie,YAAAtZ,MAKAyY,iBAAA,SAAApb,GAEA,GAAAoZ,GAAApb,KAAAgC,MAAA3I,SACA+iB,EAAApc,KAAAoc,MACA+B,EAAA/C,EAAAtY,GAEA,OAAA,UAAA8S,GAEA,MAAA1a,GAAA8G,EAAAoa,EAAAxG,EAAAuI,KAIAD,gBAAA,SAAAlc,GAEA,GAAAoa,GAAApc,KAAAoc,KAEAxa,GAAAS,MAAAT,EAAAU,OAAA2H,iBAAAjK,KAAAgC,EAAAoa,GAEApc,KAAAsb,YAAAtZ,EAAAoa,IAGA4B,iBAAA,SAAAhc,EAAA4T,GAEA,GAAAwF,GAAApb,KAAAgC,MAAA3I,SACA+iB,EAAApc,KAAAoc,MACA+B,EAAA/C,EAAAtY,GAEAlB,GAAAS,MAAAT,EAAAU,OAAA4H,kBAAAlK,KAAAgC,EAAAoa,EAAAxG,EAAAuI,GAEAne,KAAAyb,aAAAzZ,EAAAoa,EAAAxG,EAAAuI,IAGAF,YAAA,SAAAtZ,GAEA,GAAA3E,KAAAL,SACA,CACA,GAAAqC,GAAA2C,EAAAhJ,OACAia,EAAAjR,EAAA3C,KAEAA,GAAAhC,KAAA9C,QAAA0Y,IAEA5T,EAAAhC,KAAA9C,MAAA0Y,EAEA5T,EAAAL,SAAAzI,EAAAyJ,OAAA4R,gBAAAvU,KAAA2E,SMhUAnM,EAAAoJ,MAAAA,EAGApJ,EAAAoJ,MAAAxI,MAAAF,EACAV,EAAAoJ,MAAAvI,SAAA0I,EACAvJ,EAAAoJ,MAAA2f,SAAA/c,EACAhM,EAAAoJ,MAAA4f,UAAAtc,EACA1M,EAAAoJ,MAAA6f,IAAAve,EAGA1K,EAAAoJ,MAAA3G,KAAAA,EACAzC,EAAAoJ,MAAAxH,QAAAA,EACA5B,EAAAoJ,MAAA1G,WAAAA,EACA1C,EAAAoJ,MAAAlG,OAAAA,EACAlD,EAAAoJ,MAAA9F,SAAAA,EACAtD,EAAAoJ,MAAA1F,KAAAA,EACA1D,EAAAoJ,MAAAvE,KAAAA,EACA7E,EAAAoJ,MAAAjE,KAAAA,EACAnF,EAAAoJ,MAAAhF,KAAAA,EACApE,EAAAoJ,MAAAzD,KAAAA,EACA3F,EAAAoJ,MAAArD,OAAAA,EACA/F,EAAAoJ,MAAAnD,QAAAA,EACAjG,EAAAoJ,MAAA5C,QAAAA,EACAxG,EAAAoJ,MAAAnG,OAAAA,EACAjD,EAAAoJ,MAAApH,aAAAA,EACAhC,EAAAoJ,MAAAvC,iBAAAA,GAEAmO","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction ClassNameReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toClassName(name)\n{\n  return name.replace( /(^.|_.)/g, ClassNameReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  model.all = function()\n  {\n    return database.getModels();\n  };\n\n  model.create = function( props )\n  {\n    return database.create( props );\n  };\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || toClassName( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toClassName( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                true,\n  cachePending:         false,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, fromStorage)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, fromStorage !== false );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      if ( fromStorage )\n      { \n        return db.putRemoteData( input, undefined, undefined, true ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (compare( a[ revision ], b[ revision ] )) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          // TODO\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( db.cache )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      if ( db.cache )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( !db.cache )\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( !db.cache )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Create the model\n  create: function(props)\n  {\n    var db = this;\n\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  },\n\n  // Save the model\n  save: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    if ( !db.cache )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal );\n    }\n  },\n\n  // Remove the model \n  remove: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    if ( !db.cache )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ] );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue)\n  {\n    this.$set( setProperties, setValue );\n\n    this.$callRelationFunction( 'preSave' );\n\n    this.$db.save( this );\n\n    this.$callRelationFunction( 'postSave' );\n  },\n\n  $remove: function()\n  {\n    if ( this.$exists() )\n    {\n      this.$callRelationFunction( 'preRemove' );\n\n      this.$db.remove( this );\n\n      this.$callRelationFunction( 'postRemove' );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $callRelationFunction: function(functionName)\n  {\n    var databaseRelations = this.$db.relations;\n\n    for ( var name in databaseRelations )\n    {\n      databaseRelations[ name ][ functionName ]( this );\n    }\n  },\n\n  $addOperation: function(OperationType) \n  {\n    var operation = new OperationType( this );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model)\n  {\n    this.model = model;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model );\n    }\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroRemoveCache(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveCache' ), NeuroRemoveCache,\n{\n\n  run: function(db, model)\n  {\n    model.$pendingSave = false;\n\n    db.store.remove( model.$key(), this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$deleted = true;\n    model.$pendingSave = false;\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      \n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    db.store.remove( key, this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live({\n      op: NeuroDatabase.Live.Remove,\n      key: key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Fill the key if need be\n    var key = model.$key();\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    this.tryNext( NeuroSaveRemote );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    this.tryNext( NeuroSaveRemote );\n  }\n\n});\n","function NeuroSaveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cachePending && db.cache )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroSaveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var encoded = this.encoded = model.$toJSON( true );\n    var changes = this.changes = model.$getChanges( encoded );\n    var saving = this.saving = db.fullSave ? encoded : changes;\n    var publishing = this.publishing = db.fullPublish ? encoded : changes;\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( changes ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    if ( model.$saved )\n    {\n      db.rest.update( model, saving, this.success(), this.failure() );\n    }\n    else\n    {\n      db.rest.create( model, saving, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n    var publishing = this.publishing;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    if ( !isEmpty( data ) )\n    {\n      transfer( data, saving );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( !db.cache )\n      {\n        model.$saved = {};\n      }\n      else\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live({\n      op: NeuroDatabase.Live.Save,\n      model: publishing,\n      key: this.key\n    });\n\n    if ( db.cachePending && db.cache )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$pendingSave )\n    { \n      model.$pendingSave = false;\n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ] );\n    }\n\n    pending.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n    }\n    else\n    {\n      this.handleLoad( model );\n    }\n  },\n\n  handleLoad: function(model)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  preSave: function(model)\n  {\n\n  },\n\n  postSave: function(model)\n  {\n\n  },\n\n  preRemove: function(model)\n  {\n\n  },\n\n  postRemove: function(model)\n  {\n\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var onKeyUpdate = this.handleKeyUpdate();\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onKeyUpdate: onKeyUpdate,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove();\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove(); \n          }\n          else\n          {\n            this.clearRelated( relation );   \n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n\n      model.$off( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  handleKeyUpdate: function()\n  {\n    return function onKeyUpdate(model, related, modelFields, relatedFields)\n    {\n      if ( this.local === modelFields )\n      {\n        var relation = model.$relations[ this.name ];\n\n        if ( relation && related !== relation.model )\n        {\n          this.clearModel( relation );\n          this.setModel( relation, related );\n          this.setProperty( relation );\n        }        \n      }\n    };\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          false\n};\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n  \n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var adding = this.finishAddModel( relation, related, skipCheck );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation ), this, false );\n  },\n\n  onAddThrough: function(relation)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, true );\n    };\n  },\n\n  addModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through ), this );\n  },\n\n  onAddModelFromThrough: function(relation, through)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through );\n        this.finishAddModel( relation, related );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, callSave)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, skipCheck)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    false\n};\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation, true );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation, dontRemove)\n  {\n    this.clearModel( relation, dontRemove );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, dontRemove)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        related.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [], 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {}, 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {}, 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {}, 200 );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}