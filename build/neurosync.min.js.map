{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","find.js","get.js","grab.js","grabAll.js","methods.js","query.js","ready.js","refresh.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","keys","models","NeuroModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","init","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","load","onLoadFinish","loadedSuccess","loading","callbackContext","Online","Offline","checkNeuro","cached","boot","putRemoteData","instance","createModel","instantiate","$save","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","find","firstWhere","grabModel","grabAll","ready","methods","q","sync","persistent","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","resort","clean","overwrite","decoded","revisionRejected","keyFields","mk","dk","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","has","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","filtered","op","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Blocked","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","def","evaluatedValue","$$key","$get","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","Cascade","$remove","$exists","$cancel","$clone","f","cloneKey","relationName","clone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","Local","Rest","NoLive","NoRest","Remote","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","run","finish","previousValue","finishRemove","$saving","$publish","liveRemove","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","liveSave","handleData","saveNow","Store","Key","Keys","auto","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","pendingInitials","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","initials","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page"],"mappings":"CAAA,SAAAA,EAAAC,GCWA,QAAAC,GAAAC,GAEA,MAAAA,KAAAF,EAYA,QAAAG,GAAAD,GAEA,SAAAA,GAAAA,EAAAE,aAAAF,EAAAG,MAAAH,EAAAI,OAcA,QAAAC,GAAAL,GAEA,SAAAA,GAAAA,EAAAM,UAAAL,EAAAD,IAAAA,EAAAO,oBAAAC,KAYA,QAAAC,GAAAT,GAEA,MAAA,gBAAAA,GAaA,QAAAU,GAAAV,GAEA,MAAA,gBAAAA,KAAAW,MAAAX,GAYA,QAAAY,GAAAZ,GAEA,MAAA,iBAAAA,GAYA,QAAAa,GAAAb,GAEA,MAAAA,aAAAc,MAYA,QAAAC,GAAAf,GAEA,MAAAA,aAAAgB,QAYA,QAAAC,GAAAjB,GAEA,MAAAA,aAAAkB,OAaA,QAAAC,GAAAnB,GAEA,MAAA,QAAAA,GAAA,gBAAAA,GAiBA,QAAAoB,GAAApB,EAAAqB,GAEA,MAAArB,aAAAkB,OAAAlB,EAAAA,EAAAsB,MAAAD,GAYA,QAAAE,GAAAvB,GAEA,QAAAA,IAAAF,GAAA,OAAAE,GAqBA,QAAAwB,GAAAC,EAAAzB,EAAA0B,GAIA,IAAA,GAFAC,GAAAD,GAAAE,EAEAC,EAAA,EAAAC,EAAAL,EAAAM,OAAAD,EAAAD,EAAAA,IAEA,GAAAF,EAAAF,EAAAI,GAAA7B,GAEA,MAAA6B,EAIA,QAAA,EAQA,QAAAG,MAkBA,QAAAC,GAAAC,EAAAC,GAEA,MAAA,YAEAA,EAAA/B,MAAA8B,EAAAE,YAWA,QAAAC,KAEA,MAAAC,KAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,IAGA,QAAAA,KAEA,OAAA,OAAA,EAAAC,KAAAC,UAAA,GAAAC,SAAA,IAAAC,UAAA,GAGA,QAAAC,GAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAtC,EAAAoC,GAEA,MAAAD,GAAAC,KAAAC,EAAAC,EAIA,KAAA,GAAAlB,GAAA,EAAAA,EAAAgB,EAAAd,OAAAF,IACA,CACA,GAAAmB,GAAAH,EAAAhB,GACAoB,EAAAF,EAAAlB,EAEA,KAAAqB,EAAAN,EAAAI,GAAAF,EAAAG,IAEA,OAAA,EAIA,OAAA,EAOA,QAAAE,GAAAC,EAAAC,EAAAC,GAEA,GAAArC,EAAAoC,GACA,CACA,IAAA,GAAAxB,GAAA,EAAAA,EAAAwB,EAAAtB,OAAAF,IAEA,IAAAyB,EAAAF,EAAAC,EAAAxB,KAEA,OAAA,CAIA,QAAA,EAIA,MAAAyB,GAAAF,EAAAC,IAMA,QAAAE,GAAApB,GAEA,QAAAqB,MAEA,MADAA,GAAAjD,UAAA4B,EAAA5B,UACAiD,EAGA,QAAAC,GAAAC,EAAAC,EAAAC,GAGAF,EAAAH,EAAAG,GAEAC,EAAApD,UAAA,GAAAmD,GAEAG,EAAAD,EAAAD,EAAApD,WAEAoD,EAAApD,UAAAL,YAAAyD,EAIA,QAAAG,GAAA5D,GAEA,QAAAsD,GAAAO,GAEA,MAAA7D,GAAAE,MAAA4D,KAAAD,GAKA,MAFAP,GAAAjD,UAAAL,EAAAK,UAEA,WAEA,MAAA,IAAAiD,GAAApB,YAIA,QAAA6B,GAAAP,EAAAC,EAAAC,GAGAM,KAEAT,EAAAC,EAAAC,EAAAC,GACAD,EAAAQ,OAAAL,EAAAH,KAMAD,EAAAH,EAAAG,GAGAC,EAAAQ,OAAA,WAEA,GAAAC,GAAA,GAAAV,EAGA,OAFAC,GAAAvD,MAAAgE,EAAAhC,WACAyB,EAAAD,EAAAQ,GACAA,IAMA,QAAAF,KAIA,QAAAG,MAFA,GAAAH,EAAAI,YAAAxE,EACA,CAEAuE,EAAA9D,YACA,IAAAgE,GAAA,GAAAF,EACAE,GAAAC,KAAA,GACAN,EAAAI,UAAA,IAAAC,EAAAxC,OAGA,MAAAmC,GAAAI,UAGA,QAAAT,GAAAY,EAAAC,GAEA,IAAA,GAAAC,KAAAF,GAEAC,EAAAC,GAAAF,EAAAE,EAGA,OAAAD,GAGA,QAAAE,GAAAC,EAAAhD,EAAAiD,GAEA,GAAAC,GAAAF,EAAAhD,EACAgD,GAAAhD,GAAAgD,EAAAC,GACAD,EAAAC,GAAAC,EAGA,QAAAC,GAAAC,EAAAC,EAAAC,GAEA,IAAA,GAAAR,KAAAQ,GACA,CACA,GAAAC,GAAAD,EAAAR,GACAU,EAAAH,EAAAP,EAEA,KAAAU,GAAAD,IAAAtF,EAEA,KAAA6E,GAAA,uBAEApD,GAAA8D,GAEAJ,EAAAN,GAAAU,EAIAJ,EAAAN,GAAAW,EAAAF,GAIAH,EAAAC,QAAAA,EAGA,QAAAK,GAAAC,GAEA,MAAA,KAAAA,EAAAzD,OAAAyD,EAAAC,cAAAD,EAAAE,OAAA,GAAAD,cAGA,QAAAE,GAAAC,GAEA,MAAAA,GAAAC,QAAAF,EAAAG,MAAAP,GAKA,QAAAQ,GAAAlB,GAEA,GAAAmB,GAAA5D,UAAAL,OAAA,IAAAd,EAAA4D,GAAA3D,MAAAX,UAAA0F,MAAA9F,KAAAiC,WAAAyC,CAEA,OAAA,IAAAqB,IAAAF,GAGA,QAAAG,GAAAnG,GAEA,MAAAuB,GAAAvB,GAKAK,EAAAL,GAEA,GAAAA,GAEAC,EAAAD,GAEAA,IAGAsF,EAAAtF,GAZAA,EAeA,QAAAoG,GAAAC,EAAAC,EAAAC,GAIA,IAAA,GAFAC,MAEA3E,EAAA,EAAAA,EAAAyE,EAAAvE,OAAAF,IACA,CACA,GAAA4E,GAAAH,EAAAzE,EAEA4E,KAAAJ,KAEAG,EAAAC,GAAAF,EAAAjB,EAAAe,EAAAI,IAAAJ,EAAAI,IAIA,MAAAD,GAGA,QAAAE,GAAAL,EAAAC,EAAAC,GAEA,GAAA9F,EAAA6F,GACA,CACA,GAAAK,GAAAN,EAAAC,EAEA,OAAAC,GAAAjB,EAAAqB,GAAAA,EAMA,IAAA,GAFAC,MAEA/E,EAAA,EAAAA,EAAAyE,EAAAvE,OAAAF,IACA,CACA,GAAA4E,GAAAH,EAAAzE,GACA8E,EAAAN,EAAAI,EAEAG,GAAApC,KAAA+B,EAAAjB,EAAAqB,GAAAA,GAGA,MAAAC,GAiBA,QAAAtB,GAAAtF,EAAA6G,GAEA,GAAA,OAAA7G,GAAAA,IAAAF,GAAA,gBAAAE,IAAAC,EAAAD,IAAAe,EAAAf,GAEA,MAAAA,EAGA,IAAAiB,EAAAjB,GACA,CAGA,IAAA,GAFA8G,MAEAjF,EAAA,EAAAA,EAAA7B,EAAA+B,OAAAF,IAEAiF,EAAAtC,KAAAc,EAAAtF,EAAA6B,GAAAgF,GAGA,OAAAC,GAGA,GAAAjG,EAAAb,GAEA,MAAA,IAAAc,MAAAd,EAAA+G,UAGA,IAAAD,KAEA,KAAA,GAAAnC,KAAA3E,IAEA6G,GAAA,MAAAlC,EAAAe,OAAA,MAEAoB,EAAAnC,GAAAW,EAAAtF,EAAA2E,GAAAkC,GAIA,OAAAC,GAGA,QAAAE,GAAAC,EAAAC,EAAAZ,EAAA5E,GAIA,IAAA,GAFAyF,MAEAtF,EAAA,EAAAA,EAAAyE,EAAAvE,OAAAF,IACA,CACA,GAAA4E,GAAAH,EAAAzE,EAEAH,GAAAuF,EAAAR,GAAAS,EAAAT,MAEAU,EAAAV,GAAAnB,EAAA2B,EAAAR,KAIA,MAAAU,GAGA,QAAAC,GAAApH,GAEA,GAAAiB,EAAAjB,IAAAS,EAAAT,GAEA,MAAAA,GAAA+B,MAEA,IAAAZ,EAAAnB,GACA,CACA,GAAAqH,GAAA,CAEA,KAAA,GAAA1C,KAAA3E,GAEAqH,GAGA,OAAAA,GAGA,MAAA,GAGA,QAAAC,GAAAtH,GAEA,GAAA,OAAAA,GAAA,SAAAA,GAAA,IAAAA,EAEA,OAAA,CAEA,IAAAiB,EAAAjB,IAAAS,EAAAT,GAEA,MAAA,KAAAA,EAAA+B,MAEA,IAAAlB,EAAAb,GAEA,MAAA,KAAAA,EAAA+G,WAAApG,MAAAX,EAAA+G,UAEA,IAAA5F,EAAAnB,GACA,CACA,IAAA,GAAA2E,KAAA3E,GAEA,OAAA,CAEA,QAAA,EAGA,OAAA,EAGA,QAAA4B,GAAAiD,EAAA0C,GAEA,MAAA1C,KAAA0C,EAGA,QAAAC,GAAA3C,EAAA0C,GAEA,MAAA,KAAAE,EAAA5C,EAAA0C,GAGA,QAAArE,GAAA2B,EAAA0C,GAEA,GAAA1C,IAAA0C,EAAA,OAAA,CACA,IAAA,OAAA1C,GAAA,OAAA0C,EAAA,OAAA,CACA,IAAA1C,IAAAA,GAAA0C,IAAAA,EAAA,OAAA,CAEA,IAAAG,SAAA7C,GACA8C,QAAAJ,EACA,IAAAG,IAAAC,EAAA,OAAA,CAEA,IAAAC,GAAA3G,EAAA4D,GACAgD,EAAA5G,EAAAsG,EACA,IAAAK,IAAAC,EAAA,OAAA,CAEA,IAAAD,EAAA,CACA,GAAA/C,EAAA9C,SAAAwF,EAAAxF,OAAA,OAAA,CACA,KAAA,GAAAF,GAAA,EAAAA,EAAAgD,EAAA9C,OAAAF,IACA,IAAAqB,EAAA2B,EAAAhD,GAAA0F,EAAA1F,IACA,OAAA,CAGA,QAAA,EAGA,GAAAhB,EAAAgE,GACA,MAAAhE,GAAA0G,IAAArE,EAAA2B,EAAAkC,UAAAQ,EAAAR,UAEA,IAAAhG,EAAA8D,GACA,MAAA9D,GAAAwG,IAAA1C,EAAApC,aAAA8E,EAAA9E,UAGA,IAAA,WAAAiF,EAAA,CACA,IAAA,GAAAjB,KAAA5B,GACA,KAAA,MAAA4B,EAAAf,OAAA,IAAAzF,EAAA4E,EAAA4B,KACAA,IAAAc,IAAArE,EAAA2B,EAAA4B,GAAAc,EAAAd,KACA,OAAA,CAIA,KAAA,GAAAA,KAAAc,GACA,KAAA,MAAAd,EAAAf,OAAA,IAAAzF,EAAAsH,EAAAd,KACAA,IAAA5B,IACA,OAAA,CAIA,QAAA,EAGA,OAAA,EAGA,QAAAiD,GAAAjD,EAAA0C,GAEA,MAAA1C,KAAA0C,EAAA,EAAAA,EAAA1C,EAAA,GAAA,EAGA,QAAA4C,GAAA5C,EAAA0C,EAAAQ,GAEA,GAAAlD,GAAA0C,EAEA,MAAA,EAGA,IAAAS,GAAAzG,EAAAsD,GACAoD,EAAA1G,EAAAgG,EAEA,OAAAS,KAAAC,EAEAD,IAAAD,GAAAE,GAAAF,EAAA,GAAA,GAGAlH,EAAAgE,KAEAA,EAAAA,EAAAkC,WAEAlG,EAAA0G,KAEAA,EAAAA,EAAAR,WAEArG,EAAAmE,IAAAnE,EAAA6G,GAEAO,EAAAjD,EAAA0C,GAEAtG,EAAA4D,IAAA5D,EAAAsG,GAEAO,EAAAjD,EAAA9C,OAAAwF,EAAAxF,QAEAnB,EAAAiE,IAAAjE,EAAA2G,GAEA1C,EAAA,GAAA,GAGAA,EAAA,IAAAqD,cAAAX,EAAA,KAGA,QAAAY,GAAAzG,EAAA0G,GAEA,IAAA1G,EAEA,OAAA,CAGA,KAAA,GAAAG,GAAA,EAAAC,EAAAsG,EAAArG,OAAA,EAAAD,EAAAD,EAAAA,IAEA,GAAAH,EAAA0G,EAAAvG,GAAAuG,EAAAvG,EAAA,IAAA,EAEA,OAAA,CAIA,QAAA,EAKA,QAAAwG,GAAAzC,EAAAlE,EAAAqG,GAEA,MAAAO,IAAAC,YAAA3C,GAAA4C,EAAA9G,EAAAqG,GAGA,QAAAU,GAAAC,EAAAhH,EAAAqG,GAEA,GAAAY,GAAAH,EAAA9G,EAAAqG,EAEA,OAAA9H,GAAAyI,GAKA,SAAA7D,EAAA0C,GAEA,GAAAJ,GAAAwB,EAAA9D,EAAA0C,EAEA,OAAA,KAAAJ,EAAAA,EAAAuB,EAAA7D,EAAA0C,IAPAoB,EAWA,QAAAH,GAAA9G,EAAAqG,GAEA,GAAA9H,EAAAyB,GAEA,MAAAA,EAEA,IAAAjB,EAAAiB,GACA,CACA,GAAAA,IAAA4G,IAAAC,YAEA,MAAAD,IAAAC,YAAA7G,EAGA,IAAA,MAAAA,EAAAgE,OAAA,GACA,CACA,GAAAkD,GAAAJ,EAAA9G,EAAAgB,UAAA,IAAAqF,EAEA,OAAA,UAAAlD,EAAA0C,GAEA,OAAAqB,EAAA/D,EAAA0C,IAGA,MAAA,KAAA7F,EAAAF,QAAA,KAEA,SAAAqD,EAAA0C,GAEA,GAAAsB,GAAAC,GAAApH,EAAAmD,GACAkE,EAAAD,GAAApH,EAAA6F,EAEA,OAAAsB,GAAAX,cAAAa,IAGA,KAAArH,EAAAF,QAAA,KAEA,SAAAqD,EAAA0C,GAEA,GAAAyB,GAAAC,GAAAvH,EAAAmD,GACAqE,EAAAD,GAAAvH,EAAA6F,EAEA,OAAAE,GAAAuB,EAAAE,EAAAnB,IAKA,SAAAlD,EAAA0C,GAEA,GAAAS,GAAAzG,EAAAsD,GAAAA,EAAAnD,GAAAmD,EACAoD,EAAA1G,EAAAgG,GAAAA,EAAA7F,GAAA6F,CAEA,OAAAE,GAAAO,EAAAC,EAAAF,IAIA,GAAA9G,EAAAS,GACA,CAGA,IAAA,GAFAkH,MAEA/G,EAAA,EAAAA,EAAAH,EAAAK,OAAAF,IAEA+G,EAAA/G,GAAA2G,EAAA9G,EAAAG,GAAAkG,EAGA,OAAA,UAAAlD,EAAA0C,GAIA,IAAA,GAFAJ,GAAA,EAEAtF,EAAA,EAAAA,EAAA+G,EAAA7G,QAAA,IAAAoF,EAAAtF,IAEAsF,EAAAyB,EAAA/G,GAAAgD,EAAA0C,EAGA,OAAAJ,IAIA,MAAA,MAKA,QAAAgC,GAAAvD,EAAAwD,GAEA,MAAAd,IAAAe,gBAAAzD,GAAA0D,EAAAF,GAGA,QAAAE,GAAAF,GAEA,MAAAnJ,GAAAmJ,GAEAA,EAEA3I,EAAA2I,GAEAA,IAAAd,IAAAe,gBAEAf,GAAAe,gBAAAD,GAGA,SAAAhG,GAEA,MAAA7B,GAAA6B,GAAAmG,WAAAnG,EAAAgG,IAAAtJ,GAKA,SAAA0J,GAEA,MAAAD,YAAAC,IAOA,QAAAC,GAAA7D,EAAAyB,EAAAqC,GAEA,MAAApB,IAAAqB,kBAAA/D,GAAAgE,EAAAvC,EAAAqC,GAGA,QAAAE,GAAAvC,EAAAqC,GAEA,GAAAzJ,EAAAoH,GAEA,MAAAA,EAEA,IAAA5G,EAAA4G,GAEA,MAAAA,KAAAiB,IAAAqB,kBAEArB,GAAAqB,kBAAAtC,GAGA,SAAAjE,GAEA,MAAAA,GAAAiE,GAGA,IAAApG,EAAAoG,GAEA,MAAA,UAAAjE,GAEA,MAAAsD,GAAAtD,EAAAiE,GAAAwC,KAAAH,GAGA,IAAAvI,EAAAkG,GACA,CACA,GAAAyC,MACAC,IAEA,KAAA,GAAApF,KAAA0C,GAEAyC,EAAAtF,KAAAG,GACAoF,EAAAvF,KAAAoF,EAAAvC,EAAA1C,GAAA+E,GAGA,OAAA,UAAAtG,GAIA,IAAA,GAFAwD,MAEA/E,EAAA,EAAAA,EAAA8C,EAAA5C,OAAAF,IAEA+E,EAAApC,KAAAuF,EAAAlI,GAAAuB,EAAA0G,EAAAjI,KAGA,OAAA+E,GAAAiD,KAAAH,IAKA,MAAA,UAAAtG,GAEA,MAAAA,IAOA,QAAA4G,GAAApE,EAAAyB,EAAArB,EAAA9C,GAEA,MAAAoF,IAAA2B,OAAArE,GAAAsE,EAAA7C,EAAArB,EAAA9C,GAGA,QAAAgH,GAAA7C,EAAAmC,EAAAtG,GAEA,GAAAiH,GAAAjH,GAAAtB,CAEA,IAAA3B,EAAAoH,GAEA,MAAAA,EAEA,IAAApG,EAAAoG,GACA,CAGA,IAAA,GAFAuB,MAEA/G,EAAA,EAAAA,EAAAwF,EAAAtF,OAAAF,IACA,CACA,GAAAuI,GAAA/C,EAAAxF,EAEA+G,GAAApE,KAAAvD,EAAAmJ,GAAAF,EAAA9J,MAAA4D,KAAAoG,GAAAF,EAAAE,IAGA,MAAA,UAAAhH,GAEA,IAAA,GAAAvB,GAAA,EAAAA,EAAA+G,EAAA7G,OAAAF,IAEA,IAAA+G,EAAA/G,GAAAuB,GAEA,OAAA,CAIA,QAAA,GAGA,MAAAjC,GAAAkG,GAEA,SAAAjE,GAEA,IAAA,GAAAuB,KAAA0C,GAEA,IAAA8C,EAAA/G,EAAAuB,GAAA0C,EAAA1C,IAEA,OAAA,CAIA,QAAA,GAGAlE,EAAA4G,GAEAA,IAAAiB,IAAA2B,OAEA3B,GAAA2B,OAAA5C,GAGA9F,EAAAiI,GAEA,SAAApG,GAEA,MAAA+G,GAAA/G,EAAAiE,GAAAmC,IAKA,SAAApG,GAEA,MAAA7B,GAAA6B,EAAAiE,KAMA,SAAAjE,GAEA,OAAA,GAOA,QAAAiH,IAAAzE,EAAA0E,GAEA,MAAAhC,IAAAiC,QAAA3E,GAAA4E,GAAAF,GAGA,QAAAE,IAAAF,GAEA,MAAArK,GAAAqK,GAEAA,EAEA7J,EAAA6J,GAEAA,IAAAhC,IAAAiC,QAEAjC,GAAAiC,QAAAD,GAGA,SAAAlH,GAEA,MAAA7B,GAAA6B,IAAA7B,EAAA6B,EAAAkH,KAKA,WAEA,OAAA,GAMA,QAAArB,IAAAwB,EAAAC,GAEA,GAAAC,IAAA,CAwCA,OAtCAF,GAAA5E,QAAAoD,GAAAnD,MAAA,SAAAnB,GAEA,GAAAgG,EAKA,GAAA1J,EAAAyJ,GACA,CACA,GAAA7I,GAAA+I,SAAAjG,EAEAhE,OAAAkB,GAMA8I,GAAA,EAJAD,EAAAA,EAAA7I,OAOA,IAAAV,EAAAuJ,GAEA,GAAA/F,IAAA+F,GACA,CACA,GAAAlB,GAAAkB,EAAA/F,EACA+F,GAAAzK,EAAAuJ,GAAAA,IAAAA,MAIAmB,IAAA,MAKAA,IAAA,IAIAA,EAAAD,EAAA,OAKA,QAAA5B,IAAA+B,EAAAH,GAEA,MAAAG,GAAAhF,QAAAiD,GAAAhD,MAAA,SAAAN,GAEA,MAAAyD,IAAAzD,EAAAkF,KAMA,QAAAI,IAAAD,GAEA,MAAA,UAAAH,GAEA,MAAA5B,IAAA+B,EAAAH,ICjmCA,QAAAK,IAAA9F,EAAA+F,EAAAC,EAAAC,GAEA,GAAAC,GAAAD,EAAA,MAAA,KACAE,EAAAF,EAAA,OAAA,KAEAjG,GAAA+F,GAAA,SAAAK,EAAAnJ,GAKA,QAAAoJ,KAEA,GAAAC,GAAAF,EAAAjL,MAAA8B,GAAAsJ,EAAApJ,UAEAmJ,MAAA,GAEAE,IAIA,QAAAA,KAEAC,IAEAF,EAAAJ,GAAAH,EAAAK,GACAI,GAAA,GAlBA,GAAAF,GAAAxH,KACA0H,GAAA,CAuBA,OAFAF,GAAAL,GAAAF,EAAAK,GAEAG,GA4BA,QAAAE,IAAA1G,EAAAiG,GAgBA,QAAAU,GAAAC,EAAAC,EAAAb,EAAAI,EAAAnJ,GAEA,IAAAjC,EAAAoL,GAEA,MAAArJ,EAGA,IAAAiJ,GAAA7J,EAAA6J,EAAA,KACAc,EAAAF,EAAAC,EAEA/L,GAAAgM,KAEAA,EAAAF,EAAAC,MAGA,KAAA,GAAAjK,GAAA,EAAAA,EAAAoJ,EAAAlJ,OAAAF,IACA,CACA,GAAAmK,GAAAf,EAAApJ,GACAoK,EAAAF,EAAAC,EAEAjM,GAAAkM,KAEAA,EAAAF,EAAAC,OAGAC,EAAAzH,MAAA6G,EAAAnJ,GAAA2J,EAAA,IAGA,MAAA,YAEA,IAAA,GAAAhK,GAAA,EAAAA,EAAAoJ,EAAAlJ,OAAAF,IAEAqK,EAAAH,EAAAd,EAAApJ,GAAAwJ,IAgBA,QAAAF,GAAAF,EAAAI,EAAAnJ,GAEA,MAAA0J,GAAA5H,KAAA,OAAAiH,EAAAI,EAAAnJ,GAcA,QAAAiK,GAAAlB,EAAAI,EAAAnJ,GAEA,MAAA0J,GAAA5H,KAAA,SAAAiH,EAAAI,EAAAnJ,GAGA,QAAAkK,GAAAnB,EAAAI,EAAAnJ,GAEA,MAAA0J,GAAA5H,KAAA,UAAAiH,EAAAI,EAAAnJ,GAIA,QAAAgK,GAAAH,EAAAM,EAAAhB,GAEA,GAAAU,GAAAM,IAAAN,GAIA,IAAA,GAFAE,GAAAF,EAAAM,GAEAvH,EAAAmH,EAAAlK,OAAA,EAAA+C,GAAA,EAAAA,IAEAmH,EAAAnH,GAAAwH,KAAAjB,GAEAY,EAAAM,OAAAzH,EAAA,GAOA,QAAA0H,GAAAnG,EAAA1B,GAEA0B,GAAA1B,IAAA0B,UAEAA,GAAA1B,GAoBA,QAAAyG,GAAAH,EAAAI,GAGA,GAAAtL,EAAAkL,GAOA,CACA,GAAAA,GAAA7J,EAAA6J,EAAA,IAGA,IAAAhL,EAAAoL,GAYA,IAAA,GAAAxJ,GAAA,EAAAA,EAAAoJ,EAAAlJ,OAAAF,IAEAqK,EAAAlI,KAAAyI,KAAAxB,EAAApJ,GAAAwJ,GACAa,EAAAlI,KAAA0I,OAAAzB,EAAApJ,GAAAwJ,GACAa,EAAAlI,KAAA2I,QAAA1B,EAAApJ,GAAAwJ,OAdA,KAAA,GAAAxJ,GAAA,EAAAA,EAAAoJ,EAAAlJ,OAAAF,IAEA2K,EAAAxI,KAAAyI,KAAAxB,EAAApJ,IACA2K,EAAAxI,KAAA0I,OAAAzB,EAAApJ,IACA2K,EAAAxI,KAAA2I,QAAA1B,EAAApJ,QAfA2K,GAAAxI,KAAA,QACAwI,EAAAxI,KAAA,UACAwI,EAAAxI,KAAA,UA4BA,OAAAA,MAIA,QAAA4I,GAAAb,EAAAM,EAAAtI,EAAA8I,GAEA,GAAAd,GAAAM,IAAAN,GACA,CAIA,IAAA,GAHAE,GAAAF,EAAAM,GACAS,IAAAC,EAEAlL,EAAA,EAAAA,EAAAoK,EAAAlK,OAAAF,IACA,CACA,GAAAwJ,GAAAY,EAAApK,EAEAwJ,IAEAA,EAAA2B,KAAAF,IAEAzB,EAAA2B,GAAAF,EACAzB,EAAAiB,GAAAlM,MAAAiL,EAAA4B,GAAAlJ,GAEAsH,IAAAY,EAAApK,KAEAA,EAAA,KAMAgL,SAEAd,GAAAM,IAcA,QAAAa,GAAAjC,EAAAlH,GAIA,IAAA,GAFAkH,GAAA7J,EAAA6J,EAAA,KAEApJ,EAAA,EAAAA,EAAAoJ,EAAAlJ,OAAAF,IACA,CACA,GAAAsL,GAAAlC,EAAApJ,EAEA+K,GAAA5I,KAAAyI,KAAAU,EAAApJ,GAAA,GACA6I,EAAA5I,KAAA0I,OAAAS,EAAApJ,GAAA,GACA6I,EAAA5I,KAAA2I,QAAAQ,EAAApJ,GAAA,GAGA,MAAAC,MA/NA,GAAAsI,GAAA,EACAW,EAAA,EACAD,EAAA,EAEAD,EAAA,CA8NA7B,IAEAjG,EAAAmI,IAAAjC,EACAlG,EAAAoI,MAAAlB,EACAlH,EAAAqI,OAAAlB,EACAnH,EAAAsI,KAAAnC,EACAnG,EAAAuI,SAAAN,IAIAjI,EAAAkG,GAAAA,EACAlG,EAAAkH,KAAAA,EACAlH,EAAAmH,MAAAA,EACAnH,EAAAmG,IAAAA,EACAnG,EAAAiI,QAAAA,GCtSA,QAAA5E,IAAApD,GAEA,GAAAA,EAAAU,OAAA0C,IAAAmF,MAEA,MAAAnF,IAAAmF,MAAAvI,EAAAU,KAGA,IAAA8H,GAAA,GAAAC,IAAAzI,GAEA9B,EAAA,GAAAwK,UAAA,mBAAAF,EAAAG,UAAA,4DA8BA,OA7BAzK,GAAA7C,UAAA,GAAAC,IAAAkN,GAEAA,EAAAI,MAAA1K,EACAA,EAAA9C,SAAAoN,EAEApF,GAAA4E,QAAA5E,GAAAyF,OAAAC,SAAA5K,EAAAsK,EAAAxI,IAEAoD,GAAAmF,MAAAC,EAAA9H,MAAAxC,EACAkF,GAAAmF,MAAAC,EAAAG,WAAAzK,EAEAkF,GAAA2F,SAEAP,EAAAQ,UAAA,SAAAC,GAEAA,GAEAT,EAAAU,eAMA9F,GAAA+F,SAAA7J,KAAAkJ,GAGApF,GAAA4E,QAAA5E,GAAAyF,OAAAO,aAAAlL,IAEAkF,GAAAiG,MAAAjG,GAAAkG,OAAAC,SAAAf,EAAAxI,GAEA9B,ECnCA,QAAAsL,IAAAC,EAAA7C,EAAA8C,GAEA,GAAAC,GAAA5O,EAAA2O,GAAAA,EACAzN,EAAAyN,IAAA3O,EAAA2O,EAAAC,KAAAD,EAAAC,IAAA7M,EACA8M,EAAA3N,EAAAyN,IAAA3O,EAAA2O,EAAAE,KAAAF,EAAAE,IAAA9M,CAEA,IAAA+M,OAAAC,eAEAD,OAAAC,eAAAL,EAAA7C,GAEAmD,cAAA,EACAC,YAAA,EACAL,IAAAA,EACAC,IAAAA,QAIA,CACA,GAAAK,GAAAR,EAAAQ,KAEAR,GAAAQ,MAAA,WAEAA,EAAA/O,MAAA4D,KAAA5B,UAEA,IAAAgN,GAAApL,KAAA8H,GAAA+C,EAAAzO,MAAA4D,MAEAqL,EAAA,WAEA,GAAAC,GAAAtL,KAAA8H,EAEAwD,KAAAF,EAEAN,EAAA3O,KAAA6D,KAAAsL,GAIAF,EAAApL,KAAA8H,GAAA+C,EAAAzO,MAAA4D,MAIAA,MAAAsJ,OAAA9M,GAAAuN,OAAAwB,QAAAF,EAAArL,QCRA,QAAAwL,IAAAvE,EAAAI,EAAAH,EAAAuE,GAEA,GAAAC,IACAvE,GAAAD,EAAA,MAAA,KACAiB,KAAAjB,EAAA,QAAA,OACAkB,MAAAlB,EAAA,SAAA,SAGAa,EAAA0D,KAEA,IAAAxP,EAAAoL,GAEAU,EAAAvH,MAEAmL,KAAAD,EAAAvE,GACAF,OAAAA,EACA2E,OAAAvE,QAGA,IAAApK,EAAAoK,IAAA,IAAAA,EAAAtJ,QAAA9B,EAAAoL,EAAA,IAEAU,EAAAvH,MAEAmL,KAAAD,EAAAvE,GACAF,OAAAA,EACA2E,OAAAvE,EAAA,GACAnJ,QAAAmJ,EAAA,SAGA,IAAAlK,EAAAkK,GAEA,IAAA,GAAAwE,KAAAxE,GAEA,GAAAwE,IAAAH,GACA,CACA,GAAAI,GAAAzE,EAAAwE,GACAF,EAAAD,EAAAG,EAEA5P,GAAA6P,GAEA/D,EAAAvH,MAEAmL,KAAAA,EACA1E,OAAAA,EACA2E,OAAAE,IAGA7O,EAAA6O,IAAA,IAAAA,EAAA/N,QAAA9B,EAAA6P,EAAA,KAEA/D,EAAAvH,MAEAmL,KAAAA,EACA1E,OAAAA,EACA2E,OAAAE,EAAA,GACA5N,QAAA4N,EAAA,KAOA,MAAA/D,GAGA,QAAAgE,IAAA9K,EAAA8G,GAEA,IAAA,GAAAlK,GAAA,EAAAA,EAAAkK,EAAAhK,OAAAF,IACA,CACA,GAAAmO,GAAAjE,EAAAlK,EAEAoD,GAAA+K,EAAAL,MAAAK,EAAA/E,OAAA+E,EAAAJ,OAAAI,EAAA9N,UCjHA,QAAAyL,IAAAzI,GAEA,GAAAC,GAAAwI,GAAAsC,QAGAjL,GAAAhB,KAAAkB,EAAAC,EAGA,KAAA,GAAAR,KAAAO,GAEAP,IAAAQ,KAEAnB,KAAAW,GAAAO,EAAAP,GAKA,IAAAuL,GAAAlM,KAAAkM,IACA7M,EAAAW,KAAAX,MACA,IAAApC,EAAAiP,GAEA,IAAA,GAAArO,GAAAqO,EAAAnO,OAAA,EAAAF,GAAA,EAAAA,IAEAL,EAAA6B,EAAA6M,EAAArO,OAAA,GAEAwB,EAAA8M,QAAAD,EAAArO,QAMAL,GAAA6B,EAAA6M,MAAA,GAEA7M,EAAA8M,QAAAD,EAKAlM,MAAAoM,KAAAhP,EAAA4C,KAAAkM,KACAlM,KAAAqM,OAAA,GAAAC,IAAAtM,MACAA,KAAAuM,OACAvM,KAAAwM,UACAxM,KAAA6J,UAAA7J,KAAA6J,WAAAlI,EAAA3B,KAAA4B,MACA5B,KAAAyM,aAAA,EACAzM,KAAA0M,gBAAA,EACA1M,KAAA2M,aAAA,EACA3M,KAAA4M,cAAA,EACA5M,KAAA6M,cAAA,EACA7M,KAAA8M,kBAAA,EACA9M,KAAA+M,aAAA,EACA/M,KAAAgN,WAAA1L,EAAAjC,GAGAW,KAAAiN,KAAA3I,GAAA2I,KAAAjN,MACAA,KAAAkN,MAAA5I,GAAA4I,MAAAlN,MACAA,KAAAmN,KAAA7I,GAAA6I,KAAAnN,KAAAA,KAAAoN,cAAApN,OAGAA,KAAAqN,cAAArN,KAAAtC,WAAAsC,KAAAsN,sBACAtN,KAAAuN,YAAAvN,KAAAwN,UACAxN,KAAAyN,aAAAzN,KAAA0N,WAGA1N,KAAA2N,aACA3N,KAAA4N,gBAEA,KAAA,GAAAC,KAAA3M,GAEA,GAAA2M,IAAAvJ,IAAAwJ,UAAA,CAKA,GAAAC,GAAAzJ,GAAAwJ,UAAAD,EAEA,IAAAE,EAAAxR,oBAAAyR,IAAA,CAKA,GAAAC,GAAA/M,EAAA2M,EAEA,KAAA,GAAAjM,KAAAqM,GACA,CACA,GAAAC,GAAAD,EAAArM,GACAuM,EAAA,GAAAJ,EAEAI,GAAAC,KAAApO,KAAA4B,EAAAsM,GAEAC,EAAAE,MAEArO,KAAAgN,WAAAxM,KAAAoB,GAGA5B,KAAA2N,UAAA/L,GAAAuM,EACAnO,KAAA4N,cAAApN,KAAAoB,MAKA,QAAA0M,IAAAC,GAEA,GAAAC,GAAAxO,KAAAwO,SAEA,KAAA,GAAA7N,KAAA4N,GAEA5N,IAAA6N,KAEAD,EAAA5N,GAAA6N,EAAA7N,GAAA4N,EAAA5N,IAIA,OAAA4N,GAGA,QAAAE,IAAAC,GAEA,GAAAC,GAAA3O,KAAA2O,SAEA,KAAA,GAAAhO,KAAA+N,GAEA/N,IAAAgO,KAEAD,EAAA/N,GAAAgO,EAAAhO,GAAA+N,EAAA/N,IAIA,OAAA+N,GAGA,QAAAE,IAAAxP,GAEA,MAAAA,GAAAyP,OC5HA,QAAArS,IAAAsS,GAEA9O,KAAA+O,IAAAD,ECDA,QAAAE,MAMAhP,KAAAgC,UAMAhC,KAAAoM,QAMApM,KAAAiP,WC7BA,QAAA/M,IAAAF,GAEAhC,KAAAkP,OAAAlN,GCFA,QAAAmN,IAAAzI,EAAA0I,GAEApP,KAAAqP,MAAApR,EAAA+B,KAAAA,KAAAsP,WACAtP,KAAAuP,OAAAtR,EAAA+B,KAAAA,KAAAwP,YACAxP,KAAAyP,SAAAxR,EAAA+B,KAAAA,KAAA0P,cACA1P,KAAA2P,UAAA1R,EAAA+B,KAAAA,KAAA4P,eACA5P,KAAA6P,QAAA5R,EAAA+B,KAAAA,KAAA8P,aACA9P,KAAA+P,UAAA9R,EAAA+B,KAAAA,KAAAgQ,eACAhQ,KAAAiQ,UAAAhS,EAAA+B,KAAAA,KAAAkQ,eAEAlQ,KAAAoO,KAAA1H,EAAA0I,GCVA,QAAA9C,IAAA5C,EAAA2C,EAAA8D,GAEAnQ,KAAAoO,KAAA1E,EAAA2C,EAAA8D,GCDA,QAAAC,IAAA1G,EAAAtK,EAAAiR,GAEArQ,KAAAZ,MAAAA,EACAY,KAAAqQ,QAAAA,EAEArQ,KAAAoO,KAAA1E,GCNA,QAAA4G,IAAAC,EAAAC,EAAAC,GA6BA,MA3BAF,GAAAC,cAAAA,EACAD,EAAAE,sBAAAA,EAEAF,EAAAG,kBAAA,SAAAC,GAEA,GAAAxT,EAAAwT,GACA,CACA,GAAAC,GAAAD,EAAA3Q,KAAAwQ,eACApR,EAAAY,KAAAyQ,sBAAAG,EAEA,IAAAxR,EAEA,MAAAA,GAAA9C,SAAAoU,kBAAAC,GAIA,MAAAA,IAGAJ,EAAAM,WAAA,SAAAF,EAAAR,GAEA,GAAAS,GAAAD,EAAA3Q,KAAAwQ,eACApR,EAAAY,KAAAyQ,sBAAAG,EAEA,OAAAxR,GAAAA,EAAA9C,SAAAuU,WAAAF,EAAAR,GAAA,MAGAI,EC7BA,QAAAO,IAAApH,EAAAqH,EAAAC,EAAAC,GAEAjR,KAAAkR,WAAAjT,EAAA+B,KAAAA,KAAAmR,kBACAnR,KAAAoR,eAAAnT,EAAA+B,KAAAA,KAAAqR,oBACArR,KAAAsR,eAAArT,EAAA+B,KAAAA,KAAAuR,oBAEAvR,KAAAoO,KAAA1E,GACA1J,KAAAwR,UACAxR,KAAAyR,SAAAV,EAAAC,EAAAC,GCRA,QAAAS,IAAAhI,EAAAiI,GAEA3R,KAAAoO,KAAA1E,GACA1J,KAAA2R,MAAAA,EACA3R,KAAA4R,OAAAF,GAAAG,OAAAC,QAEA9R,KAAA+R,UAAA9T,EAAA+B,KAAAA,KAAAgS,eACAhS,KAAAiS,UAAAhU,EAAA+B,KAAAA,KAAAkS,eCPA,QAAAC,IAAA5B,EAAA6B,EAAAC,GAEArS,KAAAsS,UAAArU,EAAA+B,KAAAA,KAAAuS,eACAvS,KAAAoS,SAAAA,EACApS,KAAAqS,UAAAA,GAAA,EACArS,KAAAwS,UAAA,EACAxS,KAAAyS,cAAAlC,GCOA,QAAAmC,OCbA,QAAAC,IAAAvT,EAAAwT,GAEA5S,KAAA6S,MAAAzT,EAAAwT,GCFA,QAAAE,IAAA1T,EAAAwT,GAEA5S,KAAA6S,MAAAzT,EAAAwT,GCFA,QAAAG,IAAA3T,EAAAwT,GAEA5S,KAAA6S,MAAAzT,EAAAwT,GCFA,QAAAI,IAAA5T,EAAAwT,GAEA5S,KAAA6S,MAAAzT,EAAAwT,GCFA,QAAAK,IAAA7T,EAAAwT,GAEA5S,KAAA6S,MAAAzT,EAAAwT,GCFA,QAAAM,IAAA9T,EAAAwT,GAEA5S,KAAA6S,MAAAzT,EAAAwT,GCFA,QAAAO,IAAA/T,EAAAwT,GAEA5S,KAAA6S,MAAAzT,EAAAwT,GCFA,QAAAQ,IAAAhU,EAAAwT,GAEA5S,KAAA6S,MAAAzT,EAAAwT,GCFA,QAAAS,IAAAjU,EAAAwT,GAEA5S,KAAA6S,MAAAzT,EAAAwT,GCDA,QAAA5E,OCDA,QAAAsF,OCAA,QAAAC,OCAA,QAAAC,OCAA,QAAAC,OCAA,QAAAC,OCAA,QAAAC,OCAA,QAAAC,OjCkbAjS,EAAAG,MAAA,WAmTAwC,GAAAC,eAsGAD,GAAAe,mBAkCAf,GAAAqB,qBAgEArB,GAAA2B,UAqFA3B,GAAAiC,WAgFAtB,GAAAnD,MAAA,YAUAgD,GAAAhD,MAAA,cEziCAwC,GAAA2F,UAAA,EAEA3F,GAAA+F,YAEA/F,GAAAuP,KAAA,SAAAxM,EAAAnJ,GASA,QAAA4V,GAAA3J,EAAA2E,GAKA,GAHAiF,EAAAvT,KAAA2J,GACAqC,EAAAhM,KAAAsO,GAEAtC,EAAAzO,SAAAiW,EAAAjW,OACA,CACA,IAAA,GAAA+C,GAAA,EAAAA,EAAA0L,EAAAzO,OAAA+C,IACA,CACA,GAAAgO,GAAAtC,EAAA1L,GACAqJ,EAAA4J,EAAAjT,EAEAqJ,IAEA2E,EAAA1E,aAIA/C,GAEAA,EAAAlL,KAAA8X,IA3BA,GAAAA,GAAA/V,GAAA8B,KACAgU,EAAA1P,GAAA+F,SAAApI,QACAuK,KACAuH,IAEAzP,IAAA+F,SAAAtM,OAAA,CA2BA,KAAA,GAAAF,GAAA,EAAAA,EAAAmW,EAAAjW,OAAAF,IAEAmW,EAAAnW,GAAAqM,UAAA4J,IAIAxP,GAAAyF,QAEAO,YAAA,cACAN,QAAA,UACAkK,OAAA,SACAC,QAAA,WAGA7P,GAAAmF,SAEAnF,GAAAuG,IAAA,SAAAjJ,EAAAyF,EAAAnJ,GAaA,QAAAkW,KAEA,GAAAC,GAAA/P,GAAAmF,MAAA7H,EAEAyS,KAEAhN,EAAAlL,KAAA8X,EAAAI,GACAjN,KAlBA,GAAAiN,GAAA/P,GAAAmF,MAAA7H,GACAqS,EAAA/V,GAAArC,CAEA,IAAAI,EAAAoL,GAEA,GAAAgN,EAEAhN,EAAAlL,KAAA8X,EAAAI,OAeA,IAAAjN,GAAA9C,GAAA6C,GAAA7C,GAAAyF,OAAAO,YAAA8J,EAIA,OAAAC,IAGA1M,GAAArD,IgCxIAA,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAmN,IAAA,WAEA,MAAAuC,GAAAzC,UCJA/H,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAkV,KAAA,SAAA3D,GAEA,MAAA1T,GAAA0T,GAEA,GAAArE,IAAAwC,EAAA6B,GAAA,GAEAxT,EAAAwT,GAEA7B,EAAAyF,cAAA5D,GAGAA,KCbArM,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAA2C,QAAA,SAAAlB,GAEA,GAAAwL,GAAAjO,UAAAL,OAAA,IAAAd,EAAA4D,GACA3D,MAAAX,UAAA0F,MAAA9F,KAAAiC,WAAAyC,CAEA,OAAA,IAAAyL,IAAAwC,EAAAzC,MCPA/H,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAe,OAAA,SAAAmC,GAEA,GAAAkS,GAAArX,EAAAmF,GACAwM,EAAA2F,YAAAnS,GACAwM,EAAA4F,aAIA,OAFAF,GAAAG,QAEAH,KlCVAlQ,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA,GAAA/D,EAAA+D,EAAA0T,SAEA,IAAA,GAAA9M,KAAA5G,GAAA0T,QACA,CACA,GAAAhK,GAAA1J,EAAA0T,QAAA9M,EAEA4C,IAAAtL,EAAA7C,UAAAuL,EAAA8C,MCRAtG,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA,GAAA+F,GAAA/F,EAAA+F,MAEA,IAAA9J,EAAA8J,GACA,CACA,GAAA4N,MACAC,IAEA,KAAA,GAAAjJ,KAAA5E,GACA,CACA,GAAAI,GAAAJ,EAAA4E,GACA7D,EAAArG,EAAAkK,GAEAkJ,EAAApL,GAAAI,OAAA/B,GACAgN,EAAAxY,GAAAuN,OAAA/B,EAEA+M,IAEAvJ,GAAAuJ,EAAA1N,GAAA,EAAAyN,GAGAE,GAEAxJ,GAAAwJ,EAAA3N,GAAA,EAAAwN,GAMA,GAFA9I,GAAA+C,EAAAgG,GAEAD,EAAA9W,OACA,CACA,GAAAoN,GAAA/L,EAAA7C,UAAA4O,KAEA/L,GAAA7C,UAAA4O,MAAA,WAEAA,EAAA/O,MAAA4D,KAAA5B,WAEA2N,GAAA/L,KAAA6U,QkCtCAvQ,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAaA,QAAA+T,GAAA5T,GAEAH,EAAAG,KAEAyN,EAAAzN,GAAA6T,EAAA7T,IAIA,QAAA8T,GAAA9T,GAEA,GAAA+T,GAAAtG,EAAAzN,GACAgU,EAAAH,EAAA7T,EAEA,KAAA,GAAAV,KAAA0U,GAEA1U,IAAAyU,KAEAA,EAAAzU,GAAA0U,EAAA1U,IAKA,QAAA2U,GAAApU,EAAAqU,GAKA,IAAA,GAHAC,GAAAN,EAAAK,GAAArU,GACAD,EAAA6N,EAAA5N,GAEArD,EAAA2X,EAAAzX,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAAiD,GAAAtD,EAAAyD,EAAAuU,EAAA3X,GAEAiD,MAAA,GAEAG,EAAAsH,OAAAzH,EAAA,GAGAG,EAAAkL,QAAAqJ,EAAA3X,KA/CA,GAAA4B,GAAAyB,EAAAzB,MAEA,IAAApD,EAAAoD,GAAA,CAKA,GACAyV,IADAvL,GAAAsC,SACAxM,EAAAnD,UACAmZ,EAAAP,EAAAhU,OA0CA+T,GAAA,gBACAE,EAAA,YACAA,EAAA,iBACAF,EAAA,iBACAA,EAAA,cACAA,EAAA,eACAA,EAAA,SACAA,EAAA,YACAA,EAAA,eACAE,EAAA,aACAA,EAAA,aACAF,EAAA,aACAK,EAAA,UACAA,EAAA,aAAA,UAEApU,EAAAxD,YAEAoR,EAAAzB,cAAAoI,EAAA/X,WAAA+X,EAAAnI,sBAGApM,EAAAsM,UAEAsB,EAAAvB,YAAAkI,EAAAjI,UAGAtM,EAAAwM,WAEAoB,EAAArB,aAAAgI,EAAA/H,UAGA,KAAA,GAAA9L,KAAAsT,GAAAvH,UAEA,KAAA/L,IAAAkN,GAAAnB,WAAA,CAKA,GAAAQ,GAAA+G,EAAAvH,UAAA/L,GACA8T,EAAA,GAAAvH,GAAAjS,WAEAwZ,GAAAtH,KAAAU,EAAAlN,EAAAuM,EAAAjN,SAEAwU,EAAArH,MAEAS,EAAA9B,WAAAxM,KAAAoB,GAGAkN,EAAAnB,UAAA/L,GAAA8T,EACA5G,EAAAlB,cAAApN,KAAAoB,GAGAkN,EAAA7B,KAAA3I,GAAA2I,KAAA6B,GACAA,EAAA5B,MAAA5I,GAAA4I,MAAA4B,GACAA,EAAA3B,KAAA7I,GAAA6I,KAAA2B,EAAAA,EAAA1B,cAAA0B,OC1GAxK,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAuW,MAAA,SAAAhF,EAAAtJ,EAAAnJ,GAEA,GAAAgO,GAAA4C,EAAA4B,kBAAAC,GACA6D,EAAA1F,EAAAjE,IAAAqB,EAYA,IAVAsI,IAEAA,EAAA1F,EAAA8G,mBAAA1J,GAEA/O,EAAAwT,IAEA6D,EAAAqB,KAAAlF,IAIA1U,EAAAoL,GACA,CACA,GAAA4M,GAAA/V,GAAA8B,IAEAwU,GAAAnL,MAAA7M,GAAAuN,OAAA+L,WAAA,WAEAzO,EAAAlL,KAAA8X,EAAAO,KAMA,MAFAA,GAAAuB,WAEAvB,KC7BAlQ,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAA4W,SAAA,SAAA3O,EAAAnJ,GAIA,MAFA4Q,GAAAmH,QAAA5O,EAAAnJ,GAEA4Q,EAAAzC,UCNA/H,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAA8W,KAAA,SAAAnF,EAAAC,EAAAC,GAEA,MAAAnC,GAAAzC,OAAA8J,WAAApF,EAAAC,EAAAC,MCJA3M,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAyL,IAAA,SAAA8F,EAAAtJ,EAAAnJ,GAEA,IAAAjC,EAAAoL,GAKA,CACA,GAAA6E,GAAA4C,EAAA4B,kBAAAC,EAEA,OAAA7B,GAAAjE,IAAAqB,GANA4C,EAAAsH,UAAAzF,EAAAtJ,EAAAnJ,MCNAoG,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAgD,KAAA,SAAAuO,EAAAtJ,EAAAnJ,GAEA,GAAA+V,GAAA/V,GAAA8B,KACAkM,EAAA4C,EAAA4B,kBAAAC,GACA6D,EAAA1F,EAAAjE,IAAAqB,EAqBA,OAnBAsI,GAEAnN,EAAAlL,KAAA8X,EAAAO,GAIA1F,EAAAsH,UAAAzF,EAAA,SAAA6D,GAEAA,EAEAnN,EAAAlL,KAAA8X,EAAAO,GAIApV,EAAAuW,MAAAhF,EAAAtJ,EAAAnJ,KAKAsW,KC3BAlQ,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAiX,QAAA,SAAAhP,EAAAnJ,GAEA,GAAA+V,GAAA/V,GAAA8B,KACAqM,EAAAyC,EAAAzC,MAwBA,OAtBAA,GAAAtO,OAEAsJ,EAAAlL,KAAA8X,EAAA5H,GAIAyC,EAAAwH,MAAA,WAEAjK,EAAAtO,OAEAsJ,EAAAlL,KAAA8X,EAAA5H,GAIAyC,EAAAmH,QAAA,WAEA5O,EAAAlL,KAAA8X,EAAA5H,OAMAA,KC7BA/H,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA/D,EAAA+D,EAAAqV,UAEA1W,EAAAqB,EAAAqV,QAAAnX,EAAA7C,aCJA+H,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAuS,MAAA,SAAAA,GAEA,GAAA6E,GAAA,GAAA9E,IAAA5C,EAAA6C,EAOA,OALApU,GAAAoU,IAEA6E,EAAAC,OAGAD,KCXAlS,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAkX,MAAA,SAAAjP,EAAAnJ,EAAAwY,GAEA5H,EAAAwH,MAAAjP,EAAAnJ,EAAAwY,MCJApS,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAA6W,QAAA,SAAA5O,EAAAnJ,GAEA,MAAA4Q,GAAAmH,QAAA5O,EAAAnJ,MCJAoG,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAWA,QAAAyV,KAEA,OAAA,GAAA7Z,OAAAiG,UAGA,QAAA6T,KAEA,MAAA,IAAA9Z,MAGA,QAAA+Z,GAAA7a,GAEA,MAAAA,aAAAc,MAAAd,EAAA+G,UAAA/G,EAGA,QAAA8a,GAAA9a,GAEA,MAAAU,GAAAV,GAAA,GAAAc,MAAAd,GAAAS,EAAAT,IAAAc,KAAAmI,MAAAnI,KAAAmI,MAAAjJ,GAAAA,EAGA,QAAA+a,GAAAC,GAEA,GAAAnZ,GAAAL,EAAAsR,EAAAzP,OAAA2X,EAEAnZ,MAAA,IAEAiR,EAAAzP,OAAAmB,KAAAwW,GACAlI,EAAA9B,WAAAxM,KAAAwW,IAGAA,IAAAlI,GAAA3N,WAEA2N,EAAA3N,SAAA6V,GAAAC,GAGA/V,EAAAgW,mBAEAF,IAAAlI,GAAAN,YAEAM,EAAAN,UAAAwI,GAAAH,GAEAG,IAAAlI,GAAAH,YAEAG,EAAAH,UAAAqI,GAAAF,IAKA,QAAAK,GAAAH,GAEAD,EAAAC,GAEAlI,EAAAsI,cAAAJ,IAAA,EAGA,QAAAK,GAAAL,GAEAD,EAAAC,GAEAlI,EAAAsI,cAAAJ,IAAA,CAEA,IAAArC,GAAAvV,EAAA7C,UAAAoY,KAEAvV,GAAA7C,UAAAoY,MAAA,WAEA3U,KAAAgX,GAAAC,IAEAtC,EAAAvY,MAAA4D,KAAA5B,YAIA,QAAAkZ,GAAAC,EAAAP,GAEA,OAAAO,GACA,IAAA,aACA,MAAAJ,GAAAH,EACA,KAAA,aACA,MAAAK,GAAAL,EACA,SACA,MAAAD,GAAAC,IAxFA,GAAAQ,GAAAtW,EAAAuW,WACAC,EAAAxW,EAAAgW,iBACAD,EAAAS,EAAAd,EAAAD,CAEA,IAAAa,EAwFA,GAAA/a,EAAA+a,GAEAF,EAAAE,EAAAA,OAEA,IAAAva,EAAAua,GAEA,IAAA,GAAA3Z,GAAA,EAAAA,EAAA2Z,EAAAzZ,OAAAF,IAEAyZ,EAAAE,EAAA3Z,GAAA2Z,EAAA3Z,QAGA,IAAAV,EAAAqa,GAEA,IAAA,GAAA7W,KAAA6W,GAEAF,EAAA3W,EAAA6W,EAAA7W,QAKAwW,GAAA,cACAE,EAAA,gBCnHA/S,GAAA6C,GAAA7C,GAAAyF,OAAAC,QAAA,SAAA5K,EAAA0P,EAAA5N,GAEA9B,EAAAgH,MAAA,SAAA2K,EAAAC,EAAAC,GAEA,MAAA,IAAAH,IAAAhC,EAAAiC,EAAAC,EAAAC,MCHA3M,GAAAiG,MAAA,SAAAlC,EAAAmN,KAKAlR,GAAAkG,QAEAC,SAAA,EAEAkN,KAAA,EACAC,aAAA,GAEAC,cAAA,EACAC,cAAA,EACAC,cAAA,EACAC,YAAA,EACAC,oBAAA,EACAC,kBAAA,EACAC,mBAAA,EACAC,mBAAA,GAEAC,WAAA,EACAC,oBAAA,GACAC,kBAAA,GACAC,iBAAA,GAEAC,cAAA,GACAC,gBAAA,GAEAC,YAAA,GACAC,aAAA,GACAC,cAAA,GACAC,iBAAA,GACAC,WAAA,GACAC,aAAA,GACAC,YAAA,GACAC,YAAA,GACAC,aAAA,GAEAC,kBAAA,GAEAC,WAAA,GACAC,iBAAA,GACAC,mBAAA,GACAC,mBAAA,GAEAC,oBAAA,GACAC,oBAAA,GAEAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,cAAA,GACAC,cAAA,GACAC,mBAAA,GAEAN,aAAA,GACAO,mBAAA,GACAC,qBAAA,GACAC,kBAAA,GACAC,qBAAA,GAEAC,sBAAA,GAEAC,kBAAA,IACAC,UAAA,IACAC,gBAAA,IACAC,WAAA,IACAC,iBAAA,IAEAC,OAAA,GACAC,QAAA,GAEAC,eAAA,GAEAC,YAAA,GACAC,oBAAA,GACAC,sBAAA,GACAC,eAAA,GACAC,mBAAA,GACAC,iBAAA,GACAC,eAAA,GACAC,kBAAA,GACAC,iBAAA,GACAC,kBAAA,GACAC,cAAA,GACAC,aAAA,IACAC,qBAAA,IAEAC,eAAA,GACAC,uBAAA,GACAC,qBAAA,GACAC,yBAAA,GACAC,kBAAA,GACAC,sBAAA,GACAC,oBAAA,GACAC,qBAAA,GACAC,oBAAA,GACAC,qBAAA,GACAC,iBAAA,GACAC,gBAAA,IACAC,wBAAA,IAEAC,aAAA,GACAC,qBAAA,GACAC,mBAAA,GACAC,gBAAA,GACAC,uBAAA,GACAC,eAAA,GACAC,aAAA,GACAC,YAAA,GACAC,kBAAA,GACAC,wBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,iBAAA,GACAC,cAAA,IACAC,sBAAA,IAEAC,iBAAA,GACAC,yBAAA,GACAC,uBAAA,GACAC,8BAAA,GACAC,oBAAA,GACAC,2BAAA,GACAC,mBAAA,GACAC,iBAAA,GACAC,gBAAA,GACAC,sBAAA,GACAC,4BAAA,GACAC,sBAAA,GACAC,sBAAA,IACAC,sBAAA,IACAC,qBAAA,IACAC,qBAAA,IACAC,wBAAA,GACAC,kBAAA,IACAC,0BAAA,IAEAC,eAAA,GACAC,eAAA,IACAC,uBAAA,IACAC,qBAAA,IACAC,gBAAA,IACAC,wBAAA,KCjJA5a,GAAA2I,KAAA,SAAAvD,GAGA,OAIA6C,IAAA,SAAApC,EAAAgV,GAEAhV,OAKAU,IAAA,SAAAzL,EAAA+K,EAAAgV,GAEAA,EAAA,KAAA,KAKAhf,OAAA,SAAAf,EAAAggB,EAAAjV,EAAAgV,GAEAhV,OAKAkV,OAAA,SAAAjgB,EAAAggB,EAAAjV,EAAAgV,GAEAhV,OAKAmV,OAAA,SAAAlgB,EAAA+K,EAAAgV,GAEAhV,OAKAwH,MAAA,SAAAA,EAAAxH,EAAAgV,GAEAhV,SCtCA7F,GAAA4I,MAAA,SAAAxD,GAEA,OAkBA6V,IAAA,SAAArT,EAAAsT,EAAArV,EAAAgV,GAEAhV,EAAA+B,EAAAsT,IAIA3U,IAAA,SAAAqB,EAAA/B,EAAAgV,GAEAA,EAAAjT,EAAA,SAiBAoT,OAAA,SAAApT,EAAA/B,EAAAgV,GAEAhV,EAAA+B,EAAAsT,SAYAjT,IAAA,SAAApC,EAAAgV,GAEAhV,YCvDA7F,GAAA6I,KAAA,SAAAzD,EAAA+V,GAEA,MAAA,UAAAC,MCfApb,GAAAqb,OAAAC,OAAAC,UAAAC,UAAA,EAEAxb,GAAAyb,cAAA,EAGAzb,GAAA0b,UAAA,WAEA1b,GAAAqb,QAAA,EACArb,GAAAiG,MAAAjG,GAAAkG,OAAAqQ,QACAvW,GAAA4E,QAAA5E,GAAAyF,OAAAmK,SAIA5P,GAAA2b,WAAA,WAEA3b,GAAAqb,QAAA,EACArb,GAAAiG,MAAAjG,GAAAkG,OAAAsQ,SACAxW,GAAA4E,QAAA5E,GAAAyF,OAAAoK,UAKA7P,GAAA4b,sBAAA,WAEAN,OAAAO,kBAEAP,OAAAO,iBAAA7b,GAAAyF,OAAAmK,OAAA5P,GAAA0b,WAAA,GACAJ,OAAAO,iBAAA7b,GAAAyF,OAAAoK,QAAA7P,GAAA2b,YAAA,KAIAG,SAAAC,KAAAC,SAAAhc,GAAA0b,UACAI,SAAAC,KAAAE,UAAAjc,GAAA2b,aAKA3b,GAAAkc,mBAAA,WAEA,GAAAb,GAAAC,OAAAC,UAAAC,MAEAxb,IAAAyb,eAEAJ,GAAA,GAGAA,KAAA,GAAArb,GAAAqb,UAAA,EAEArb,GAAA0b,YAGAL,KAAA,GAAArb,GAAAqb,UAAA,GAEArb,GAAA2b,clDkFAtW,GAAAI,QAEA0W,OAAA,UACAC,WAAA,cACAC,UAAA,aACAC,QAAA,UACAC,WAAA,cACAC,aAAA,gBACAC,aAAA,gBACAC,MAAA,iCACAzV,QAAA,WAGA5B,GAAAsX,MAEAC,KAAA,OACAC,OAAA,UAGA7c,GAAA8c,OAEAC,KAAA,OACAC,QAAA,UACAC,IAAA,OAGA5X,GAAAsC,UAEArK,KAAA9F,EACA+N,UAAA,KACAqC,IAAA,KACAsV,aAAA,IACAniB,UACA+X,iBACAjW,YACAzD,WAAA,KACA4P,qBAAA,KACAE,SAAA,KACAiU,eAAA,EACAC,YAAA,EACAC,aAAA,EACAlY,MAAAnF,GAAA8c,MAAAG,IACAK,UAAA,EACAC,aAAA,EACArT,aACAG,aACAkI,OAAAvI,GACAwI,OAAArI,GACAf,UAAAkB,IAGAjF,GAAApN,WAIA+Z,MAAA,SAAAjP,EAAAnJ,EAAAwY,GAcA,QAAAoL,KAEApL,GAEAtP,MAEA2a,GAAArL,KAEArP,EAAAlL,KAAA8X,EAAAnF,MAAA,GAEA1H,IAGA2a,GAAA,GAzBA,GAAAjT,GAAA9O,KACAiU,EAAA/V,GAAA4Q,EACAiT,GAAA,CAEA,IAAAjT,EAAArC,YAEApF,EAAAlL,KAAA8X,EAAAnF,GAEAiT,GAAA,MAqBA,IAAA3a,GAAA0H,EAAA3H,GAAAwC,GAAAI,OAAAiX,MAAAc,EAGA,OAAAC,IAIAC,QAAA,SAAAC,GAEA,IAAA9kB,EAAA8kB,GAEA,OAAA,CAGA,KAAA,GAAAthB,KAAAshB,GAEA,IAAAjiB,KAAAoX,cAAAzW,GAEA,OAAA,CAIA,QAAA,GAIAyV,UAAA,SAAAzF,EAAAtJ,EAAAnJ,EAAAiS,GAMA,QAAA+R,KAEA,GAAA3a,GAAAuH,EAAA+B,WAAAF,EAAAR,EAQA,OANA5I,MAAA,GAAA/E,IAEAA,GAAA,EACA6E,EAAAlL,KAAA8X,EAAA1M,IAGA,OAAAA,GAAA,GAAA,EAdA,GAAAuH,GAAA9O,KACAiU,EAAA/V,GAAA4Q,EACAtM,GAAA,CAeA0f,MAEApT,EAAAwH,MAAA4L,EAAApT,GAAA,IAiBA+B,WAAA,SAAAF,EAAAR,GAEA,GAAArB,GAAA9O,KACAmiB,EAAArT,EAAAlC,eAAAkC,EAAA4S,UAEA,KAAAnkB,EAAAoT,GAEA,MAAAwR,GAAA,MAAA,CAGA9lB,GAAAsU,KAEAA,EAAA,GAAAA,GAGA,IAAAzE,GAAA4C,EAAA4B,kBAAAC,EAEA,IAAAA,YAAA7B,GAAAhF,MAEA,MAAA6G,EAEA,IAAAzE,IAAA4C,GAAAvC,IACA,CACA,GAAAnN,GAAA0P,EAAAvC,IAAAL,EAcA,OAZA/O,GAAAwT,KAEAR,EAEArB,EAAAyF,cAAA5D,EAAAzE,EAAA9M,GAIAA,EAAAyW,KAAAlF,IAIAvR,EAEA,MAAAjC,GAAAwT,GAEAR,EAEArB,EAAAyF,cAAA5D,GAIA7B,EAAA4F,YAAA5F,EAAAgI,OAAAnG,IAGAwR,EAEA,MAGA,GAIAC,UAAA,SAAAhjB,GAEA,GAAA0B,GAAAd,KAAAkM,GAEA,IAAAjP,EAAA6D,GAEA,IAAA,GAAAjD,GAAA,EAAAA,EAAAiD,EAAA/C,OAAAF,UAEAuB,GAAA0B,EAAAjD,eAKAuB,GAAA0B,IAKAuhB,SAAA,SAAAjjB,EAAAC,GAEA,GAAA6M,GAAAlM,KAAAsiB,UAAAljB,EAAAC,EAOA,OALApC,GAAAiP,KAEAA,EAAAA,EAAArG,KAAA7F,KAAAwhB,eAGAtV,GAIAoW,UAAA,SAAAljB,EAAAC,GAEA,GAAA6M,GAAA,IAEA,IAAAjP,EAAAoC,GACA,CACA6M,IAEA,KAAA,GAAArO,GAAA,EAAAA,EAAAwB,EAAAtB,OAAAF,IAEAqO,EAAA1L,KAAApB,EAAAC,EAAAxB,SAKAqO,GAAA9M,EAAAC,GAEA6M,IAEAA,EAAA9M,EAAAC,GAAAhB,IAIA,OAAA6N,IAIAwE,kBAAA,SAAAC,GAEA,MAAAA,aAAA3Q,MAAA8J,MAEA6G,EAAA9B,OAEA5R,EAAA0T,GAEA3Q,KAAAuiB,kBAAA5R,GAEAxT,EAAAwT,GAEA3Q,KAAAqiB,SAAA1R,EAAA3Q,KAAAkM,KAGAyE,GAIA4R,kBAAA,SAAA9kB,GAEA,MAAAA,GAAAoI,KAAA7F,KAAAwhB,eAIAgB,OAAA,SAAApjB,EAAAqjB,GAEA,GAAAvW,GAAAlM,KAAAkM,IACAwW,EAAA1iB,KAAAqiB,SAAAjjB,EAAA8M,EAEA,IAAA/M,EAAAC,EAAA8M,EAAA3O,GAEA,MAAAmlB,EAEA,KAAAD,EAEA,KAAA,6BAGA,QAAA,GAIAE,QAAA,SAAAvjB,GAEA,MAAAY,MAAAsiB,UAAAljB,EAAAY,KAAAkM,MAGA0J,mBAAA,SAAA1J,GAEA,GAAA4C,GAAA9O,KAEAsC,IAEA,IAAArF,EAAA6R,EAAA5C,KACA,CACAzP,EAAAyP,KAEAA,EAAAA,EAAA5O,MAAAwR,EAAA0S,cAGA,KAAA,GAAA3jB,GAAA,EAAAA,EAAAiR,EAAA5C,IAAAnO,OAAAF,IAEAyE,EAAAwM,EAAA5C,IAAArO,IAAAqO,EAAArO,OAKAyE,GAAAwM,EAAA5C,KAAAA,CAGA,OAAA4C,GAAA4F,YAAApS,IAIAsgB,QAAA,WAEA5iB,KAAA6iB,OACA7iB,KAAAkJ,QAAAS,GAAAI,OAAA6W,UAMArT,YAAA,SAAAC,GAEAvR,EAAAuR,GAEAxN,KAAA8iB,iBAAAtV,EAEA/Q,EAAA+Q,GAEAxN,KAAA8iB,iBAAA,SAAAjiB,EAAA0C,GAEA,GAAAwf,GAAA5lB,EAAA0D,IAAA2M,IAAA3M,GAAAA,EAAA2M,GAAA1R,EACAknB,EAAA7lB,EAAAoG,IAAAiK,IAAAjK,GAAAA,EAAAiK,GAAA1R,CAEA,OAAAinB,KAAAjnB,GAAAknB,IAAAlnB,GAAA,EAAA2H,EAAAsf,EAAAC,GAAA,GAKAhjB,KAAA8iB,iBAAA,SAAAjiB,EAAA0C,GAEA,OAAA,IAOA8J,cAAA,SAAA3P,EAAAqG,GAEA/D,KAAAqM,OAAAgB,cAAA3P,EAAAqG,IAGAU,cAAA,SAAA/G,EAAAqG,GAEA/D,KAAAqM,OAAA5H,cAAA/G,EAAAqG,IAGA0J,aAAA,SAAAC,GAEAzR,EAAAyR,GAEA1N,KAAA0N,UAAAA,EAEAjR,EAAAiR,GAEAlQ,EAAAwC,KAAAX,OAAAqO,MAAA,EAEA1N,KAAA0N,UAAA,SAAAtO,GAEA,MAAA7B,GAAA6B,GAAAA,EAAAsO,GAAAtO,GAKAY,KAAA0N,UAAA5G,GAAA4G,GAKA1N,KAAA0N,UAAA,SAAAtO,GAEA,MAAAA,GAAAyP,SAMAgU,KAAA,WAEA7iB,KAAAqM,OAAA4W,UAIA9e,SAAA,WAEA,MAAAnE,MAAAqM,OAAAlI,YAGA+e,MAAA,WAEA,GAAApU,GAAA9O,KACAoM,EAAA0C,EAAAzC,OAAAD,KACAC,EAAAyC,EAAAzC,MAEAyC,GAAAvC,MAEA,KAAA,GAAA1O,GAAA,EAAAA,EAAAuO,EAAArO,OAAAF,IAEAiR,EAAAvC,IAAAH,EAAAvO,IAAAwO,EAAAxO,IAMA0W,cAAA,SAAA6K,EAAAlT,EAAA9M,EAAA+jB,GAEA,IAAAhmB,EAAAiiB,GAEA,MAAAhgB,EAGA,IAAA0P,GAAA9O,KACAkM,EAAAA,GAAA4C,EAAA0T,OAAApD,GACAhgB,EAAAA,GAAA0P,EAAAvC,IAAAL,GACAkX,EAAAtU,EAAAgI,OAAAxV,EAAA8d,GAGA,IAAAhgB,EACA,CACA,GAAAikB,GAAArjB,KAAA8iB,iBAAA1jB,EAAAggB,EAEA,IAAAiE,EAIA,MAFA/e,IAAAiG,MAAAjG,GAAAkG,OAAA4O,kBAAAtK,EAAA1P,EAAAggB,GAEAhgB,EAKA,GAAAA,EACA,CAGA,IAAA,GAFAkkB,GAAAxU,EAAA1C,KAEAvO,EAAA,EAAAA,EAAAylB,EAAAvlB,OAAAF,IACA,CACA,GAAAiD,GAAAwiB,EAAAzlB,GACA0lB,EAAAnkB,EAAA0B,GACA0iB,EAAAJ,EAAAtiB,EAEA,IAAAvD,EAAAgmB,IAAAhmB,EAAAimB,IAAAD,IAAAC,EAEA,KAAA,gCAIA1U,EAAAvC,IAAAL,GAAA9M,EAEAA,EAAAqkB,SAEArkB,EAAAqkB,UAGA,IAAAnY,GAAAlM,EAAAskB,SAAA,GACAC,KACAC,GAAA,EACAhB,KACAiB,EAAAvgB,EAAAlE,EAAAqkB,QACA9V,EAAAmB,EAAAnB,SAEA,KAAA,GAAAhN,KAAAye,GAEA,GAAA,MAAAze,EAAAe,OAAA,GAKA,GAAAf,IAAAgN,GAEAvO,EAAAyW,KAAAlV,EAAAye,EAAAze,IAAA,OAFA,CAOA,GAAAmjB,GAAAxY,EAAA3K,GACAojB,EAAA3kB,EAAAqkB,OAAA9iB,EAEAkjB,IAAAV,GAAAjkB,EAAA4kB,EAAAC,IAEA3kB,EAAAuB,GAAAyiB,EAAAziB,GACAiiB,EAAAjiB,GAAAye,EAAAze,GAEAvB,EAAA4kB,SAEA5kB,EAAA4kB,OAAArjB,GAAAye,EAAAze,MAKAgjB,EAAAhjB,GAAAye,EAAAze,GACAijB,GAAA,GAGAxkB,EAAAqkB,OAAA9iB,GAAAW,EAAA8d,EAAAze,IAGAijB,EAEAxkB,EAAAoK,SAAAhN,GAAAuN,OAAAka,eAAA7E,EAAAuE,IAIAvkB,EAAAoK,SAAAhN,GAAAuN,OAAAma,YAAA9E,EAAAwD,IAGAxjB,EAAAoK,SAAAhN,GAAAuN,OAAAoa,cAAA/E,IAEAhgB,EAAAglB,cAAAhR,IAEAtE,EAAAzC,OAAAgY,IAAAnY,KAEA4C,EAAAzC,OAAAkT,IAAArT,EAAA9M,GACA0P,EAAA5F,QAAAS,GAAAI,OAAA8W,YAAAzhB,GAAA,SAMAA,GAAA0P,EAAA2F,YAAA2O,GAAA,GAEAhkB,EAAAklB,QAAA9nB,GAAAqV,OAAA0S,OAEAzV,EAAArF,QAAAnF,GAAA8c,MAAAG,KAEAniB,EAAA4kB,OAAA5kB,EAAAskB,SAAA,GACAtkB,EAAA4kB,OAAAM,QAAAllB,EAAAklB,QACAllB,EAAAqkB,OAAArkB,EAAA4kB,OAAAP,OAAArkB,EAAAskB,SAAA,GAEAtkB,EAAAglB,cAAAhR,KAIAhU,EAAAqkB,OAAArkB,EAAAskB,SAAA,EAIA,OAAAtkB,IAGAqV,YAAA,SAAA2O,EAAAjT,GAEA,GAAArB,GAAA9O,KACAZ,EAAA0P,EAAA4F,YAAA0O,EAAAjT,GACAjE,EAAA9M,EAAAyP,MAQA,OANAC,GAAAzC,OAAAgY,IAAAnY,KAEA4C,EAAAzC,OAAAkT,IAAArT,EAAA9M,GACA0P,EAAA5F,QAAAS,GAAAI,OAAA8W,YAAAzhB,EAAA+Q,KAGA/Q,GAGAolB,0BAAA,SAAAplB,EAAA8M,GAEA,GAAA4C,GAAA9O,IAEA,OAAAZ,GAEAA,EAAAqlB,qBAEArlB,GAAAqkB,OAEA3U,EAAAsT,UAAAhjB,GAEAA,EAAAoK,SAAAhN,GAAAuN,OAAA2a,SAEA,UAGA5V,GAAAvC,IAAAL,GAEA4C,EAAAzC,OAAAiT,OAAApT,GACA4C,EAAA5F,QAAAS,GAAAI,OAAAgX,cAAA3hB,IAEAA,EAAAoK,SAAAhN,GAAAuN,OAAA4a,iBAEArgB,GAAAiG,MAAAjG,GAAAkG,OAAAuN,cAAAjJ,EAAA1P,IAEA,IAGA,GAGAwlB,wBAAA,SAAAxlB,EAAA8M,GAEA,GAAA4C,GAAA9O,IAEA,OAAAZ,GAGAA,EAAAqlB,qBAGArlB,GAAAqkB,aACArkB,GAAA4kB,OAAAP,OAEA3U,EAAAsT,UAAAhjB,GACA0P,EAAAsT,UAAAhjB,EAAA4kB,QAEA5kB,EAAAoK,SAAAhN,GAAAuN,OAAA2a,QAEAtlB,EAAAglB,cAAAhR,KAEA,IAGAhU,EAAAglB,cAAAnR,UAEAnE,GAAAvC,IAAAL,GAEA4C,EAAAzC,OAAAiT,OAAApT,GACA4C,EAAA5F,QAAAS,GAAAI,OAAAgX,cAAA3hB,IAEAA,EAAAoK,SAAAhN,GAAAuN,OAAA4a,iBAEArgB,GAAAiG,MAAAjG,GAAAkG,OAAAuN,cAAAjJ,EAAA1P,IAgBA,IAZA0P,EAAA5B,MAAAoS,OAAApT,EAAA,SAAA2Y,GAEAA,GAEAvgB,GAAAiG,MAAAjG,GAAAkG,OAAAuN,cAAAjJ,EAAA+V,MAKA,IAOAC,kBAAA,SAAA5Y,GAEA,GAAA4C,GAAA9O,KACAZ,EAAA0P,EAAAvC,IAAAL,EAEA,OAAA4C,GAAArF,QAAAnF,GAAA8c,MAAAG,IAEAzS,EAAA8V,wBAAAxlB,EAAA8M,GAIA4C,EAAA0V,0BAAAplB,EAAA8M,IAIA9B,WAAA,WAEA,GAAA0E,GAAA9O,IAEA,KAAA,GAAAkM,KAAA4C,GAAAtC,OACA,CACA,GAAApN,GAAA0P,EAAAtC,OAAAN,EAEA9M,GAAAklB,UAAA9nB,GAAAqV,OAAAkT,eAEAzgB,GAAAiG,MAAAjG,GAAAkG,OAAA8N,oBAAAxJ,EAAA1P,GAEAA,EAAAglB,cAAAlR,MAIA9T,EAAAklB,UAAA9nB,GAAAqV,OAAAmT,aAEA1gB,GAAAiG,MAAAjG,GAAAkG,OAAA+N,kBAAAzJ,EAAA1P,GAEAA,EAAAglB,cAAA/Q,KAIA/O,GAAAiG,MAAAjG,GAAAkG,OAAAgO,iBAAA1J,EAAA1P,GAGA0P,EAAAzC,OAAAkT,IAAArT,EAAA9M,GAAA,IAIA0P,EAAAtC,UACAsC,EAAA8T,UAEA9T,EAAA4S,aAEA,IAAA5S,EAAAhC,kBAEAgC,EAAAmH,UAIAnH,EAAAjC,cAAA,IAKA3C,UAAA,SAAA+a,GAIA,QAAAC,GAAAC,EAAA/Y,GAEA9H,GAAAiG,MAAAjG,GAAAkG,OAAA6N,WAAAvJ,EAAAqW,EAEA,KAAA,GAAAtnB,GAAA,EAAAA,EAAAsnB,EAAApnB,OAAAF,IACA,CACA,GAAAuhB,GAAA+F,EAAAtnB,GACAqO,EAAAE,EAAAvO,GACAulB,EAAAtU,EAAAgI,OAAAxV,EAAA8d,GAAA,IACAhgB,EAAA0P,EAAA4F,YAAA0O,GAAA,EAEAhkB,GAAA4kB,OAAA5E,EACAhgB,EAAAqkB,OAAArE,EAAAqE,OAEArkB,EAAAklB,UAAA9nB,GAAAqV,OAAAuT,UAEAtW,EAAAtC,OAAAN,GAAA9M,EACA0P,EAAAvC,IAAAL,GAAA9M,GAIA0P,EAAArC,aAAA,EACAqC,EAAAnC,aAAA,EAEAmC,EAAA5F,QAAAS,GAAAI,OAAA4W,WAAA7R,IAEAmW,GAAA,EAAAnW,GAGA,QAAAuW,KAEAvW,EAAAwW,WAEAL,GAAA,EAAAnW,GAnCA,GAAAA,GAAA9O,IAsCA8O,GAAA4S,YAAA5S,EAAA6S,aAEArd,GAAA8D,MAAA9D,GAAAyF,OAAAmK,OAAApF,EAAAyW,SAAAzW,GAGAA,EAAArF,QAAAnF,GAAA8c,MAAAC,MAEAvS,EAAAwW,WAEAL,GAAA,EAAAnW,IAIAA,EAAA5B,MAAAX,IAAA2Y,EAAAG,IAIAC,SAAA,WAEA,GAAAxW,GAAA9O,IAEA8O,GAAA4S,WAEA5S,EAAAmH,WAIAnH,EAAArC,aAAA,EACAqC,EAAA5F,QAAAS,GAAAI,OAAA0W,QAAA3R,MAIAyW,SAAA,WAEAvlB,KAAA+M,aAAA,EAEA,IAAA/M,KAAA8M,mBAEA9M,KAAAwlB,mBAIAA,gBAAA,WAEA,GAAA1W,GAAA9O,MAEA8O,EAAA6S,aAAA7S,EAAAlC,cAAAkC,EAAA/B,aAAA+B,EAAAjC,gBAEAiC,EAAA/B,aAAA,EACA+B,EAAAjC,cAAA,EAEAvI,GAAAiG,MAAAjG,GAAAkG,OAAAoN,aAAA9I,GAEAA,EAAAmH,YAKAA,QAAA,SAAA5O,EAAAnJ,GAKA,QAAAunB,GAAApZ,GAIA,IAAA,GAFAqZ,MAEA7nB,EAAA,EAAAA,EAAAwO,EAAAtO,OAAAF,IACA,CACA,GAAAuB,GAAA0P,EAAAyF,cAAAlI,EAAAxO,GAEA,IAAAuB,EACA,CACA,GAAA8M,GAAA9M,EAAAyP,MAEA6W,GAAAxZ,GAAA9M,GAMA,IAAA,GAFAgN,GAAA0C,EAAAzC,OAAAD,OAEAvO,EAAA,EAAAA,EAAAuO,EAAArO,OAAAF,IACA,CACA,GAAAiD,GAAAsL,EAAAvO,EAEA,MAAAiD,IAAA4kB,IACA,CACA,GAAAxiB,GAAA4L,EAAAzC,OAAAxB,IAAA/J,EAEAoC,GAAAugB,SAEAnf,GAAAiG,MAAAjG,GAAAkG,OAAA2N,mBAAArJ,EAAAhO,GAEAgO,EAAAgW,kBAAAhkB,KAKAgO,EAAArC,aAAA,EACAqC,EAAAlC,cAAA,EAEAkC,EAAA5F,QAAAS,GAAAI,OAAA2W,YAAA5R,IAEAA,EAAA8T,UAEAte,GAAAiG,MAAAjG,GAAAkG,OAAAwN,YAAAlJ,EAAAzC,GAEAhF,GAEAA,EAAAlL,KAAA8X,EAAAnF,EAAAzC,QAIA,QAAAsZ,GAAAtZ,EAAAuF,GAEA,IAAAA,GAEAtN,GAAAkc,qBAEAlc,GAAAqb,SAEA7Q,EAAApC,gBAAA,EAEApI,GAAA6D,KAAA,SAAA2G,EAAA8W,gBAAA9W,IAGAxK,GAAAiG,MAAAjG,GAAAkG,OAAAyN,oBAAAnJ,KAIAxK,GAAAiG,MAAAjG,GAAAkG,OAAA0N,kBAAApJ,EAAA8C,GAEA9C,EAAArC,aAAA,EACAqC,EAAA5F,QAAAS,GAAAI,OAAA0W,QAAA3R,KAGAzH,GAEAA,EAAAlL,KAAA8X,EAAAnF,EAAAzC,QA9EA,GAAAyC,GAAA9O,KACAiU,EAAA/V,GAAA4Q,CAiFAA,GAAA7B,KAAAV,IAAAkZ,EAAAE,IAGAC,gBAAA,WAEA,GAAA9W,GAAA9O,IAEAsE,IAAAiG,MAAAjG,GAAAkG,OAAA4N,mBAAAtJ,GAEAA,EAAApC,iBAEAoC,EAAApC,gBAAA,EAEAoC,EAAAmH,YAKApL,IAAA,SAAAqB,GAEA,MAAAlM,MAAAuM,IAAAvM,KAAA0Q,kBAAAxE,KAGAkD,OAAA,SAAAyW,GAEA,GAAAtZ,GAAAvM,KAAAuM,IACAuZ,IAEA,KAAA,GAAA5Z,KAAAK,GACA,CACA,GAAAnN,GAAAmN,EAAAL,EAEA2Z,GAAAzmB,IAEA0mB,EAAAtlB,KAAApB,GAIA,MAAA0mB,IAIA1Y,cAAA,SAAA0B,GAEA,MAAA,UAAA4Q,GAEA,GAAAxT,GAAAwT,EAAAxT,IACAkT,EAAAM,EAAAtgB,KAEA,QAAAsgB,EAAAqG,IAEA,IAAApc,IAAAsX,KAAAC,KAEApS,EAAAyF,cAAA6K,EAAAlT,GACA4C,EAAA8T,UAEAte,GAAAiG,MAAAjG,GAAAkG,OAAAiO,cAAA3J,EAAA4Q,EAAAtgB,MAAA8M,EACA,MAEA,KAAAvC,IAAAsX,KAAAE,OAEArS,EAAAgW,kBAAA5Y,IAEA4C,EAAA8T,UAGAte,GAAAiG,MAAAjG,GAAAkG,OAAAkO,gBAAA5J,EAAA5C,MAOAwI,YAAA,SAAAnG,EAAA4B,GAEA,MAAA,IAAAnQ,MAAA8J,MAAAyE,EAAA4B,IAGA6V,aAAA,SAAA5mB,GAEAY,KAAAuM,IAAAnN,EAAAyP,QAAAzP,GAIAiP,KAAA,SAAAjP,EAAAwT,GAEA,GAAA9D,GAAA9O,IAEA,IAAAZ,EAAA6mB,aAIA,WAFA3hB,IAAAiG,MAAAjG,GAAAkG,OAAA2O,aAAArK,EAAA1P,EAKA,IAAA8M,GAAA9M,EAAAyP,OACAqX,EAAApX,EAAAzC,OAAAgY,IAAAnY,EAEAga,IAEApX,EAAA5F,QAAAS,GAAAI,OAAA+W,cAAA1hB,IAEAA,EAAAoK,SAAAhN,GAAAuN,OAAAoc,iBAIArX,EAAAzC,OAAAkT,IAAArT,EAAA9M,GACA0P,EAAA5F,QAAAS,GAAAI,OAAA8W,YAAAzhB,IACA0P,EAAA8T,UAEAxjB,EAAAoK,SAAAhN,GAAAuN,OAAAqc,gBAGAhnB,EAAAglB,cAAAjR,GAAAP,IAIA0M,OAAA,SAAAlgB,EAAAwT,GAEA,GAAA9D,GAAA9O,IAGAA,MAAAqmB,iBAAAjnB,GAGAA,EAAAklB,UAAA9nB,GAAAqV,OAAAmT,aAEA1gB,GAAAiG,MAAAjG,GAAAkG,OAAA0P,mBAAApL,EAAA1P,GAGAA,EAAAklB,QAAA9nB,GAAAqV,OAAAkT,cAEA3lB,EAAAglB,cAAApR,GAAAJ,IAGAyT,iBAAA,SAAAjnB,GAEA,GAAA0P,GAAA9O,KACAkM,EAAA9M,EAAAyP,MAEAC,GAAAzC,OAAAgY,IAAAnY,KAEA4C,EAAAzC,OAAAiT,OAAApT,GACA4C,EAAA5F,QAAAS,GAAAI,OAAAgX,cAAA3hB,IACA0P,EAAA8T,UAEAxjB,EAAAoK,SAAAhN,GAAAuN,OAAAqb,WAIAkB,aAAA,SAAAlnB,EAAAwT,GAEAxT,EAAAglB,cAAAzR,GAAAC,KAKAjL,GAAAgC,GAAApN,WACAwK,GAAA4C,GAAApN,UAAA,SAAAoN,GAAAI,OAAAwB,SC5pCA/O,GAAAuN,QAEAwc,QAAA,UACAC,MAAA,QACAC,QAAA,WACAC,SAAA,YACAC,UAAA,aACAC,WAAA,cACA3C,cAAA,iBACAC,WAAA,cACAtD,QAAA,UACA8D,OAAA,SACAmC,OAAA,SACAT,cAAA,gBACAD,cAAA,gBACAW,UAAA,aACAC,eAAA,kBACA3B,QAAA,UACAjB,aAAA,gBACA6C,UAAA,aACAC,iBAAA,qBACAC,WAAA,gCACAC,WAAA,cACAC,kBAAA,sBACAC,kBAAA,sBACAC,YAAA,sDACAC,YAAA,eACAC,mBAAA,uBACAC,aAAA,oCACAC,aAAA,gBACAC,oBAAA,wBACAC,oBAAA,wBACAC,cAAA,4DACAC,SAAA,YACAC,gBAAA,oBACAC,UAAA,8BACAC,UAAA,aACAC,iBAAA,qBACAC,iBAAA,qBACArS,WAAA,mDACA6O,gBAAA,wBACAyD,kBAAA,sBACA7c,QAAA,iEAGA/O,GAAAqV,QAEA0S,OAAA,EACAS,YAAA,EACAD,cAAA,EACAK,QAAA,GAGA5oB,GAAA6rB,SAEA5pB,UAAA,GAGAjC,GAAAD,WAGA4O,MAAA,SAAA7I,EAAA6N,GAOA,GALAnQ,KAAAskB,QAAA9nB,GAAAqV,OAAA0S,OACAvkB,KAAAsoB,WAAA,KACAtoB,KAAAuoB,cACAvoB,KAAAwoB,eAEArY,EACA,CACA,GAAAjE,GAAAlM,KAAA+O,IAAAyT,OAAAlgB,EAEAtC,MAAA+O,IAAAxC,IAAAL,GAAAlM,KACAA,KAAA6V,KAAAvT,EAAA,OAAA6N,OAIAnQ,MAAAyoB,OAAAnmB,EAGA,IAAAtC,KAAA+O,IAAA0S,cACA,CACA,GAAAiH,GAAA1oB,KAAA+O,IAAApB,SAEA,KAAA,GAAA/L,KAAA8mB,GACA,CACA,GAAAva,GAAAua,EAAA9mB,EAEAuM,GAAAwa,MAEA3oB,KAAA4oB,aAAAhnB,EAAA,OAAAuO,MAMAsY,OAAA,SAAAnmB,GAEA,GAAAumB,GAAA7oB,KAAA+O,IAAA5N,SACA9B,EAAAW,KAAA+O,IAAA1P,OACAsO,EAAA3N,KAAA+O,IAAApB,UACA2V,EAAAtjB,KAAA+O,IAAA7C,GAEA,IAAA/O,EAAA0rB,GACA,CACA,IAAA,GAAAhrB,GAAA,EAAAA,EAAAwB,EAAAtB,OAAAF,IACA,CACA,GAAA8C,GAAAtB,EAAAxB,GACAuD,EAAAynB,EAAAloB,GACAmoB,EAAA3mB,EAAAf,EAEApB,MAAAW,GAAAmoB,EAGA,IAAA,GAAAnoB,KAAAgN,GAEA,GAAAhN,IAAAkoB,GACA,CACA,GAAAznB,GAAAynB,EAAAloB,GACAmoB,EAAA3mB,EAAAf,GACA+M,EAAAnO,KAAA4oB,aAAAjoB,EAEAwN,GAAArD,IAAA9K,KAAA8oB,QAMA,KAAA,GAAAjrB,GAAA,EAAAA,EAAAwB,EAAAtB,OAAAF,IACA,CACA,GAAA8C,GAAAtB,EAAAxB,EAEAmC,MAAAW,GAAA7E,EAIA,GAAAoQ,IAAA,CASA,IANA5J,IAEA4J,EAAAlM,KAAA+O,IAAAyT,OAAAlgB,GAAA,IAIA4J,KAAA,EAEAA,EAAAlM,KAAA+O,IAAAyT,OAAAxiB,MAAA,OAKA,IAAAvD,EAAA6mB,GAEAtjB,KAAAsjB,GAAApX,MAIA,KAAA,GAAArO,GAAA,EAAAA,EAAAylB,EAAAvlB,OAAAF,IACA,CACA,GAAAiD,GAAAwiB,EAAAzlB,EAEAmC,MAAAc,GAAAwB,EAAAxB,GAOAoL,KAAA,IAEAlM,KAAA+O,IAAAxC,IAAAL,GAAAlM,KACAA,KAAA+oB,MAAA7c,GAIAlM,KAAA6V,KAAAvT,IAGAuT,KAAA,SAAAvT,EAAAkD,EAAA2K,GAEA,GAAAhT,EAAAmF,GAEA,IAAA,GAAA3B,KAAA2B,GAEAtC,KAAA6V,KAAAlV,EAAA2B,EAAA3B,GAAAwP,OAGA,IAAA1T,EAAA6F,GACA,CACA,GAAA9F,GAAA6rB,QAAA/lB,GAEA,MAGA,IAAA6L,GAAAnO,KAAA4oB,aAAAtmB,EAAAkD,EAAA2K,EAEAhC,GAEAA,EAAArD,IAAA9K,KAAAwF,EAAA2K,GAIAnQ,KAAAsC,GAAAkD,EAIAjI,EAAA+E,IAEAtC,KAAAwJ,SAAAhN,GAAAuN,OAAA8c,QAAAvkB,EAAAkD,KAIAwjB,KAAA,SAAA1mB,EAAAC,GAEA,GAAAtF,EAAAqF,GAEA,MAAAF,GAAApC,KAAAsC,EAAAC,EAEA,IAAApF,EAAAmF,GACA,CACA,IAAA,GAAAG,KAAAH,GAEAA,EAAAG,GAAAF,EAAAjB,EAAAtB,KAAAyC,IAAAzC,KAAAyC;AAGA,MAAAH,GAEA,GAAA7F,EAAA6F,GACA,CACA,GAAA9F,GAAA6rB,QAAA/lB,GAEA,MAGA,IAAA6L,GAAAnO,KAAA4oB,aAAAtmB,EAEA,IAAA6L,EACA,CACA,GAAAnM,GAAAmM,EAAAtD,IAAA7K,KAEA,OAAAuC,GAAAjB,EAAAU,GAAAA,EAIA,MAAAO,GAAAjB,EAAAtB,KAAAsC,IAAAtC,KAAAsC,KAKA2mB,mBAAA,SAAAC,EAAAC,GAUA,QAAAC,KAEAF,EAAA9sB,MAAA+sB,GAAAnpB,KAAA5B,WACAgJ,IAXA,GAAAiiB,GAAArpB,KAAAwoB,WAEA,KAAA,GAAAc,KAAAD,GACA,CACA,GAAAE,GAAAF,EAAAC,EAEA,KAAAC,EAAAC,WACA,CAOA,GAAApiB,GAAAmiB,EAAAlgB,MAAA7M,GAAAuN,OAAAud,YAAA8B,EAEA,QAAA,GAIA,OAAA,GAGAK,QAAA,SAAA9oB,EAAA+oB,GAEA,GAAAvb,GAAAnO,KAAA4oB,aAAAjoB,EAEAwN,IAEAA,EAAAub,OAAA1pB,KAAA0pB,IAIAC,UAAA,SAAAhpB,EAAAipB,GAEA,GAAAzb,GAAAnO,KAAA4oB,aAAAjoB,EAEAwN,IAEAA,EAAA0b,SAAA7pB,KAAA4pB,IAIAE,WAAA,SAAAnpB,EAAAopB,GAEA,GAAA5b,GAAAnO,KAAA4oB,aAAAjoB,EAEA,OAAAwN,IAAAA,EAAA6b,UAAAhqB,KAAA+pB,IAGAnB,aAAA,SAAAjoB,EAAAspB,EAAA9Z,GAEA,GAAAuY,GAAA1oB,KAAA+O,IAAApB,UACAQ,EAAAua,EAAA/nB,EAEA,OAAAwN,IAEAxN,IAAAX,MAAAuoB,YAEApa,EAAA0F,KAAA7T,KAAAiqB,EAAA9Z,GAGAhC,IAGA,GAGAwG,MAAA,SAAAuV,EAAAC,EAAAvX,GAEA,GAAA5S,KAAAimB,aAIA,MAFA3hB,IAAAiG,MAAAjG,GAAAkG,OAAA2O,aAAAnZ,KAAA+O,IAAA/O,OAEA,CAGA,IAAA4S,GACA,IAAAxU,UAAAL,OAAA6U,EACA,IAAAxU,UAAAL,QAAAZ,EAAA+sB,IAAAxtB,EAAAytB,GAAAA,EACA,IAAA/rB,UAAAL,QAAArB,EAAAwtB,GAAAA,EAAA5lB,GAAA8lB,QAAA7I,GAEAvhB,MAAA+O,IAAAiX,aAAAhmB,MAEAA,KAAA6V,KAAAqU,EAAAC,GAEAnqB,KAAAwJ,SAAAhN,GAAAuN,OAAA0c,SAAAzmB,OAEAA,KAAA+O,IAAAV,KAAArO,KAAA4S,GAEA5S,KAAAwJ,SAAAhN,GAAAuN,OAAA2c,UAAA1mB,QAGAqqB,QAAA,SAAAzX,GAEA5S,KAAAsqB,YAEAtqB,KAAAwJ,SAAAhN,GAAAuN,OAAA4c,WAAA3mB,OAEAA,KAAA+O,IAAAuQ,OAAAtf,KAAA4S,GAEA5S,KAAAwJ,SAAAhN,GAAAuN,OAAA6c,YAAA5mB,SAIA+V,SAAA,SAAAnD,GAEA5S,KAAA+O,IAAAuX,aAAAtmB,KAAA4S,IAGA2X,QAAA,SAAA1X,GAEA7S,KAAAyjB,OAEAzjB,KAAA2U,MAAA3U,KAAAyjB,QAEA5Q,GAEA7S,KAAAyoB,UAIA+B,OAAA,SAAAnnB,GAWA,IAAA,GANAyL,GAAA9O,KAAA+O,IACA7C,EAAA4C,EAAA5C,IACA7M,EAAAyP,EAAAzP,OACAsO,EAAAmB,EAAAnB,UACA3L,KAEAnE,EAAA,EAAAA,EAAAwB,EAAAtB,OAAAF,IACA,CACA,GAAA4sB,GAAAprB,EAAAxB,EAEAwF,IAAAonB,IAAApnB,GAEArB,EAAAyoB,GAAAtoB,EAAAkB,EAAAonB,IAEAA,IAAAzqB,QAEAgC,EAAAyoB,GAAAnpB,EAAAtB,KAAAyqB,KAIAhuB,EAAAyP,UAEAlK,GAAAkK,EAGA,IAAAwe,GAAA5b,EAAA0T,OAAAxgB,GACA0gB,EAAA1iB,KAAA6O,MAEA,IAAA6b,IAAAhI,EAEA,KAAA,yDAGA,KAAA,GAAAiI,KAAAhd,GAEAtK,GAAAsnB,IAAAtnB,IAEAsK,EAAAgd,GAAAC,MAAA5qB,KAAAgC,EAAAqB,EAAAsnB,GAIA,OAAA7b,GAAA4F,YAAA1S,IAGA6oB,MAAA,SAAAxrB,GAEAW,KAAA8qB,YAAA9qB,KAAA+O,IAAA8H,OAAAzU,EAAApC,KAAAX,GAAAW,KAAA+O,IAAA1P,QAAA,KAGA0rB,KAAA,SAAAC,GAEA7tB,EAAA6C,KAAA8qB,eAEA9qB,KAAA6V,KAAA7V,KAAA8qB,aAEAE,GAEAhrB,KAAAirB,aAKAA,SAAA,iBAEAjrB,MAAA8qB,aAGAR,QAAA,WAEA,OAAAtqB,KAAAimB,cAAAjmB,KAAA+O,IAAA1C,OAAAgY,IAAArkB,KAAA6O,SAGAuV,cAAA,SAAA8G,EAAAtY,GAEA,GAAAuY,GAAA,GAAAD,GAAAlrB,KAAA4S,EAEA5S,MAAAsoB,WAOAtoB,KAAAsoB,WAAA8C,MAAAD,IALAnrB,KAAAsoB,WAAA6C,EACAnrB,KAAAsoB,WAAA+C,YAQA3H,QAAA,SAAA4H,GAEA,GAAAlM,GAAApf,KAAA+O,IAAA8H,OAAAzU,EAAApC,KAAAA,KAAA+O,IAAA1P,QAAA,IAEAqpB,EAAA1oB,KAAA+O,IAAApB,UACAA,EAAA3N,KAAAuoB,UAEA,KAAA,GAAA3mB,KAAA+L,GAEA+a,EAAA9mB,GAAAiV,OAAA7W,KAAAof,EAAAkM,EAGA,OAAAlM,IAGAmM,QAAA,WAEAvrB,KAAAwJ,SAAAhN,GAAAuN,OAAA8c,SAGAhY,KAAA,SAAA4T,GAOA,MALAziB,MAAA+oB,QAEA/oB,KAAA+oB,MAAA/oB,KAAA+O,IAAAyT,OAAAxiB,KAAAyiB,IAGAziB,KAAA+oB,OAGAyC,MAAA,WAEA,MAAAxrB,MAAA+O,IAAA4T,QAAA3iB,OAGAyrB,KAAA,WAEA,MAAAzrB,MAAA+O,IAAAnN,KAAA,IAAA5B,KAAA6O,QAGA6c,QAAA,WAEA,MAAAvsB,GAAAa,KAAAA,KAAA+O,IAAA7C,IAAA3O,IAGAouB,UAAA,WAEA,MAAA3rB,MAAAskB,UAAA9nB,GAAAqV,OAAA0S,QAGAqH,WAAA,WAEA,MAAA5rB,MAAAskB,UAAA9nB,GAAAqV,OAAAmT,aAGAiB,WAAA,WAEA,MAAAjmB,MAAAskB,SAAA9nB,GAAAqV,OAAAkT,eAGAyE,SAAA,WAEA,QAAAxpB,KAAAyjB,QAGAoI,gBAAA,WAEA,QAAA7rB,KAAAgkB,QAGA8H,OAAA,WAEA,QAAA9rB,KAAAyjB,QAAAzjB,KAAAgkB,SAGA+H,YAAA,SAAAC,GAEA,GAAAC,GAAAjsB,KAAAyjB,OACArE,EAAA4M,GAAAhsB,KAAA0jB,SAAA,GACArkB,EAAAW,KAAA+O,IAAA/B,UAEA,OAAAif,GAAAjpB,EAAAoc,EAAA6M,EAAA5sB,EAAAH,GAAAkgB,GAGAqF,YAAA,WAEA,IAAAzkB,KAAAyjB,OAEA,OAAA,CAGA,IAAAyI,GAAAlsB,KAAA+O,IAAAqI,cACAgI,EAAApf,KAAA0jB,SAAA,GACAuI,EAAAjsB,KAAAyjB,MAEA,KAAA,GAAA9iB,KAAAye,GACA,CACA,GAAA0E,GAAA1E,EAAAze,GACAojB,EAAAkI,EAAAtrB,EAEA,KAAAurB,EAAAvrB,KAKAzB,EAAA4kB,EAAAC,GAEA,OAAA,EAIA,OAAA,GAGAtlB,SAAA,WAEA,MAAAuB,MAAA+O,IAAAlF,UAAA,IAAAsiB,KAAAC,UAAApsB,KAAA0jB,aAKA/b,GAAAnL,GAAAD,WAAA,GACAwK,GAAAvK,GAAAD,UAAA,UAAAC,GAAAuN,OAAAwB,SAAA,GCllBAyD,GAAAzS,WASAsW,MAAA,WAMA,MAJA7S,MAAAgC,OAAAjE,OAAA,EACAiC,KAAAoM,KAAArO,OAAA,EACAiC,KAAAiP,WAEAjP,MAWAuf,IAAA,SAAArT,EAAA1G,GAaA,MAXA0G,KAAAlM,MAAAiP,QAEAjP,KAAAgC,OAAAhC,KAAAiP,QAAA/C,IAAA1G,GAIAxF,KAAAiP,QAAA/C,GAAAlM,KAAAgC,OAAAjE,OACAiC,KAAAgC,OAAAxB,KAAAgF,GACAxF,KAAAoM,KAAA5L,KAAA0L,IAGAlM,MASA6K,IAAA,SAAAqB,GAEA,MAAAlM,MAAAgC,OAAAhC,KAAAiP,QAAA/C,KAUAoT,OAAA,SAAApT,GAEA,GAAAmgB,GAAArsB,KAAAiP,QAAA/C,EAOA,OALAxP,GAAA2vB,IAEArsB,KAAAssB,SAAAD,GAGArsB,MAUAssB,SAAA,SAAAD,GAEA,GAAAngB,GAAAlM,KAAAoM,KAAAigB,GACAE,EAAAvsB,KAAAgC,OAAAwqB,MACAC,EAAAzsB,KAAAoM,KAAAogB,KAWA,OATAH,GAAArsB,KAAAgC,OAAAjE,SAEAiC,KAAAgC,OAAAqqB,GAAAE,EACAvsB,KAAAoM,KAAAigB,GAAAI,EACAzsB,KAAAiP,QAAAwd,GAAAJ,SAGArsB,MAAAiP,QAAA/C,GAEAlM,MASAqkB,IAAA,SAAAnY,GAEA,MAAAA,KAAAlM,MAAAiP,SAQAyd,KAAA,WAEA,MAAA1sB,MAAAgC,OAAAjE,QAGA4uB,SAAA,SAAAjhB,EAAAkhB,GAOA,IAAA,GALAnhB,GAAAmhB,GAAA,GAAA5d,IACAlR,EAAAkC,KAAA0sB,OACA1qB,EAAAhC,KAAAgC,OACAoK,EAAApM,KAAAoM,KAEAvO,EAAA,EAAAC,EAAAD,EAAAA,IACA,CACA,GAAAgvB,GAAA7qB,EAAAnE,GACAiD,EAAAsL,EAAAvO,EAEA6N,GAAA2Y,IAAAvjB,IAEA2K,EAAA8T,IAAAze,EAAA+rB,GAIA,MAAAphB,IAWA2D,OAAA,SAAA/H,EAAAulB,GAOA,IAAA,GALAnhB,GAAAmhB,GAAA,GAAA5d,IACAlR,EAAAkC,KAAA0sB,OACA1qB,EAAAhC,KAAAgC,OACAoK,EAAApM,KAAAoM,KAEAvO,EAAA,EAAAC,EAAAD,EAAAA,IACA,CACA,GAAAgvB,GAAA7qB,EAAAnE,GACAiD,EAAAsL,EAAAvO,EAEAwJ,GAAAwlB,EAAA/rB,IAEA2K,EAAA8T,IAAAze,EAAA+rB,GAIA,MAAAphB,IASAqhB,QAAA,WAKA,IAAA,GAHAC,GAAA/sB,KAAA0sB,OAAA,EACAM,EAAAzuB,KAAA0uB,KAAAF,EAAA,GAEAlvB,EAAA,EAAAmvB,EAAAnvB,EAAAA,IAEA+C,EAAAZ,KAAAgC,OAAAnE,EAAAkvB,EAAAlvB,GACA+C,EAAAZ,KAAAoM,KAAAvO,EAAAkvB,EAAAlvB,EAKA,OAFAmC,MAAAktB,eAEAltB,MAQAmE,SAAA,SAAAzG,GAEA,MAAAyG,GAAAzG,EAAAsC,KAAAgC,SAeA6gB,KAAA,SAAAnlB,GAKA,QAAAyvB,GAAAC,EAAAC,GAMA,IAJA,GAAAC,GAAA5hB,EAAA1J,OAAAzD,KAAAgvB,OAAAF,EAAAD,GAAA,IACAvvB,EAAAuvB,EACAI,EAAAH,EAEAG,GAAA3vB,GACA,CACA,KAAAH,EAAAgO,EAAA1J,OAAAnE,GAAAyvB,GAAA,GAAAzvB,GACA,MAAAH,EAAAgO,EAAA1J,OAAAwrB,GAAAF,GAAA,GAAAE,GAEAA,IAAA3vB,IACA+C,EAAA8K,EAAA1J,OAAAnE,EAAA2vB,GACA5sB,EAAA8K,EAAAU,KAAAvO,EAAA2vB,GACA3vB,IACA2vB,KAIA,MAAA3vB,GAIA,QAAA4vB,GAAAL,EAAAC,GAEA,GAAAhB,GAAAc,EAAAC,EAAAC,EAEAhB,GAAA,EAAAe,GAEAK,EAAAL,EAAAf,EAAA,GAGAgB,EAAAhB,GAEAoB,EAAApB,EAAAgB,GArCA,GAAA3hB,GAAA1L,KAyCAqtB,EAAArtB,KAAA0sB,OAAA,CAUA,OAPAW,GAAA,IAEAI,EAAA,EAAAJ,GAEArtB,KAAAktB,gBAGAltB,MASAktB,aAAA,WAEAltB,KAAAiP,UAEA,KAAA,GAAApR,GAAA,EAAAmO,EAAAhM,KAAAoM,KAAArO,OAAAiO,EAAAnO,EAAAA,IAEAmC,KAAAiP,QAAAjP,KAAAoM,KAAAvO,IAAAA,CAGA,OAAAmC,QCtTAkC,GAAA6H,QAEA2jB,IAAA,MACAC,KAAA,OACAC,KAAA,OACAzM,OAAA,SACA0M,QAAA,UACAC,QAAA,UACAC,MAAA,QACAC,QAAA,UACAziB,QAAA,sDAGAtL,EAAA/C,MAAAgF,IAGAmL,cAAA,SAAA3P,EAAAqG,GAKA,MAHA/D,MAAAtC,WAAA8G,EAAA9G,EAAAqG,GACA/D,KAAAijB,SAEAjjB,MAGAyE,cAAA,SAAA/G,EAAAqG,GAKA,MAHA/D,MAAAtC,WAAA+G,EAAAzE,KAAAtC,WAAAA,EAAAqG,GACA/D,KAAAijB,SAEAjjB,MAGAmE,SAAA,SAAAzG,EAAAqG,GAEA,GAAApG,GAAAD,EAAA8G,EAAA9G,EAAAqG,GAAA/D,KAAAtC,UAEA,OAAAyG,GAAAxG,EAAAqC,OAGAijB,OAAA,SAAAvlB,EAAAqG,GAEA,GAAApG,GAAAD,EAAA8G,EAAA9G,EAAAqG,GAAA/D,KAAAtC,UAQA,OANAyG,GAAAxG,EAAAqC,QAEAA,KAAA6iB,KAAAllB,GACAqC,KAAAkJ,QAAAhH,GAAA6H,OAAA6jB,MAAA5tB,QAGAA,MAGAiuB,KAAA,SAAA7b,EAAAC,GAEA,MAAA,IAAAF,IAAAnS,KAAAoS,EAAAC,IAGAyT,SAAA,SAAA/U,EAAAC,EAAAC,GAEA,GAAA7B,GAAAlJ,EAAA6K,EAAAC,EAAAC,EAEA,OAAA,IAAA9B,IAAAnP,KAAAoP,IAGAA,OAAA,SAAA2B,EAAAC,EAAAC,GAKA,IAAA,GAHA7K,GAAAF,EAAA6K,EAAAC,EAAAC,GACAhQ,EAAA,GAAAjB,MAAA9D,YAEA2B,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAgD,GAAAb,KAAAnC,EAEAuI,GAAAvF,IAEAI,EAAAitB,IAAArtB,GAIA,MAAAI,IAGA0rB,SAAA,SAAApc,EAAA9E,GAIA,IAAA,GAFAxK,GAAAwK,GAAA,GAAAzL,MAAA9D,YAEA2B,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CAIA,IAAA,GAHAgD,GAAAb,KAAAnC,GACAyB,GAAA,EAEAkuB,EAAA,EAAAA,EAAAjd,EAAAxS,SAAAuB,EAAAkuB,IAEAluB,EAAAJ,EAAA2B,EAAA0P,EAAAid,GAGAluB,IAEA2B,EAAAT,KAAAK,GAIA,MAAAI,IAGAktB,UAAA,SAAA5d,EAAA9E,GAIA,IAAA,GAFAxK,GAAAwK,GAAA,GAAAzL,MAAA9D,YAEA2B,EAAA,EAAAA,EAAA0S,EAAAxS,OAAAF,IACA,CAIA,IAAA,GAHAgD,GAAA0P,EAAA1S,GACAyB,GAAA,EAEAkuB,EAAA,EAAAA,EAAAxtB,KAAAjC,SAAAuB,EAAAkuB,IAEAluB,EAAAJ,EAAA2B,EAAAb,KAAAwtB,GAGAluB,IAEA2B,EAAAT,KAAAK,GAIA,MAAAI,IAGAmtB,WAAA,SAAA7d,EAAA9E,GAIA,IAAA,GAFAxK,GAAAwK,GAAA,GAAAzL,MAAA9D,YAEA2B,EAAA,EAAAA,EAAA0S,EAAAxS,OAAAF,IACA,CAIA,IAAA,GAHAgD,GAAA0P,EAAA1S,GACAyB,GAAA,EAEAkuB,EAAA,EAAAA,EAAAxtB,KAAAjC,SAAAuB,EAAAkuB,IAEAluB,EAAAJ,EAAA2B,EAAAb,KAAAwtB,GAGAluB,IAEA2B,EAAAT,KAAAK,GAIA,MAAAI,IAGA4H,MAAA,WAEA7I,KAAAjC,OAAA,EACAiC,KAAAkJ,QAAAhH,GAAA6H,OAAAikB,SAAAhuB,QAGAkuB,IAAA,SAAA1oB,EAAA6oB,GAEAruB,KAAAQ,KAAAgF,GACAxF,KAAAkJ,QAAAhH,GAAA6H,OAAA2jB,KAAA1tB,KAAAwF,IAEA6oB,GAEAruB,KAAAijB,UAIA/T,OAAA,SAAAlN,EAAAqsB,GAEApxB,EAAA+E,IAAAA,EAAAjE,SAEAiC,KAAAQ,KAAApE,MAAA4D,KAAAgC,GACAhC,KAAAkJ,QAAAhH,GAAA6H,OAAA4jB,MAAA3tB,KAAAgC,IAEAqsB,GAEAruB,KAAAijB,WAKAqJ,SAAA,SAAAzuB,EAAAwwB,GAEA,GAAAxwB,GAAA,GAAAA,EAAAmC,KAAAjC,OACA,CACA,GAAAuwB,GAAAtuB,KAAAnC,EAEAmC,MAAAuI,OAAA1K,EAAA,GACAmC,KAAAkJ,QAAAhH,GAAA6H,OAAAoX,QAAAnhB,KAAAsuB,EAAAzwB,IAEAwwB,GAEAruB,KAAAijB,WAKA3D,OAAA,SAAA9Z,GAEA,GAAA3H,GAAAmC,KAAAxC,QAAAgI,EAEA,MAAA3H,GAEAmC,KAAAssB,SAAAzuB,IAIA0wB,UAAA,SAAAvsB,EAAA9C,EAAAmvB,GAEA,GAAApxB,EAAA+E,IAAAA,EAAAjE,OACA,CAGA,IAAA,GAFAywB,MAEA3wB,EAAA,EAAAA,EAAAmE,EAAAjE,OAAAF,IACA,CACA,GAAA2H,GAAAxD,EAAAnE,GACAiD,EAAAd,KAAAxC,QAAAgI,EAAAtG,EAEA,MAAA4B,IAEAd,KAAAuI,OAAAzH,EAAA,GACA0tB,EAAAhuB,KAAAgF,IAWA,MAPAxF,MAAAkJ,QAAAhH,GAAA6H,OAAA8jB,SAAA7tB,KAAAwuB,IAEAH,GAEAruB,KAAAijB,SAGAuL,IAIAC,YAAA,SAAA1d,EAAAC,EAAAC,GAKA,IAAA,GAHA7K,GAAAF,EAAA6K,EAAAC,EAAAC,GACAud,KAEA3wB,EAAAmC,KAAAjC,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAA2H,GAAAxF,KAAAnC,EAEAuI,GAAAZ,KAEAxF,KAAAuI,OAAA1K,EAAA,GACA2wB,EAAAhuB,KAAAgF,IAOA,MAHAxF,MAAAkJ,QAAAhH,GAAA6H,OAAA8jB,SAAA7tB,KAAAwuB,IACAxuB,KAAAijB,SAEAuL,GAGAhxB,QAAA,SAAAgI,EAAAtG,GAIA,IAAA,GAFAiH,GAAAjH,GAAAtB,EAEAC,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IAEA,GAAAsI,EAAAX,EAAAxF,KAAAnC,IAEA,MAAAA,EAIA,OAAA,IAGA6wB,SAAA,SAAA7wB,EAAA2H,EAAA6oB,GAEAruB,KAAAuI,OAAA1K,EAAA,EAAA2H,GACAxF,KAAAkJ,QAAAhH,GAAA6H,OAAA2jB,KAAA1tB,KAAAwF,IAEA6oB,GAEAruB,KAAAijB,UAIA0L,SAAA,SAAAjxB,GAKA,IAAA,GAHAC,GAAA6G,EAAA9G,GAAAsC,KAAAtC,YAAA,GACAkxB,EAAA9yB,EAEA+B,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IAEAF,EAAAixB,EAAA5uB,KAAAnC,IAAA,IAEA+wB,EAAA5uB,KAAAnC,GAIA,OAAA+wB,IAGAC,SAAA,SAAAnxB,GAKA,IAAA,GAHAC,GAAA6G,EAAA9G,GAAAsC,KAAAtC,YAAA,GACAqvB,EAAAjxB,EAEA+B,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IAEAF,EAAAovB,EAAA/sB,KAAAnC,IAAA,IAEAkvB,EAAA/sB,KAAAnC,GAIA,OAAAkvB,IAGA6B,IAAA,SAAAvrB,EAAAqC,GAKA,IAAA,GAHAopB,GAAAlpB,EAAAvC,EAAAqC,GACAkpB,EAAA9yB,EAEA+B,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAkxB,GAAAD,EAAA9uB,KAAAnC,GAEA4F,GAAAmrB,EAAAG,GAAA,GAAA,IAEAH,EAAAG,GAIA,MAAAH,IAGA7B,IAAA,SAAA1pB,EAAAqC,GAKA,IAAA,GAHAopB,GAAAlpB,EAAAvC,EAAAqC,GACAqnB,EAAAjxB,EAEA+B,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAkxB,GAAAD,EAAA9uB,KAAAnC,GAEA4F,GAAAspB,EAAAgC,GAAA,GAAA,IAEAhC,EAAAgC,GAIA,MAAAhC,IAGA5W,WAAA,SAAA9S,EAAAmC,EAAAtG,GAIA,IAAA,GAFAkH,GAAAF,EAAA7C,EAAAmC,EAAAtG,GAEArB,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,EAEA,IAAAuI,EAAAhH,GAEA,MAAAA,GAIA,MAAA,OAGAuF,MAAA,SAAAtB,EAAAqC,GAIA,IAAA,GAFAopB,GAAAlpB,EAAAvC,EAAAqC,GAEA7H,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAkxB,GAAAD,EAAA9uB,KAAAnC,GAEA,IAAAN,EAAAwxB,GAEA,MAAAA,KAKAC,UAAA,SAAA3rB,EAAAmC,EAAAtG,GAIA,IAAA,GAFAkH,GAAAF,EAAA7C,EAAAmC,EAAAtG,GAEArB,EAAAmC,KAAAjC,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAAuB,GAAAY,KAAAnC,EAEA,IAAAuI,EAAAhH,GAEA,MAAAA,GAIA,MAAA,OAGA6vB,KAAA,SAAA5rB,EAAAqC,GAIA,IAAA,GAFAopB,GAAAlpB,EAAAvC,EAAAqC,GAEA7H,EAAAmC,KAAAjC,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAAkxB,GAAAD,EAAA9uB,KAAAnC,GAEA,IAAAN,EAAAwxB,GAEA,MAAAA,KAKAG,UAAA,SAAAJ,EAAAK,EAAAC,EAAAC,GAEA,IAAA,GAAAxxB,GAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAkxB,GAAAD,EAAA9uB,KAAAnC,GAEAsxB,GAAAJ,IAEAK,EAAAL,GAIA,MAAAM,MAGAC,IAAA,SAAAlqB,GAKA,QAAAgqB,GAAApzB,GAEAuL,GAAAvL,EAGA,QAAAqzB,KAEA,MAAA9nB,GAVA,GAAAunB,GAAAxpB,EAAAF,GACAmC,EAAA,CAYA,OAAAvH,MAAAkvB,UAAAJ,EAAApyB,EAAA0yB,EAAAC,IAGAE,IAAA,SAAAnqB,GAMA,QAAAgqB,GAAApzB,GAEAuL,GAAAvL,EACAwzB,IAGA,QAAAH,KAEA,MAAA,KAAAG,EAAA,EAAAjoB,EAAAioB,EAZA,GAAAV,GAAAxpB,EAAAF,GACAmC,EAAA,EACAioB,EAAA,CAaA,OAAAxvB,MAAAkvB,UAAAJ,EAAApyB,EAAA0yB,EAAAC,IAGAI,WAAA,SAAApsB,EAAAmC,EAAAtG,GAKA,IAAA,GAHAkH,GAAAF,EAAA7C,EAAAmC,EAAAtG,GACAwwB,EAAA,EAEA7xB,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,EAEAuI,GAAAhH,IAEAswB,IAIA,MAAAA,IAGAC,MAAA,SAAAtsB,GAEA,IAAA9F,EAAA8F,GAEA,MAAArD,MAAAjC,MAMA,KAAA,GAHA+wB,GAAAlpB,EAAAvC,GACAkE,EAAA,EAEA1J,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAkxB,GAAAD,EAAA9uB,KAAAnC,GAEAN,GAAAwxB,IAEAxnB,IAIA,MAAAA,IAGAqoB,MAAA,SAAA5tB,EAAAoK,EAAAyjB,EAAAC,GAEA,GAAAC,GAAAnqB,EAAA5D,EAAA6tB,EAEA,IAAAzjB,EACA,CAIA,IAAA,GAHA4jB,GAAApqB,EAAAwG,EAAA0jB,GACAvoB,KAEA1J,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,GACA2H,EAAAuqB,EAAA3wB,GACA8M,EAAA8jB,EAAA5wB,EAEAmI,GAAA2E,GAAA1G,EAGA,MAAA+B,GAMA,IAAA,GAFAA,MAEA1J,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,GACA2H,EAAAuqB,EAAA3wB,EAEAmI,GAAA/G,KAAAgF,GAGA,MAAA+B,IAIA0oB,KAAA,SAAA5oB,EAAAnJ,GAIA,IAAA,GAAAL,GAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IAEAwJ,EAAAlL,KAAA+B,EAAA8B,KAAAnC,GAAAA,IAIAqyB,OAAA,SAAAC,EAAAlG,GAEA,IAAA,GAAApsB,GAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IAEAosB,EAAAkG,EAAAlG,EAAAjqB,KAAAnC,GAGA,OAAAosB,IAGAzrB,OAAA,WAEA,GAAAX,GAAAU,KAAAgvB,MAAAhvB,KAAAC,SAAAwB,KAAAjC,OAEA,OAAAiC,MAAAnC,IAGAuyB,MAAA,SAAAC,EAAA5kB,GAOA,IAAA,GALA6kB,GAAA7kB,MACA8kB,EAAA,EACAC,EAAAF,EAAAC,GAAAD,EAAAC,OACAE,EAAA,EAEA5yB,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IAEA2yB,EAAAC,GAAAzwB,KAAAnC,KAEA4yB,GAAAJ,IAEAI,EAAA,EACAF,IACAC,EAAAzyB,OAAAsyB,EACAG,EAAAF,EAAAC,GAAAD,EAAAC,OAYA,OARA,KAAAE,GAEAF,IAGAC,EAAAzyB,OAAA0yB,EACAH,EAAAvyB,OAAAwyB,EAEAD,GAGAlqB,MAAA,SAAA/C,EAAAmC,EAAAtG,GAKA,IAAA,GAHAkH,GAAAF,EAAA7C,EAAAmC,EAAAtG,GACAqI,KAEA1J,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,EAEAuI,GAAAhH,IAEAmI,EAAA/G,KAAApB,GAIA,MAAAmI,IAGAmpB,SAAA,SAAArtB,EAAAmC,EAAAtG,GAIA,IAAA,GAFAkH,GAAAF,EAAA7C,EAAAmC,EAAAtG,GAEArB,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,EAEA,IAAAuI,EAAAhH,GAEA,OAAA,EAIA,OAAA,GAGAhC,QAAA,WAEA,MAAA4C,MAAAiC,SAGA0uB,MAAA,SAAAC,GAEA,GAAAC,GAAAjrB,EAAAgrB,EAAAC,GAAAD,EAAAE,aAAA,KACAxqB,EAAAE,GAAAoqB,EAAAtqB,QACAyqB,EAAAH,EAAAG,WACArlB,IAEA,IAAAjP,EAAAm0B,EAAAC,IAEAD,EAAAC,KAAAE,KAEAA,EAAAH,EAAAC,IAAA,aAGA,IAAA5zB,EAAA2zB,EAAAC,IAEA,IAAA,GAAAlwB,KAAAiwB,GAAAC,GAEAlwB,IAAAowB,KAEAA,EAAApwB,GAAA,QAKA,KAAA,GAAA9C,GAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,GACAqO,EAAA2kB,EAAAzxB,GACAuxB,EAAAjlB,EAAAQ,EAEAykB,KAEAA,EAAAjlB,EAAAQ,GAAA,GAAAlM,MAAA9D,aAGAy0B,EAAAzC,IAAA9uB,GAAA,GAGA,GAAA4xB,GAAA,GAAAhxB,MAAA9D,WAEA80B,GAAA3jB,cAAAujB,EAAAlzB,WAAAkzB,EAAAtjB,qBAEA,KAAA,GAAApB,KAAAR,GACA,CACA,GAAAulB,MACAC,EAAAxlB,EAAAQ,EAEA,KAAA,GAAAilB,KAAAJ,GACA,CACA,GAAAK,GAAAL,EAAAI,EAEA10B,GAAA20B,GAEAH,EAAAE,GAAAD,EAAAE,GAAAD,GAEAl1B,EAAAm1B,KAEAH,EAAAE,GAAAC,EAAAF,EAAAC,IAIAP,EAAAS,SAAA,IAEAJ,EAAAK,OAAAJ,GAGAN,EAAAjB,SAAA,IAEAsB,EAAAM,OAAAL,EAAAnzB,QAGAuI,EAAA2qB,IAEAD,EAAAxwB,KAAAywB,GAMA,MAFAD,GAAA/N,SAEA+N,KAKArpB,GAAAzF,GAAA3F,WACAwK,GAAA7E,GAAA3F,UAAA,SAAA2F,GAAA6H,OAAAwB,SCntBAtL,EAAAiC,GAAAiN,IAEAf,KAAA,SAAA1H,EAAA0I,GAEApP,KAAA0G,OAAAA,IAEA1G,KAAA0G,MAEA1G,KAAAwxB,aAGAxxB,KAAA0G,KAAAA,EACA1G,KAAAwR,WAGAxR,KAAAoP,OAAAA,EACApP,KAAAyW,QAGAgb,UAAA,SAAA1gB,EAAAC,EAAAC,GAEAjR,KAAAoP,OAAAlJ,EAAA6K,EAAAC,EAAAC,GACAjR,KAAAyW,QAGAjF,QAAA,WAEAxR,KAAA0G,KAAAS,GAAAjF,GAAA6H,OAAA2jB,IAAA1tB,KAAAqP,OACArP,KAAA0G,KAAAS,GAAAjF,GAAA6H,OAAA4jB,KAAA3tB,KAAAuP,QACAvP,KAAA0G,KAAAS,GAAAjF,GAAA6H,OAAAoX,OAAAnhB,KAAAyP,UACAzP,KAAA0G,KAAAS,GAAAjF,GAAA6H,OAAA8jB,QAAA7tB,KAAA2P,WACA3P,KAAA0G,KAAAS,GAAAjF,GAAA6H,OAAAgkB,MAAA/tB,KAAA6P,SACA7P,KAAA0G,KAAAS,GAAAjF,GAAA6H,OAAA+jB,QAAA9tB,KAAA+P,WACA/P,KAAA0G,KAAAS,GAAAjF,GAAA6H,OAAAikB,QAAAhuB,KAAA0xB,UAGAF,WAAA,WAEAxxB,KAAA0G,KAAAU,IAAAlF,GAAA6H,OAAA2jB,IAAA1tB,KAAAqP,OACArP,KAAA0G,KAAAU,IAAAlF,GAAA6H,OAAA4jB,KAAA3tB,KAAAuP,QACAvP,KAAA0G,KAAAU,IAAAlF,GAAA6H,OAAAoX,OAAAnhB,KAAAyP,UACAzP,KAAA0G,KAAAU,IAAAlF,GAAA6H,OAAA8jB,QAAA7tB,KAAA2P,WACA3P,KAAA0G,KAAAU,IAAAlF,GAAA6H,OAAAgkB,MAAA/tB,KAAA6P,SACA7P,KAAA0G,KAAAU,IAAAlF,GAAA6H,OAAA+jB,QAAA9tB,KAAA+P,WACA/P,KAAA0G,KAAAU,IAAAlF,GAAA6H,OAAAikB,QAAAhuB,KAAA0xB,UAGAjb,KAAA,WAEA,GAAA/P,GAAA1G,KAAA0G,KACA0I,EAAApP,KAAAoP,MAEApP,MAAAjC,OAAA,CAEA,KAAA,GAAAF,GAAA,EAAAA,EAAA6I,EAAA3I,OAAAF,IACA,CACA,GAAA2H,GAAAkB,EAAA7I,EAEAuR,GAAA5J,IAEAxF,KAAAQ,KAAAgF,GAIAxF,KAAAkJ,QAAAhH,GAAA6H,OAAAgkB,OAAA/tB,QAGAsP,UAAA,SAAAiB,EAAA/K,GAEA,GAAA4J,GAAApP,KAAAoP,MAEAA,GAAA5J,IAEAxF,KAAAkuB,IAAA1oB,IAIAgK,WAAA,SAAAe,EAAAvO,GAKA,IAAA,GAHAoN,GAAApP,KAAAoP,OACA0W,KAEAjoB,EAAA,EAAAA,EAAAmE,EAAAjE,OAAAF,IACA,CACA,GAAA2H,GAAAxD,EAAAnE,EAEAuR,GAAA5J,IAEAsgB,EAAAtlB,KAAAgF,GAIAxF,KAAAkP,OAAA4W,IAGApW,aAAA,SAAAa,EAAA/K,GAEAxF,KAAAsf,OAAA9Z,IAGAoK,cAAA,SAAAW,EAAAvO,GAEAhC,KAAAuuB,UAAAvsB,IAGA8N,YAAA,SAAAS,GAEAvQ,KAAAyW,QAGAzG,cAAA,SAAAO,EAAAohB,GAIA,IAAA,GAFAviB,GAAApP,KAAAoP,OAEAvR,EAAA,EAAAA,EAAA8zB,EAAA5zB,OAAAF,IACA,CACA,GAAA2H,GAAAmsB,EAAA9zB,EAEAuR,GAAA5J,GAEAxF,KAAAkuB,IAAA1oB,GAAA,GAIAxF,KAAAsf,OAAA9Z,GAAA,GAIAxF,KAAAijB,UAGA/S,cAAA,SAAAK,GAEAvQ,KAAA6I,WC7IA5I,EAAAiC,GAAAoK,IAGA8B,KAAA,SAAA1E,EAAA2C,EAAA8D,GAEAnQ,KAAA0L,IAAA,GAAAsD,IACAhP,KAAA0L,IAAA1J,OAAAhC,KACAA,KAAA0J,SAAAA,EACA1J,KAAA6S,MAAAxG,EAAA8D,IAGA8S,OAAA,SAAAvlB,EAAA4P,GAEA,GAAA3P,GAAAD,EAAA8G,EAAA9G,EAAA4P,GAAAtN,KAAAtC,UAEAyG,GAAAxG,EAAAqC,QAEAA,KAAA0L,IAAAmX,KAAAllB,GACAqC,KAAAkJ,QAAAhH,GAAA6H,OAAA6jB,MAAA5tB,SAIA0Q,kBAAA,SAAAC,GAEA,MAAA3Q,MAAA0J,SAAAgH,kBAAAC,IAGAE,WAAA,SAAAF,EAAAR,GAEA,MAAAnQ,MAAA0J,SAAAmH,WAAAF,EAAAR,IAGAwc,SAAA,SAAAtgB,EAAAZ,GAIA,IAAA,GAFAxK,GAAAwK,GAAA,GAAAzL,MAAA9D,YAEA2B,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAgD,GAAAb,KAAAnC,GACAqO,EAAArL,EAAAgO,OACAvP,GAAA,CAEA,IAAA+M,YAAAC,IAEAhN,EAAA+M,EAAAgY,IAAAnY,OAIA,KAAA,GAAArO,GAAA,EAAAA,EAAAwO,EAAAtO,SAAAuB,EAAAzB,IACA,CACA,GAAA6kB,GAAA1iB,KAAA0Q,kBAAArE,EAAAxO,GAEAyB,GAAA4M,IAAAwW,EAIApjB,GAEA2B,EAAAT,KAAAK,GAIA,MAAAI,IAGAktB,UAAA,SAAA9hB,EAAAZ,GAIA,IAAA,GAFAxK,GAAAwK,GAAA,GAAAzL,MAAA9D,YAEA2B,EAAA,EAAAA,EAAAwO,EAAAtO,OAAAF,IACA,CACA,GAAAgD,GAAAwL,EAAAxO,GACAqO,EAAAlM,KAAA0Q,kBAAA7P,EAEAb,MAAAqkB,IAAAnY,IAEAjL,EAAAT,KAAAK,GAIA,MAAAI,IAGAmtB,WAAA,SAAA/hB,EAAAZ,GAIA,IAAA,GAFAxK,GAAAwK,GAAA,GAAAzL,MAAA9D,YAEA2B,EAAA,EAAAA,EAAAwO,EAAAtO,OAAAF,IACA,CACA,GAAAgD,GAAAwL,EAAAxO,GACAqO,EAAAlM,KAAA0Q,kBAAA7P,EAEAb,MAAAqkB,IAAAnY,IAEAjL,EAAAT,KAAAK,GAIA,MAAAI,IAGA4H,MAAA,WAEA,MAAA7I,MAAA0L,IAAAmH,SAGAA,MAAA,SAAAxG,EAAA8D,GAEA,GAAAzE,GAAA1L,KAAA0L,GAIA,IAFAA,EAAAmH,QAEA5V,EAAAoP,GAEA,IAAA,GAAAxO,GAAA,EAAAA,EAAAwO,EAAAtO,OAAAF,IACA,CACA,GAAAuB,GAAAiN,EAAAxO,GACA+G,EAAA5E,KAAA6Q,WAAAzR,EAAA+Q,EAEAvL,IAEA8G,EAAA6T,IAAA3a,EAAAiK,OAAAjK,OAIA,IAAAzH,EAAAkP,GACA,CACA,GAAAzH,GAAA5E,KAAA6Q,WAAAxE,EAAA8D,EAEAvL,IAEA8G,EAAA6T,IAAA3a,EAAAiK,OAAAjK,GAIA5E,KAAAkJ,QAAAhH,GAAA6H,OAAAgkB,OAAA/tB,OACAA,KAAAijB,UAGAiL,IAAA,SAAA9uB,EAAAivB,GAEAruB,KAAA0L,IAAA6T,IAAAngB,EAAAyP,OAAAzP,GACAY,KAAAkJ,QAAAhH,GAAA6H,OAAA2jB,KAAA1tB,KAAAZ,IAEAivB,GAEAruB,KAAAijB,UAIA/T,OAAA,SAAA7C,EAAAgiB,GAEA,GAAApxB,EAAAoP,GACA,CACA,IAAA,GAAAxO,GAAA,EAAAA,EAAAwO,EAAAtO,OAAAF,IACA,CACA,GAAAuB,GAAAiN,EAAAxO,EAEAmC,MAAA0L,IAAA6T,IAAAngB,EAAAyP,OAAAzP,GAGAY,KAAAkJ,QAAAhH,GAAA6H,OAAA4jB,MAAA3tB,KAAAqM,IAEAgiB,GAEAruB,KAAAijB,WAKA1D,IAAA,SAAArT,EAAA9M,EAAAivB,GAEAruB,KAAA0L,IAAA6T,IAAArT,EAAA9M,GACAY,KAAAkJ,QAAAhH,GAAA6H,OAAA2jB,KAAA1tB,KAAAZ,IAEAivB,GAEAruB,KAAAijB,UAIAoB,IAAA,SAAAnY,GAEA,MAAAlM,MAAA0L,IAAA2Y,IAAAnY,IAGArB,IAAA,SAAAqB,GAEA,MAAAlM,MAAA0L,IAAAb,IAAAqB,IAGAoT,OAAA,SAAA3O,EAAA0d,GAEA,GAAAniB,GAAAlM,KAAA0Q,kBAAAC,GACA2d,EAAAtuB,KAAA0L,IAAAb,IAAAqB,EAEAoiB,KAEAtuB,KAAA0L,IAAA4T,OAAApT,GACAlM,KAAAkJ,QAAAhH,GAAA6H,OAAAoX,QAAAnhB,KAAAsuB,EAAA3d,IAEA0d,GAEAruB,KAAAijB,WAKAsL,UAAA,SAAAqD,EAAAvD,GAKA,IAAA,GAHA3iB,GAAA1L,KAAA0L,IACA8iB,KAEA3wB,EAAA,EAAAA,EAAA+zB,EAAA7zB,OAAAF,IACA,CACA,GAAAqO,GAAAlM,KAAA0Q,kBAAAkhB,EAAA/zB,IACAywB,EAAA5iB,EAAAb,IAAAqB,EAEAoiB,KAEA5iB,EAAA4T,OAAApT,GACAsiB,EAAAhuB,KAAA8tB,IAWA,MAPAtuB,MAAAkJ,QAAAhH,GAAA6H,OAAA8jB,SAAA7tB,KAAAwuB,IAEAH,GAEAruB,KAAAijB,SAGAuL,GAGAhxB,QAAA,SAAAmT,GAEA,GAAAzE,GAAAlM,KAAA0Q,kBAAAC,GACA0b,EAAArsB,KAAA0L,IAAAuD,QAAA/C,EAEA,OAAAmgB,KAAAvwB,EAAA,GAAAuwB,GAGAwF,QAAA,WAEA7xB,KAAA0L,IAAAwhB,gBAGA9gB,KAAA,WAEA,MAAApM,MAAA0L,IAAAU,MAGA0gB,QAAA,WAEA9sB,KAAA0L,IAAAohB,WAGA2B,YAAA,SAAAqD,EAAA/gB,EAAAC,EAAAC,GAKA,IAAA,GAHA7K,GAAAF,EAAA6K,EAAAC,EAAAC,GACAud,KAEA3wB,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,GACAqO,EAAA9M,EAAAyP,MAEAzI,GAAAhH,KAEAY,KAAA0L,IAAA4T,OAAApT,GACAsiB,EAAAhuB,KAAApB,GAEA0yB,GAEA1yB,EAAAirB,WAQA,MAHArqB,MAAAkJ,QAAAhH,GAAA6H,OAAA8jB,SAAA7tB,KAAAwuB,IACAxuB,KAAAijB,SAEAuL,GAGAnP,OAAA,SAAA/c,EAAAkD,EAAA2K,GAEA,IAAA,GAAAtS,GAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,EAEAuB,GAAAyW,KAAAvT,EAAAkD,EAAA2K,GACA/Q,EAAAuV,QAMA,MAHA3U,MAAAkJ,QAAAhH,GAAA6H,OAAA+jB,SAAA9tB,KAAAA,OACAA,KAAAijB,SAEAjjB,MAGA+xB,YAAA,SAAA3rB,EAAA9D,EAAAkD,EAAA2K,GAIA,IAAA,GAFAyS,MAEA/kB,EAAA,EAAAA,EAAAmC,KAAAjC,OAAAF,IACA,CACA,GAAAuB,GAAAY,KAAAnC,EAEAuI,GAAAhH,KAEAA,EAAAyW,KAAAvT,EAAAkD,EAAA2K,GACA/Q,EAAAuV,QAEAiO,EAAApiB,KAAApB,IAOA,MAHAY,MAAAkJ,QAAAhH,GAAA6H,OAAA+jB,SAAA9tB,KAAA4iB,IACA5iB,KAAAijB,SAEAL,KC9TA3iB,EAAAqM,GAAA8D,IAGAtF,IAAA,SAAA6F,GAEA3Q,KAAAqQ,QAAAvF,IAAA9K,KAAAZ,MAAAuR,IAGA+Y,OAAA,SAAA/Y,GAEA3Q,KAAAqQ,QAAAqZ,OAAA1pB,KAAAZ,MAAAuR,IAGAkZ,SAAA,SAAAlZ,GAEA3Q,KAAAqQ,QAAAwZ,SAAA7pB,KAAAZ,MAAAuR,IAGAqZ,UAAA,SAAArZ,GAEA,MAAA3Q,MAAAqQ,QAAA2Z,UAAAhqB,KAAAZ,MAAAuR,MElBA1Q,EAAAqM,GAAAwE,IAGAW,SAAA,SAAAV,EAAAC,EAAAC,GAEAjR,KAAAoG,MAAAF,EAAA6K,EAAAC,EAAAC,GACAjR,KAAAyW,QAGAjF,QAAA,WAEAxR,KAAA0J,SAAAvC,GAAAwC,GAAAI,OAAA8W,WAAA7gB,KAAAkR,YACAlR,KAAA0J,SAAAvC,GAAAwC,GAAAI,OAAAgX,aAAA/gB,KAAAoR,gBACApR,KAAA0J,SAAAvC,GAAAwC,GAAAI,OAAA+W,aAAA9gB,KAAAsR,iBAGAkgB,WAAA,WAEAxxB,KAAA0J,SAAAtC,IAAAuC,GAAAI,OAAA8W,WAAA7gB,KAAAkR,YACAlR,KAAA0J,SAAAtC,IAAAuC,GAAAI,OAAAgX,aAAA/gB,KAAAoR,gBACApR,KAAA0J,SAAAtC,IAAAuC,GAAAI,OAAA+W,aAAA9gB,KAAAsR,iBAGAmF,KAAA,WAEA,GAAArQ,GAAApG,KAAAoG,MACAsF,EAAA1L,KAAA0L,IACAW,EAAArM,KAAA0J,SAAA2C,MAEAX,GAAAmH,OAEA,KAAA,GAAAhV,GAAA,EAAAA,EAAAwO,EAAAtO,OAAAF,IACA,CACA,GAAAuB,GAAAiN,EAAAxO,EAEAuI,GAAAhH,IAEAsM,EAAA6T,IAAAngB,EAAAyP,OAAAzP,GAIAY,KAAAkJ,QAAAhH,GAAA6H,OAAAgkB,OAAA/tB,QAGAmR,iBAAA,SAAA/R,EAAA+Q,GAEAnQ,KAAAoG,MAAAhH,IAEAY,KAAAkuB,IAAA9uB,IAIAiS,mBAAA,SAAAjS,GAEAY,KAAAsf,OAAAlgB,IAGAmS,mBAAA,SAAAnS,EAAA+Q,GAEA,GAAAjE,GAAA9M,EAAAyP,MAEA7O,MAAA0L,IAAA2Y,IAAAnY,GAEAlM,KAAAoG,MAAAhH,IAEAY,KAAAsf,OAAAlgB,GAKAY,KAAAoG,MAAAhH,IAEAY,KAAAkuB,IAAA9uB,MCzEAsS,GAAAG,QAEAyP,QAAA,UACAxP,QAAA,UACAkgB,QAAA,WAGAtgB,GAAA3H,QAEAkoB,MAAA,QACAngB,QAAA,UACAkgB,QAAA,WAGA/xB,EAAA6Q,GAAAY,IAGAwgB,SAAA,SAAAvgB,EAAAwgB,EAAAC,GASA,MAPApyB,MAAA2R,MAAAA,EAEAwgB,GAEAnyB,KAAAyW,KAAA2b,GAGApyB,MAGAyW,KAAA,SAAA2b,GAWA,MATApyB,MAAA4R,OAAAF,GAAAG,OAAAyP,QAEA8Q,GAEApyB,KAAAqyB,SAGAryB,KAAA0J,SAAAuD,KAAA0E,MAAA3R,KAAA2R,MAAA3R,KAAA+R,UAAA/R,KAAAiS,WAEAjS,MAGAqyB,OAAA,WAMA,MAJAryB,MAAAoH,IAAAsK,GAAA3H,OAAAkoB,OACAjyB,KAAAoH,IAAAsK,GAAA3H,OAAA+H,SACA9R,KAAAoH,IAAAsK,GAAA3H,OAAAioB,SAEAhyB,MAGAsW,MAAA,SAAAjP,EAAAnJ,GAWA,MATA8B,MAAA4R,SAAAF,GAAAG,OAAAyP,QAEAthB,KAAAmI,KAAAuJ,GAAA3H,OAAAkoB,MAAA5qB,EAAAnJ,GAIAmJ,EAAAlL,KAAA+B,EAAA8B,MAGAA,MAGAmK,QAAA,SAAA9C,EAAAnJ,GAWA,MATA8B,MAAA4R,SAAAF,GAAAG,OAAAyP,QAEAthB,KAAAmI,KAAAuJ,GAAA3H,OAAA+H,QAAAzK,EAAAnJ,GAEA8B,KAAA4R,SAAAF,GAAAG,OAAAC,SAEAzK,EAAAlL,KAAA+B,EAAA8B,MAGAA,MAGAmf,QAAA,SAAA9X,EAAAnJ,GAWA,MATA8B,MAAA4R,SAAAF,GAAAG,OAAAyP,QAEAthB,KAAAmI,KAAAuJ,GAAA3H,OAAAioB,QAAA3qB,EAAAnJ,GAEA8B,KAAA4R,SAAAF,GAAAG,OAAAmgB,SAEA3qB,EAAAlL,KAAA+B,EAAA8B,MAGAA,MAGAgS,cAAA,SAAA3F,GAEArM,KAAA4R,OAAAF,GAAAG,OAAAC,QACA9R,KAAA6S,MAAAxG,GAAA,GACArM,KAAAoH,IAAAsK,GAAA3H,OAAAioB,QAAAhyB,KAAAiS,WACAjS,KAAAkJ,QAAAwI,GAAA3H,OAAAkoB,OAAAjyB,OACAA,KAAAkJ,QAAAwI,GAAA3H,OAAA+H,SAAA9R,QAGAkS,cAAA,SAAA7F,EAAAimB,GAEAtyB,KAAA4R,OAAAF,GAAAG,OAAAmgB,QACAhyB,KAAAoH,IAAAsK,GAAA3H,OAAA+H,QAAA9R,KAAA+R,WACA/R,KAAAkJ,QAAAwI,GAAA3H,OAAAkoB,OAAAjyB,OACAA,KAAAkJ,QAAAwI,GAAA3H,OAAAioB,SAAAhyB,UC7GAmS,GAAApI,QAEA8c,OAAA,SACAtb,QAAA,UAGAtL,EAAA/C,MAAAiV,IAGAogB,YAAA,SAAAngB,GAEApS,KAAAoS,SAAAA,EACApS,KAAAuS,iBAGAigB,aAAA,SAAAngB,GAEA,GAAAogB,GAAAl0B,KAAAwuB,IAAA,EAAAxuB,KAAAqwB,IAAAvc,EAAArS,KAAAwS,UAAA,GAEAigB,KAAAzyB,KAAAqS,YAEArS,KAAAqS,UAAAogB,EACAzyB,KAAAqf,SACArf,KAAAkJ,QAAAiJ,GAAApI,OAAA8c,QAAA7mB,SAIAyS,cAAA,SAAAlC,GAEAA,IAAAvQ,KAAAuQ,aAEAvQ,KAAAuQ,YAEAvQ,KAAAwxB,aAGAxxB,KAAAuQ,WAAAA,EACAvQ,KAAAwR,UACAxR,KAAAuS,eAAA,KAIAf,QAAA,WAEAxR,KAAAuQ,WAAApJ,GAAAjF,GAAA6H,OAAAwB,QAAAvL,KAAAsS,YAGAkf,WAAA,WAEAxxB,KAAAuQ,WAAAnJ,IAAAlF,GAAA6H,OAAAwB,QAAAvL,KAAAsS,YAGAogB,KAAA,WAEA1yB,KAAAwyB,aAAAxyB,KAAAqS,UAAA,IAGAsgB,KAAA,WAEA3yB,KAAAwyB,aAAAxyB,KAAAqS,UAAA,IAGAugB,KAAA,SAAAlyB,GAEAV,KAAAwyB,aAAA9xB,IAGAiE,MAAA,WAEA3E,KAAAwyB,aAAA,IAGAvD,KAAA,WAEAjvB,KAAAwyB,aAAAxyB,KAAAwS,UAAA,IAGAD,cAAA,SAAAsgB,GAEA,GAAA/0B,GAAAkC,KAAAuQ,WAAAxS,OACAyU,EAAAjU,KAAA0uB,KAAAnvB,EAAAkC,KAAAoS,UACAC,EAAA9T,KAAAwuB,IAAA,EAAAxuB,KAAAqwB,IAAA5uB,KAAAqS,UAAAG,EAAA,IACApW,EAAAy2B,GAAA7yB,KAAAqS,YAAAA,GAAArS,KAAAjC,SAAAiC,KAAAoS,SACA0gB,EAAA12B,GAAA4D,KAAAwS,YAAAA,CAEAxS,MAAAqS,UAAAA,EACArS,KAAAwS,UAAAA,EAEApW,GAEA4D,KAAAqf,SAEAyT,GAEA9yB,KAAAkJ,QAAAiJ,GAAApI,OAAA8c,QAAA7mB,QAIAqf,OAAA,WAEA,GAAA7J,GAAAxV,KAAAuQ,WACAzS,EAAA0X,EAAAzX,OACAg1B,EAAA/yB,KAAAqS,UAAArS,KAAAoS,SACA4gB,EAAAz0B,KAAAqwB,IAAAmE,EAAA/yB,KAAAoS,SAAAtU,GACAC,EAAAi1B,EAAAD,CAEA/yB,MAAAjC,OAAAA,CAEA,KAAA,GAAAF,GAAA,EAAAE,EAAAF,EAAAA,IAEAmC,KAAAnC,GAAA2X,EAAAud,MAIA31B,QAAA,WAEA,MAAA4C,MAAAiC,WAKA0F,GAAAwK,GAAA5V,WACAwK,GAAAoL,GAAA5V,UAAA,SAAA4V,GAAApI,OAAAwB,SClIAjH,GAAA8lB,SAEA/I,KAAA,EACA4R,MAAA,EACAC,KAAA,EACAC,OAAA,EACAlS,KAAA,EACAmS,OAAA,EACAC,OAAA,EACA9R,IAAA,GAOA7O,GAAAnW,WAEAsW,MAAA,SAAAzT,EAAAwT,GAEA5S,KAAAZ,MAAAA,EACAY,KAAA4S,QAAAlW,EAAAkW,GAAAA,EAAAtO,GAAA8lB,QAAA7I,IACAvhB,KAAA8O,GAAA1P,EAAA2P,IACA/O,KAAA0yB,KAAA,KACA1yB,KAAAszB,UAAA,GAGAC,WAAA,SAAA3gB,GAEA,GAAA9T,GAAA8T,GAAA5S,KAAAwzB,UACAC,EAAAzzB,KAAA4S,OAEA,OAAA,MAAA9T,EAAA20B,IAGAC,WAAA,SAAA50B,GAEA,GAAA20B,GAAAzzB,KAAA4S,OAEA,OAAA,MAAA9T,EAAA20B,IAGArI,MAAA,SAAAD,GAEAnrB,KAAA0yB,OAAAvH,EAAAwI,WAEA3zB,KAAA0yB,KAAAtH,MAAAD,GAIAnrB,KAAA0yB,KAAAvH,GAIAyI,QAAA,SAAA1I,GAEA,GAAA2I,IAAA7zB,KAAA0yB,IAOA,OALAmB,KAEA7zB,KAAA0yB,KAAA,GAAAxH,GAAAlrB,KAAAZ,MAAAY,KAAA4S,UAGAihB,GAGAC,WAAA,SAAA5I,GAEA,GAAAnF,GAAA,GAAAmF,GAAAlrB,KAAAZ,MAAAY,KAAA4S,QAEAmT,GAAA2M,KAAA1yB,KAAA0yB,KACA1yB,KAAA0yB,KAAA3M,GAGAsF,QAAA,WAEArrB,KAAA8O,GAAAhC,oBAEA9M,KAAA+zB,IAAA/zB,KAAA8O,GAAA9O,KAAAZ,QAGA20B,IAAA,SAAAjlB,EAAA1P,GAEA,KAAA,sCAGA40B,OAAA,WAmBA,MAjBAh0B,MAAAszB,WAEAtzB,KAAAszB,UAAA,GAEAtzB,KAAAZ,MAAAkpB,WAAAtoB,KAAA0yB,OAEA1yB,KAAA0yB,KAAArH,UAGArrB,KAAA8O,GAAAhC,oBAEA,IAAA9M,KAAA8O,GAAAhC,mBAEA9M,KAAA8O,GAAA0W,mBAIAxlB,MAGAmK,QAAA,WAEA,MAAAlM,GAAA+B,KAAAA,KAAAgS,gBAGAA,cAAA,WAEAhS,KAAA+R,UAAA3V,MAAA4D,KAAA5B,WACA4B,KAAAg0B,UAGAjiB,UAAA,aAKAoN,QAAA,WAEA,MAAAlhB,GAAA+B,KAAAA,KAAAkS,gBAGAA,cAAA,WAEAlS,KAAAiS,UAAA7V,MAAA4D,KAAA5B,WACA4B,KAAAg0B,UAGA/hB,UAAA,cCnIAxS,EAAAiT,GAAAC,IAGA6gB,UAAAlvB,GAAA8lB,QAAA6I,MAEAU,YAAA,EAEApc,KAAA,gBAEAwc,IAAA,SAAAjlB,EAAA1P,GAEAA,EAAA6mB,cAEA7mB,EAAAoK,SAAAhN,GAAAuN,OAAAge,iBAAA3oB,IAEAY,KAAAg0B,UAEAh0B,KAAAuzB,cAAAzkB,EAAArF,QAAAnF,GAAA8c,MAAAG,IAEAzS,EAAA5B,MAAArC,IAAAzL,EAAAyP,OAAA7O,KAAAmK,UAAAnK,KAAAmf,YAIA7a,GAAAiG,MAAAjG,GAAAkG,OAAAgQ,kBAAApb,GAEAA,EAAAoK,SAAAhN,GAAAuN,OAAA+d,UAAA1oB,IAEAY,KAAA8zB,WAAAhhB,IACA9S,KAAAg0B,WAIAjiB,UAAA,SAAA7F,EAAAkT,GAEA,GAAAhgB,GAAAY,KAAAZ,KAEAjC,GAAAiiB,IAEAhgB,EAAAyW,KAAAuJ,GAGA9a,GAAAiG,MAAAjG,GAAAkG,OAAAiQ,UAAArb,EAAAggB,GAEAhgB,EAAAoK,SAAAhN,GAAAuN,OAAA+d,UAAA1oB,IAEAY,KAAAuzB,WAAAjvB,GAAA8lB,QAAA8I,QAAA9zB,EAAA6mB,cAEAjmB,KAAA8zB,WAAAhhB,KAIAb,UAAA,SAAA9I,GAEA,GAAA/J,GAAAY,KAAAZ,KAEAkF,IAAAiG,MAAAjG,GAAAkG,OAAAiQ,UAAArb,EAAA+J,GAEA/J,EAAAoK,SAAAhN,GAAAuN,OAAAge,iBAAA3oB,IAEAY,KAAAuzB,WAAAjvB,GAAA8lB,QAAA8I,QAAA9zB,EAAA6mB,cAEAjmB,KAAA8zB,WAAAhhB,OC7DArT,EAAAiT,GAAAI,IAGA0gB,UAAAlvB,GAAA8lB,QAAA8I,KAEAS,YAAA,EAEApc,KAAA,iBAEAwc,IAAA,SAAAjlB,EAAA1P,GAEAA,EAAA6mB,cAEA7mB,EAAAoK,SAAAhN,GAAAuN,OAAAme,kBAAA9oB,IAEAY,KAAAg0B,UAEAh0B,KAAAuzB,aAEAzkB,EAAA7B,KAAApC,IAAAzL,EAAAY,KAAAmK,UAAAnK,KAAAmf,YAIA/f,EAAAoK,SAAAhN,GAAAuN,OAAAke,WAAA7oB,IAEAY,KAAAg0B,WAIAjiB,UAAA,SAAAxD,GAEA,GAAAO,GAAA9O,KAAA8O,GACA1P,EAAAY,KAAAZ,KAEAjC,GAAAoR,IAEAO,EAAAyF,cAAAhG,EAAAnP,EAAAyP,OAAAzP,GAAA,GAGAkF,GAAAiG,MAAAjG,GAAAkG,OAAAmQ,WAAAvb,EAAAmP,GAEAnP,EAAAoK,SAAAhN,GAAAuN,OAAAke,WAAA7oB,KAGA6S,UAAA,SAAA1D,EAAAqD,GAEA,GAAAxS,GAAAY,KAAAZ,KAEAkF,IAAAiG,MAAAjG,GAAAkG,OAAAoQ,iBAAAxb,EAAAmP,EAAAqD,GAEA,IAAAA,EAEAxS,EAAAoK,SAAAhN,GAAAuN,OAAAoe,kBAAA/oB,IAIAA,EAAAoK,SAAAhN,GAAAuN,OAAAme,kBAAA9oB,OCxDAK,EAAAiT,GAAAK,IAGAygB,UAAAlvB,GAAA8lB,QAAA/I,KAEAsS,YAAA,EAEApc,KAAA,mBAEAwc,IAAA,SAAAjlB,EAAA1P,GAEA0P,EAAArF,OAAAnF,GAAA8c,MAAAC,KAEArhB,KAAAg0B,SAIAllB,EAAA5B,MAAAoS,OAAAlgB,EAAAyP,OAAA7O,KAAAmK,UAAAnK,KAAAmf,cCjBA1f,EAAAiT,GAAAM,IAGAwgB,UAAAlvB,GAAA8lB,QAAA6I,MAEAU,YAAA,EAEApc,KAAA,mBAEAwc,IAAA,SAAAjlB,EAAA1P,GAEAA,EAAAklB,QAAA9nB,GAAAqV,OAAAkT,cAEAjW,EAAArF,QAAAnF,GAAA8c,MAAAC,MAAAjiB,EAAA4kB,QAAAhkB,KAAAuzB,aASAn0B,EAAAqkB,QAEArkB,EAAA4kB,OAAAM,QAAAllB,EAAAklB,QAEAxV,EAAA5B,MAAAqS,IAAAngB,EAAAyP,OAAAzP,EAAA4kB,OAAAhkB,KAAAmK,UAAAnK,KAAAmf,aAIA7a,GAAAiG,MAAAjG,GAAAkG,OAAA8P,qBAAAlb,GAEA0P,EAAA5B,MAAAoS,OAAAlgB,EAAAyP,OAAA7O,KAAAmK,UAAAnK,KAAAmf,aAjBA7a,GAAAiG,MAAAjG,GAAAkG,OAAA6P,kBAAAjb,GAEAA,EAAAoK,SAAAhN,GAAAuN,OAAAwd,aAAAnoB,IAEAY,KAAA8zB,WAAA5gB,IACAlT,KAAAg0B,WAgBAjiB,UAAA,SAAA7F,EAAAkT,EAAA6U,GAEA,GAAA70B,GAAAY,KAAAZ,KAEAkF,IAAAiG,MAAAjG,GAAAkG,OAAAoP,aAAAxa,GAEAA,EAAAoK,SAAAhN,GAAAuN,OAAAwd,aAAAnoB,IAEAA,EAAAqkB,QAAAzjB,KAAAuzB,WAAAjvB,GAAA8lB,QAAAiJ,SAEAj0B,EAAAglB,cAAAlR,GAAAlT,KAAA4S,UAIAX,UAAA,SAAA9I,GAEA,GAAA/J,GAAAY,KAAAZ,KAEAkF,IAAAiG,MAAAjG,GAAAkG,OAAA2P,mBAAA/a,EAAA+J,GAEA/J,EAAAoK,SAAAhN,GAAAuN,OAAAyd,oBAAApoB,IAEAA,EAAAqkB,QAAAzjB,KAAAuzB,WAAAjvB,GAAA8lB,QAAAiJ,SAEAj0B,EAAAglB,cAAAlR,GAAAlT,KAAA4S,YC5DAnT,EAAAiT,GAAAO,IAGAugB,UAAAlvB,GAAA8lB,QAAA6I,MAEAU,YAAA,EAEApc,KAAA,iBAEAwc,IAAA,SAAAjlB,EAAA1P,GAEA,GAAA8M,GAAA9M,EAAAyP,MAEAzP,GAAAklB,QAAA9nB,GAAAqV,OAAAkT,cAEAjW,EAAAuX,iBAAAjnB,GAEA0P,EAAArF,QAAAnF,GAAA8c,MAAAC,MAAArhB,KAAAuzB,aAOAzkB,EAAA5B,MAAAoS,OAAApT,EAAAlM,KAAAmK,UAAAnK,KAAAmf,YALAnf,KAAAk0B,eACAl0B,KAAAg0B,WAQAjiB,UAAA,WAEA/R,KAAAk0B,gBAGAjiB,UAAA,WAEAjS,KAAAk0B,gBAGAA,aAAA,WAEA,GAAA90B,GAAAY,KAAAZ,KAEAA,GAAAklB,QAAA9nB,GAAAqV,OAAAuT,cAEAhmB,GAAA4kB,aACA5kB,GAAA+0B,cACA/0B,GAAAg1B,eACAh1B,GAAAqkB,UC/CAhkB,EAAAiT,GAAAQ,IAGAsgB,UAAAlvB,GAAA8lB,QAAAiJ,OAEAM,YAAA,EAEApc,KAAA,oBAEAwc,IAAA,SAAAjlB,EAAA1P,GAEAY,KAAA0zB,WAAApvB,GAAA8lB,QAAA8I,OAEAlzB,KAAAq0B,aAEAj1B,EAAAoK,SAAAhN,GAAAuN,OAAA2d,cAAAtoB,IAEAY,KAAAg0B,WAIA50B,EAAAklB,QAAA9nB,GAAAqV,OAAAkT,cAEAjW,EAAA7B,KAAAqS,OAAAlgB,EAAAY,KAAAmK,UAAAnK,KAAAmf,aAIApN,UAAA,SAAAxD,GAEAvO,KAAAk0B,gBAGAjiB,UAAA,SAAA1D,EAAAqD,GAEA,GAAAxS,GAAAY,KAAAZ,MACA8M,EAAA9M,EAAAyP,MAEA,OAAA+C,GAAA,MAAAA,GAEAtN,GAAAiG,MAAAjG,GAAAkG,OAAAqP,eAAAza,EAAA8M,GAEAlM,KAAAk0B,gBAEA,IAAAtiB,GAEAtN,GAAAiG,MAAAjG,GAAAkG,OAAAsP,aAAA1a,EAAAwS,EAAA1F,GAEA9M,EAAAoK,SAAAhN,GAAAuN,OAAA4d,qBAAAvoB,MAKAkF,GAAAkc,qBAGAlc,GAAAqb,OAQAvgB,EAAAoK,SAAAhN,GAAAuN,OAAA4d,qBAAAvoB,KANAkF,GAAA6D,KAAA,SAAAnI,KAAAs0B,aAAAt0B,MAEAZ,EAAAoK,SAAAhN,GAAAuN,OAAA6d,qBAAAxoB,KAOAkF,GAAAiG,MAAAjG,GAAAkG,OAAAuP,eAAA3a,KAIA80B,aAAA,WAEA,GAAAplB,GAAA9O,KAAA8O,GACA1P,EAAAY,KAAAZ,MACA8M,EAAA9M,EAAAyP,MAEAvK,IAAAiG,MAAAjG,GAAAkG,OAAAyP,cAAA7a,EAAA8M,GAGA9M,EAAAklB,QAAA9nB,GAAAqV,OAAAuT,QAGAhmB,EAAAoK,SAAAhN,GAAAuN,OAAA2d,cAAAtoB,IAGAY,KAAA8zB,WAAA7gB,IAGAjT,KAAAq0B,mBAGAvlB,GAAAvC,IAAAL,IAGAmoB,WAAA,WAEA,GAAAr0B,KAAAuzB,WAAAjvB,GAAA8lB,QAAAnJ,MACA,CACA,GAAAnS,GAAA9O,KAAA8O,GACA1P,EAAAY,KAAAZ,MACA8M,EAAA9M,EAAAyP,MAGAvK,IAAAiG,MAAAjG,GAAAkG,OAAAmP,eAAAva,EAAA8M,GAEA4C,EAAA3B,MAEA4Y,GAAApc,GAAAsX,KAAAE,OACAjV,IAAAA,MAKAooB,aAAA,WAEA,GAAAl1B,GAAAY,KAAAZ,KAEAkF,IAAAiG,MAAAjG,GAAAkG,OAAAwP,cAAA5a,GAEAA,EAAAglB,cAAAlR,OCvHAzT,EAAAiT,GAAAS,IAGAqgB,UAAAlvB,GAAA8lB,QAAA6I,MAEAU,YAAA,EAEApc,KAAA,iBAEAwc,IAAA,SAAAjlB,EAAA1P,GAEA,GAAAA,EAAA6mB,aAEA3hB,GAAAiG,MAAAjG,GAAAkG,OAAA+O,mBAAAna,GAEAA,EAAAoK,SAAAhN,GAAAuN,OAAAkd,kBAAA7nB,IAEAY,KAAAg0B,aAEA,IAAAllB,EAAArF,QAAAnF,GAAA8c,MAAAC,MAAArhB,KAAAuzB,aAeA,CACA,GAAArnB,GAAA9M,EAAAyP,OACA0lB,EAAAn1B,EAAAskB,SAAA,EAEA1jB,MAAAw0B,WAAA1lB,EAAA1P,GAEAA,EAAA4kB,OAEAnkB,EAAA00B,EAAAn1B,EAAA4kB,SAIA5kB,EAAA4kB,OAAAuQ,EAEAn1B,EAAAqkB,SAEArkB,EAAA4kB,OAAAP,OAAArkB,EAAAqkB,SAIArkB,EAAA4kB,OAAAM,QAAAllB,EAAAklB,QACAllB,EAAA4kB,OAAAmQ,QAAA/0B,EAAA+0B,QACA/0B,EAAA4kB,OAAAoQ,SAAAh1B,EAAAg1B,SAEAtlB,EAAA5B,MAAAqS,IAAArT,EAAA9M,EAAA4kB,OAAAhkB,KAAAmK,UAAAnK,KAAAmf,eArCAnf,MAAAuzB,WAAAjvB,GAAA8lB,QAAAiJ,SAEArzB,KAAA4zB,QAAAvgB,KAEArT,KAAAw0B,WAAA1lB,EAAA1P,GAIAA,EAAAoK,SAAAhN,GAAAuN,OAAAid,WAAA5nB,IAEAY,KAAAg0B,UA+BAQ,WAAA,SAAA1lB,EAAA1P,GAEA,GAAAq1B,GAAAr1B,EAAAskB,SAAA,GACAoP,EAAA1zB,EAAA2sB,YAAA0I,GAEAxS,EAAAnT,EAAA8S,SAAA6S,EAAA3B,EACA4B,EAAA5lB,EAAA+S,YAAA4S,EAAA3B,CAEA1zB,GAAAklB,QAAA9nB,GAAAqV,OAAAmT,YACA5lB,EAAA+0B,QAAAlS,EACA7iB,EAAAg1B,SAAAM,GAGAC,WAAA,SAAAv1B,GAEAA,EAAAklB,QAAA9nB,GAAAqV,OAAA0S,OAEAnlB,EAAA4kB,OAAAM,QAAAllB,EAAAklB,cAEAllB,GAAA4kB,OAAAmQ,cACA/0B,GAAA4kB,OAAAoQ,SAEAp0B,KAAA8zB,WAAA1gB,KAGArB,UAAA,SAAA7F,EAAAkT,EAAA6U,GAEA,GAAA70B,GAAAY,KAAAZ,KAEAkF,IAAAiG,MAAAjG,GAAAkG,OAAA6O,WAAAja,GAEAY,KAAA4S,QAEA5S,KAAA4zB,QAAAvgB,IAIArT,KAAA20B,WAAAv1B,GAGAA,EAAAoK,SAAAhN,GAAAuN,OAAAid,WAAA5nB,KAGA6S,UAAA,SAAA9I,GAEA,GAAA/J,GAAAY,KAAAZ,KAEAkF,IAAAiG,MAAAjG,GAAAkG,OAAA8O,iBAAAla,EAAA+J,GAEAnJ,KAAA4S,QAEA5S,KAAA4zB,QAAAvgB,IAIArT,KAAA20B,WAAAv1B,GAGAA,EAAAoK,SAAAhN,GAAAuN,OAAAkd,kBAAA7nB,OCxHAK,EAAAiT,GAAAU,IAGAogB,UAAAlvB,GAAA8lB,QAAA6I,MAEAU,YAAA,EAEApc,KAAA,eAEAwc,IAAA,SAAAjlB,EAAA1P,GAEA,GAAA8M,GAAA9M,EAAAyP,OACA0lB,EAAAn1B,EAAA4kB,MAEAlV,GAAArF,QAAAnF,GAAA8c,MAAAG,KAAArV,GAAAqoB,GAAAv0B,KAAAuzB,aAEAzkB,EAAA5B,MAAAqS,IAAArT,EAAAqoB,EAAAv0B,KAAAmK,UAAAnK,KAAAmf,WAIAnf,KAAAg0B,YCpBAv0B,EAAAiT,GAAAW,IAGAmgB,UAAAlvB,GAAA8lB,QAAAiJ,OAEAM,YAAA,EAEApc,KAAA,kBAEAwc,IAAA,SAAAjlB,EAAA1P,GAEAA,EAAA6mB,cAEA3hB,GAAAiG,MAAAjG,GAAAkG,OAAAiP,oBAAAra,GAEAY,KAAA40B,WAAAx1B,GAAA,EAAA5C,GAAAuN,OAAAqd,mBACApnB,KAAAg0B,UAEA50B,EAAA6pB,mBAAAjpB,KAAA60B,SAAA70B,OAIA8O,EAAAkT,QAAA5iB,EAAA+0B,UAAAn0B,KAAA0zB,WAAApvB,GAAA8lB,QAAA8I,OAEAlzB,KAAA80B,WACA90B,KAAA40B,WAAAx1B,GAAA,EAAA5C,GAAAuN,OAAAod,YACAnnB,KAAAg0B,WAIA50B,EAAAklB,QAAA9nB,GAAAqV,OAAAmT,YAEA5lB,EAAAqkB,OAEA3U,EAAA7B,KAAAoS,OAAAjgB,EAAAA,EAAA+0B,QAAAn0B,KAAAmK,UAAAnK,KAAAmf,WAIArQ,EAAA7B,KAAA9M,OAAAf,EAAAA,EAAA+0B,QAAAn0B,KAAAmK,UAAAnK,KAAAmf,YAlBAnf,KAAAg0B,UAuBAjiB,UAAA,SAAAxD,GAEA,GAAAnP,GAAAY,KAAAZ,KAEAkF,IAAAiG,MAAAjG,GAAAkG,OAAA0O,YAAA9Z,GAEAY,KAAA+0B,WAAAxmB,IAGA0D,UAAA,SAAA1D,EAAAqD,GAEA,GAEAxS,IADAY,KAAA8O,GACA9O,KAAAZ,MAGA,OAAAwS,GAEAtN,GAAAiG,MAAAjG,GAAAkG,OAAAqO,cAAAzZ,EAAAmP,GAEAvO,KAAA+0B,WAAAxmB,IAEA,MAAAqD,GAAA,MAAAA,GAEAtN,GAAAiG,MAAAjG,GAAAkG,OAAAsO,iBAAA1Z,GAEAY,KAAA8zB,WAAA7gB,IAEA7T,EAAAoK,SAAAhN,GAAAuN,OAAAqd,mBAAAhoB,KAEA,IAAAwS,GAEAtN,GAAAiG,MAAAjG,GAAAkG,OAAAuO,WAAA3Z,EAAAwS,GAEA5R,KAAA40B,WAAAx1B,GAAA,EAAA5C,GAAAuN,OAAAqd,qBAKA9iB,GAAAkc,qBAGAlc,GAAAqb,OAQA3f,KAAA40B,WAAAx1B,GAAA,EAAA5C,GAAAuN,OAAAqd,oBANA9iB,GAAA6D,KAAA,SAAAnI,KAAAs0B,aAAAt0B,MAEAZ,EAAAoK,SAAAhN,GAAAuN,OAAAsd,mBAAAjoB,KAOAkF,GAAAiG,MAAAjG,GAAAkG,OAAAwO,aAAA5Z,KAIAw1B,WAAA,SAAAx1B,EAAA41B,EAAAnpB,GAEAzM,EAAAklB,QAAA9nB,GAAAqV,OAAA0S,OAEAvkB,KAAAoyB,aAAAhzB,GAEA41B,GAEAh1B,KAAA8zB,WAAA1gB,IAGAvH,GAEAzM,EAAAoK,SAAAqC,GAAAzM,KAIAgzB,aAAA,SAAAhzB,SAEAA,GAAA+0B,cACA/0B,GAAAg1B,SAEAh1B,EAAA4kB,SAEA5kB,EAAA4kB,OAAAM,QAAAllB,EAAAklB,cAEAllB,GAAA4kB,OAAAmQ,cACA/0B,GAAA4kB,OAAAoQ,WAIAW,WAAA,SAAAxmB,GAEA,GAAAO,GAAA9O,KAAA8O,GACA1P,EAAAY,KAAAZ,MACA6iB,EAAA7iB,EAAA+0B,OAGA,OAAA/0B,GAAA6mB,cAEA3hB,GAAAiG,MAAAjG,GAAAkG,OAAAiP,oBAAAra,EAAAmP,GAEAvO,KAAAoyB,aAAAhzB,KAGAkF,GAAAiG,MAAAjG,GAAAkG,OAAAmO,YAAAvZ,EAAA6iB,GAIA7iB,EAAAqkB,SAEArkB,EAAAqkB,OAAArkB,EAAA4kB,OAAA5kB,EAAA4kB,OAAAP,cAIA5jB,EAAAoiB,EAAA7iB,EAAAqkB,QAGAngB,EAAAiL,IAEAO,EAAAyF,cAAAhG,EAAAnP,EAAAyP,OAAAzP,GAGAY,KAAA80B,WACA90B,KAAA40B,WAAAx1B,GAAA,EAAA5C,GAAAuN,OAAAod,iBAEArY,EAAArF,QAAAnF,GAAA8c,MAAAE,QAEAthB,KAAA8zB,WAAA/gB,IAIA/S,KAAA8zB,WAAA1gB,OAIA0hB,SAAA,WAEA,GAAAhmB,GAAA9O,KAAA8O,GACA1P,EAAAY,KAAAZ,KAEAY,MAAAuzB,WAAAjvB,GAAA8lB,QAAAnJ,OAAAnS,EAAAkT,QAAA5iB,EAAAg1B,YAGA9vB,GAAAiG,MAAAjG,GAAAkG,OAAAoO,aAAAxZ,EAAAA,EAAAg1B,UAEAtlB,EAAA3B,MAEA4Y,GAAApc,GAAAsX,KAAAC,KACA9hB,MAAAA,EAAAg1B,SACAloB,IAAA9M,EAAAyP,WAKAylB,aAAA,WAEA,GAAAl1B,GAAAY,KAAAZ,KAEAA,GAAAklB,UAAA9nB,GAAAqV,OAAAmT,cAEA5lB,EAAAglB,cAAA/Q,GAAArT,KAAA4S,SAEAtO,GAAAiG,MAAAjG,GAAAkG,OAAAyO,YAAA7Z,KAIAy1B,SAAA,WAEA,GAAAz1B,GAAAY,KAAAZ,KAEAA,GAAAglB,cAAA/Q,GAAArT,KAAA4S,YClNAtO,GAAAwJ,aAEAxJ,GAAA2wB,OAEA5T,KAAA,EACAvX,MAAA,EACAorB,IAAA,EACAC,KAAA,GAGA7wB,GAAA4c,MAEAG,KAAA,EACAvX,MAAA,EACAorB,IAAA,EACAC,KAAA,GAGAnnB,GAAA/B,UAEA7M,MAAA,KACAupB,MAAA,EACAzb,MAAA5I,GAAA2wB,MAAA5T,KACAhT,KAAA/J,GAAA4c,KAAAG,KACA+T,MAAA,EACAttB,UAAA,EACA8M,SAAA,EACApE,cAAA,gBACA6kB,kBACAC,yBAGAtnB,GAAAzR,WAGAg5B,WAAA,KACAC,kBAAA,KAEAC,YAAA,SAAA/rB,EAAAsN,EAAA9V,GAEA,MAAA8M,IAAA/B,UAUAmC,KAAA,SAAA1E,EAAAsN,EAAA9V,GAEAF,EAAAhB,KAAAkB,EAAAlB,KAAAy1B,YAAA/rB,EAAAsN,EAAA9V,IAEAlB,KAAA0J,SAAAA,EACA1J,KAAA4B,KAAAoV,EACAhX,KAAAkB,QAAAA,EACAlB,KAAA01B,gBACA11B,KAAA21B,sBACA31B,KAAA41B,mBACA51B,KAAAyM,aAAA,EACAzM,KAAA8H,SAAA9H,KAAA8H,UAAAtK,EAAAkM,EAAArK,OAAAW,KAAA4B,SAAA,EACA5B,KAAA61B,eAAAvyB,EAAAtD,KAAAq1B,gBAEAr1B,KAAA61B,eAEAh2B,EAAAi2B,GAAA91B,MAGAA,KAAA+1B,cAAArsB,EAAAsN,EAAA9V,IAGA60B,cAAA,SAAArsB,EAAAsN,EAAA9V,GAEA7E,EAAA2D,KAAAZ,OAMAY,KAAAg2B,cAAAtsB,EAAAsN,EAAA9V,GAJAoD,GAAAuG,IAAA7K,KAAAZ,MAAAY,KAAAi2B,kBAAAvsB,EAAAsN,EAAA9V,GAAAlB,OAWAi2B,kBAAA,SAAAvsB,EAAAsN,EAAA9V,GAEA,MAAA,UAAAg1B,GAEAl2B,KAAAZ,MAAA82B,EAEAl2B,KAAAg2B,cAAAtsB,EAAAsN,EAAA9V,KAOA80B,cAAA,SAAAtsB,EAAArK,EAAA6B,KAKAi1B,qBAAA,WAEAn2B,KAAAyM,aAAA,CAMA,KAAA,GAJA2pB,GAAAp2B,KAAA01B,aACAW,EAAAr2B,KAAA41B,gBACAU,EAAAt2B,KAAA21B,mBAEA93B,EAAA,EAAAA,EAAAu4B,EAAAr4B,OAAAF,IAEAmC,KAAAu2B,WAAAH,EAAAv4B,GAAAw4B,EAAAx4B,GAAAy4B,EAAAz4B,GAGAu4B,GAAAr4B,OAAA,EACAs4B,EAAAt4B,OAAA,EACAu4B,EAAAv4B,OAAA,GAWA8V,KAAA,SAAAzU,EAAA6qB,EAAA9Z,GAEAnQ,KAAAyM,YAQAzM,KAAAu2B,WAAAn3B,EAAA6qB,EAAA9Z,IANAnQ,KAAA01B,aAAAl1B,KAAApB,GACAY,KAAA41B,gBAAAp1B,KAAAypB,GACAjqB,KAAA21B,mBAAAn1B,KAAA2P,KAQAomB,WAAA,SAAAn3B,EAAA6qB,EAAA9Z,KAKArF,IAAA,SAAA1L,EAAAuR,EAAAR,KAKAuZ,OAAA,SAAAtqB,EAAAuR,EAAAR,KAKA0Z,SAAA,SAAAzqB,EAAAuR,KAKAqZ,UAAA,SAAA5qB,EAAAuR,KAKAia,MAAA,SAAAxrB,EAAAwrB,EAAAvnB,KAKAwH,IAAA,SAAAzL,GAEA,MAAAA,GAAAmpB,WAAAvoB,KAAA4B,MAAAmoB,SAGAlT,OAAA,SAAAzX,EAAAqM,EAAA6f,GAEA,GAAAnd,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,MACA40B,EAAAlL,EAAAtrB,KAAAqO,KAAArO,KAAAkN,KAEA,IAAAiB,GAAAqoB,EACA,CACA,GAAAzM,GAAA5b,EAAA4b,OAEA9sB,GAAA8sB,GAEAte,EAAAzL,KAAA4B,MAAA5B,KAAAy2B,eAAA1M,EAAAyM,GAIA/qB,EAAAzL,KAAA4B,MAAA5B,KAAA02B,UAAA3M,EAAAyM,KAKAlgB,MAAA,SAAAjP,GAEArH,KAAAZ,MAAA9C,SAAAga,MAAAjP,EAAArH,OAGA22B,mBAAA,SAAAtvB,GAEArH,KAAAZ,MAAA9C,SAAA6K,GAAAwC,GAAAI,OAAA8W,WAAAxZ,EAAArH,OAGA42B,aAAA,SAAAx3B,GAEA,GAAAy3B,GAAA72B,KAAA2R,MACAA,EAAAlV,EAAAo6B,GAAA/xB,GAAA+xB,EAAAz3B,GAAAy3B,EACAC,EAAA92B,KAAAZ,MAAAuS,MAAAA,EAMA,OAJArN,IAAAiG,MAAAvK,KAAAu1B,WAAAv1B,KAAAZ,EAAA03B,EAAAD,EAAAllB,GAEAmlB,EAAAxgB,MAAAtW,KAAA+2B,mBAAA33B,GAAAY,MAEA82B,GAGAC,mBAAA,SAAA33B,GAEA,MAAA,UAAA03B,GAEAxyB,GAAAiG,MAAAvK,KAAAw1B,kBAAAx1B,KAAAZ,EAAA03B,EAEA,KAAA,GAAAj5B,GAAA,EAAAA,EAAAi5B,EAAA/4B,OAAAF,IAEAmC,KAAA0pB,OAAAtqB,EAAA03B,EAAAj5B,IAAA,KAKAm5B,yBAAA,SAAA53B,GAEA,MAAA,IAAAgR,IAAApQ,KAAAZ,MAAA9C,SAAA8C,EAAAY,OAGAi3B,iBAAA,WAEA,MAAA,IAAA3qB,IAAAtM,KAAAZ,MAAA9C,WAGAuU,WAAA,SAAAF,EAAAR,GAEA,MAAAnQ,MAAAZ,MAAA9C,SAAAuU,WAAAF,EAAAR,IAGA+mB,YAAA,SAAA93B,EAAAC,GAEA,MAAAF,GAAAC,EAAAC,EAAA9B,GAEAmF,EAAAtD,EAAAC,GAFA,QAMA+W,UAAA,SAAAzF,EAAAtJ,EAAA8I,GAEAnQ,KAAAZ,MAAA9C,SAAA8Z,UAAAzF,EAAAtJ,EAAArH,KAAAmQ,IAGAgnB,WAAA,SAAAhpB,EAAAipB,EAAA/vB,EAAA8I,GAIA,IAAA,GAFArB,GAAA9O,KAAAZ,MAAA9C,SAEAuB,EAAA,EAAAA,EAAAu5B,EAAAr5B,OAAAF,IACA,CACA,GAAA8S,GAAAymB,EAAAv5B,GACAqO,EAAA4C,EAAA4B,kBAAAC,EAEAxC,GAAAioB,QAAAlqB,IAAA,EAEA4C,EAAAsH,UAAAzF,EAAAtJ,EAAArH,KAAAmQ,KAIAknB,YAAA,SAAAlpB,GAEA,GAAAnO,KAAA8H,SACA,CACA,GAAA1I,GAAA+O,EAAAzO,OACA43B,EAAAt3B,KAAA4B,KACA21B,IAAAppB,EAAAqpB,UAEA,KAAAD,GAAAv3B,KAAA4U,SAAA7J,OAAAC,eACA,CACA,GAAAqF,GAAArQ,IAEA+K,QAAAC,eAAA5L,EAAAk4B,GAEApsB,YAAA,EAEAJ,IAAA,SAAA6F,GAEAN,EAAAvF,IAAA1L,EAAAuR,IAEA9F,IAAA,WAEA,MAAAsD,GAAA4b,WAIAwN,EAAAppB,EAAAqpB,YAAA,EAGAD,IAEAn4B,EAAAk4B,GAAAnpB,EAAA4b,SAGA5b,EAAAspB,cAAAtpB,EAAA4b,UAEA5b,EAAAspB,YAAAtpB,EAAA4b,QAEA3qB,EAAAoK,SAAAhN,GAAAuN,OAAAgd,gBAAA/mB,KAAAmO,OAKAupB,aAAA,SAAA/mB,GAEA,IAAA1T,EAAA0T,GAEA,OAAA,CAGA,IAAAgnB,GAAA33B,KAAAZ,MAAA9C,SACAs7B,EAAAD,EAAAzrB,GAEA,KAAAjP,EAAA26B,GAEA,OAAA,CAGA,IAAAA,EAAA75B,SAAA4S,EAAA5S,OAEA,OAAA,CAGA,KAAA,GAAAF,GAAA,EAAAA,EAAA8S,EAAA5S,OAAAF,IAEA,IAAAnB,EAAAiU,EAAA9S,MAAApB,EAAAkU,EAAA9S,IAEA,OAAA,CAIA,QAAA,GAGAg6B,YAAA,SAAA52B,EAAA62B,EAAA3nB,EAAAyC,GAEA,GAAAkgB,GAAA9yB,KAAA+3B,yBAAA92B,EAAA62B,EAOA,OALAhF,KAAA3iB,GAAAnQ,KAAAo1B,OAAAn0B,EAAA6qB,UAEA7qB,EAAA0T,MAAA/B,GAGAkgB,GAGAiF,yBAAA,SAAA92B,EAAA62B,GAEA,GAAAhF,IAAA,CAEA,IAAAr2B,EAAAq7B,GAEA72B,EAAA62B,KAEA72B,EAAA62B,GAAA,KACAhF,GAAA,OAKA,KAAA,GAAAj1B,GAAA,EAAAA,EAAAi6B,EAAA/5B,OAAAF,IACA,CACA,GAAAm6B,GAAAF,EAAAj6B,EAEAoD,GAAA+2B,KAEA/2B,EAAA+2B,GAAA,KACAlF,GAAA,GAKA,MAAAA,IAGAmF,aAAA,SAAAh3B,EAAA62B,EAAAtiB,EAAA0iB,EAAA/nB,GAEA,GAAA2iB,GAAA9yB,KAAAm4B,0BAAAl3B,EAAA62B,EAAAtiB,EAAA0iB,EAYA,OAVApF,MAEA9yB,KAAAo1B,MAAAn0B,EAAA6qB,UAAA3b,GAEAlP,EAAA0T,QAGA1T,EAAAuI,SAAAhN,GAAAuN,OAAA+c,WAAA7lB,EAAAuU,EAAAsiB,EAAAI,KAGApF,GAGAqF,0BAAA,SAAAl3B,EAAA62B,EAAAtiB,EAAA0iB,GAEA,GAAApF,IAAA,CAEA,IAAAr2B,EAAAq7B,GACA,CACA,GAAAM,GAAAn3B,EAAA62B,GACAO,EAAA7iB,EAAA0iB,EAEAh5B,GAAAk5B,EAAAC,KAEAp3B,EAAA62B,GAAAO,EACAvF,GAAA,OAKA,KAAA,GAAAj1B,GAAA,EAAAA,EAAAi6B,EAAA/5B,OAAAF,IACA,CACA,GAAAm6B,GAAAF,EAAAj6B,GACAu6B,EAAAn3B,EAAA+2B,GACAM,EAAAJ,EAAAr6B,GACAw6B,EAAA7iB,EAAA8iB,EAEAp5B,GAAAk5B,EAAAC,KAEAp3B,EAAA+2B,GAAA12B,EAAA+2B,GACAvF,GAAA,GAKA,MAAAA,IAGA2D,eAAA,SAAA8B,EAAA/B,GAEA,IAAAA,EAEA,MAAA,KAKA,KAAA,GAFAgC,MAEA36B,EAAA,EAAAA,EAAA06B,EAAAx6B,OAAAF,IACA,CACA,GAAAksB,GAAA/pB,KAAA02B,UAAA6B,EAAA16B,GAAA24B,EAEA,QAAAzM,GAEAyO,EAAAh4B,KAAAupB,GAIA,MAAAyO,IAGA9B,UAAA,SAAA3M,EAAAyM,GAEA,GAAAzM,EAEA,OAAAyM,GAEA,IAAAlyB,IAAA4c,KAAApX,MACA,MAAAigB,GAAArG,SAAA,EAEA,KAAApf,IAAA2wB,MAAAnrB,MACA,GAAAigB,EAAA/F,OAEA,MAAA+F,GAAA/F,MAIA,IAAAuQ,GAAAxK,EAAArG,SAAA,EAOA,OALAqG,GAAAtG,SAEA8Q,EAAA9Q,OAAAsG,EAAAtG,QAGA8Q,CAGA,KAAAjwB,IAAA4c,KAAAgU,IACA,IAAA5wB,IAAA2wB,MAAAC,IACA,MAAAnL,GAAAlb,MAEA,KAAAvK,IAAA4c,KAAAiU,KACA,IAAA7wB,IAAA2wB,MAAAE,KACA,MAAApL,GAAAyB,QAKA,MAAA,QC1fA/rB,EAAAuO,GAAAsF,IAGAmlB,UAAA,KACAC,gBAAA,KACAC,cAAA,KACAC,YAAA,KACAC,cAAA,KACAC,eAAA,KAEA9C,cAAA,SAAAtsB,EAAAsN,EAAA9V;AAEA,IAAAlB,KAAA61B,cACA,CACA,GAAA8B,GAAA33B,KAAAZ,MAAA9C,QAEA0D,MAAAu0B,MAAAv0B,KAAAu0B,OAAAoD,EAAA/1B,KAAA,IAAA+1B,EAAAzrB,IAGA5H,GAAAiG,MAAAvK,KAAAy4B,UAAAz4B,MAEAA,KAAAm2B,wBAGArrB,IAAA,SAAA1L,EAAAuR,EAAAR,GAEA,GAAA7M,EAAAqN,GAEA3Q,KAAA6pB,SAAAzqB,EAAAtD,EAAAqU,OAGA,CACA,GAAAhC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,MACAmoB,EAAA/pB,KAAA6Q,WAAAF,EAAAR,EAEA4Z,KAAA5b,EAAA6b,UAAAD,KAEA/pB,KAAA+4B,WAAA5qB,GACAnO,KAAAg5B,WAAA7qB,EAAA4b,EAAA5Z,MAKAuZ,OAAA,SAAAtqB,EAAAuR,EAAAR,GAEA,GAAAhC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,MACAmoB,EAAA/pB,KAAA6Q,WAAAF,EAAAR,EAEA4Z,IAEA5b,EAAA4b,UAAAA,IAEA/pB,KAAA+4B,WAAA5qB,GACAnO,KAAAg5B,WAAA7qB,EAAA4b,EAAA5Z,KAKA0Z,SAAA,SAAAzqB,EAAAuR,EAAAR,GAEA,GAAAhC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,MACAmoB,EAAA/pB,KAAA6Q,WAAAF,EAEAoZ,IAAA5b,EAAA4b,UAAAA,GAEA/pB,KAAAi5B,aAAA9qB,EAAAgC,IAIA6Z,UAAA,SAAA5qB,EAAAuR,GAEA,GAAAxC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,MACAmoB,EAAA/pB,KAAA6Q,WAAAF,EAEA,OAAAoZ,KAAA5b,EAAA4b,SAGAiP,WAAA,SAAA7qB,EAAA4b,EAAA5Z,GAEA4Z,EAAA9D,eAEAjmB,KAAAk5B,SAAA/qB,EAAA4b,GACA/pB,KAAAm5B,iBAAAhrB,EAAAzO,OAAAqqB,EAAA5Z,GACAnQ,KAAAq3B,YAAAlpB,KAIA8qB,aAAA,SAAA9qB,EAAAgC,GAEA,GAAAA,EACA,CACA,GAAA4Z,GAAA5b,EAAA4b,OAEA,IAAAA,GAAAA,EAAA6B,aAEA,OAIA5rB,KAAA+4B,WAAA5qB,GACAnO,KAAAo5B,gBAAAjrB,EAAAzO,QACAM,KAAAq3B,YAAAlpB,IAGA4qB,WAAA,SAAA5qB,GAEA,GAAA4b,GAAA5b,EAAA4b,OAEAA,KAEAzlB,GAAAiG,MAAAvK,KAAA04B,gBAAA14B,KAAAmO,GAEAA,EAAAkrB,SAAAtP,EAAAxgB,KAAA/M,GAAAuN,OAAAyc,MAAArY,EAAAkrB,SACAlrB,EAAAmrB,WAAAvP,EAAAxgB,KAAA/M,GAAAuN,OAAAqb,QAAAjX,EAAAmrB,WAEAnrB,EAAA4b,QAAA,KACA5b,EAAAorB,OAAA,EACAprB,EAAA3B,QAAA,QAEA2B,GAAAzO,OAAA8oB,YAAAuB,EAAA0B,UAIAyN,SAAA,SAAA/qB,EAAA4b,GAEA5b,EAAAkrB,SAAAtP,EAAA3gB,IAAA5M,GAAAuN,OAAAyc,MAAArY,EAAAkrB,QAAAr5B,MACAmO,EAAAmrB,WAAAvP,EAAA3gB,IAAA5M,GAAAuN,OAAAqb,QAAAjX,EAAAmrB,UAAAt5B,MAEAmO,EAAA4b,QAAAA,EACA5b,EAAAorB,OAAA,EACAprB,EAAA3B,QAAA,EAEA2B,EAAAzO,OAAA8oB,YAAAuB,EAAA0B,QAAA1B,EAEAzlB,GAAAiG,MAAAvK,KAAA24B,cAAA34B,KAAAmO,IAGAqrB,YAAA,SAAArrB,EAAAgC,GAEA,MAAA,UAAA4Z,GAEA,GAAA3qB,GAAA+O,EAAAzO,MAEA4E,IAAAiG,MAAAvK,KAAA44B,YAAA54B,KAAAZ,EAAA+O,EAAA4b,GAEA5b,EAAA3B,UAAA,IAEAud,IAAAA,EAAA9D,cAEAjmB,KAAAk5B,SAAA/qB,EAAA4b,EAAA5Z,GACAnQ,KAAAm5B,iBAAA/5B,EAAA2qB,EAAA5Z,IAIAnQ,KAAA2R,MAEAxD,EAAAwD,MAAA3R,KAAA42B,aAAAx3B,GAIAY,KAAAo5B,gBAAAh6B,EAAA+Q,GAIAhC,EAAA3B,QAAA,EAEAxM,KAAAq3B,YAAAlpB,MAKAsrB,iBAAA,SAAAr6B,GAEA,GAAAm1B,GAAAv0B,KAAAu0B,KAEA,OAAA,UAAAxK,GAEA,MAAAprB,GAAAS,EAAAm1B,EAAAxK,EAAAA,EAAAhb,IAAA7C,OAIAktB,gBAAA,SAAAh6B,EAAA+Q,GAEA,GAAAokB,GAAAv0B,KAAAu0B,KAEAjwB,IAAAiG,MAAAvK,KAAA64B,cAAA74B,KAAAZ,EAAAm1B,GAEAv0B,KAAA63B,YAAAz4B,EAAAm1B,EAAApkB,IAGAgpB,iBAAA,SAAA/5B,EAAA2qB,EAAA5Z,GAEA,GAAAokB,GAAAv0B,KAAAu0B,MACAmF,EAAA3P,EAAAhb,IAAA7C,GAEA5H,IAAAiG,MAAAvK,KAAA84B,eAAA94B,KAAAZ,EAAAm1B,EAAAxK,EAAA2P,GAEA15B,KAAAi4B,aAAA74B,EAAAm1B,EAAAxK,EAAA2P,EAAAvpB,MCrMA1Q,EAAAuO,GAAAuF,IAGAomB,cAAA,KACAC,oBAAA,KACAC,UAAA,KAEA9C,mBAAA,SAAA33B,GAEA,MAAA,UAAA03B,GAEA,GAAA3oB,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEA0C,IAAAiG,MAAAvK,KAAAw1B,kBAAAx1B,KAAAZ,EAAA03B,GAEA92B,KAAA85B,KAAA3rB,EAAA,WAEA,IAAA,GAAAtQ,GAAA,EAAAA,EAAAi5B,EAAA/4B,OAAAF,IAEAmC,KAAA+5B,SAAA5rB,EAAA2oB,EAAAj5B,IAAA,KAIAmC,KAAA6iB,KAAA1U,GACAnO,KAAAg6B,UAAA7rB,GAAA,KAIA2rB,KAAA,SAAA3rB,EAAA9G,EAAA8I,GAEAhC,EAAA8rB,cAAA,EACA9rB,EAAA+rB,aAAA,EAEA7yB,EAAAjL,MAAA4D,MAEAmO,EAAA8rB,cAAA,EACA9rB,EAAA+rB,aAAA,EAEAl6B,KAAA6iB,KAAA1U,GACAnO,KAAAg6B,UAAA7rB,EAAAgC,IAGArF,IAAA,SAAA1L,EAAAuR,EAAAR,GAEA,GAAA7M,EAAAqN,GAEA3Q,KAAA6pB,SAAAzqB,EAAAtD,EAAAqU,OAGA,CACA,GAAAhC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,MACAskB,EAAA/X,EAAA4b,QACAoQ,EAAAn6B,KAAAi3B,kBAEA,IAAAj3B,KAAA03B,aAAA/mB,GAEA,IAAA,GAAA9S,GAAA,EAAAA,EAAA8S,EAAA5S,OAAAF,IACA,CACA,GAAAksB,GAAA/pB,KAAA6Q,WAAAF,EAAA9S,GAAAsS,EAEA4Z,IAEAoQ,EAAAjM,IAAAnE,OAKA,CACA,GAAAA,GAAA/pB,KAAA6Q,WAAAF,EAAAR,EAEA4Z,IAEAoQ,EAAAjM,IAAAnE,GAIA,GAAAuE,GAAApI,EAAAyG,SAAAwN,GACAC,EAAAD,EAAAxN,SAAAzG,EAEAlmB,MAAA85B,KAAA3rB,EAAA,WAEA,IAAA,GAAAtQ,GAAA,EAAAA,EAAAu8B,EAAAr8B,OAAAF,IAEAmC,KAAA+5B,SAAA5rB,EAAAisB,EAAAv8B,GAAAsS,EAGA,KAAA,GAAAtS,GAAA,EAAAA,EAAAywB,EAAAvwB,OAAAF,IAEAmC,KAAAq6B,YAAAlsB,EAAAmgB,EAAAzwB,GAAAsS,IAGAA,KAIAuZ,OAAA,SAAAtqB,EAAAuR,EAAAR,GAEA,GAAAhC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEA,IAAA5B,KAAA03B,aAAA/mB,GAEA3Q,KAAA85B,KAAA3rB,EAAA,WAEA,IAAA,GAAAtQ,GAAA,EAAAA,EAAA8S,EAAA5S,OAAAF,IACA,CACA,GAAAksB,GAAA/pB,KAAA6Q,WAAAF,EAAA9S,GAAAsS,EAEA4Z,IAEA/pB,KAAA+5B,SAAA5rB,EAAA4b,EAAA5Z,UAKA,IAAA5S,EAAAoT,GACA,CACA,GAAAoZ,GAAA/pB,KAAA6Q,WAAAF,EAAAR,EAEA4Z,IAEA/pB,KAAA+5B,SAAA5rB,EAAA4b,EAAA5Z,KAKA0Z,SAAA,SAAAzqB,EAAAuR,EAAAR,GAEA,GAAAhC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEA,IAAA5B,KAAA03B,aAAA/mB,GAEA3Q,KAAA85B,KAAA3rB,EAAA,WAEA,IAAA,GAAAtQ,GAAA,EAAAA,EAAA8S,EAAA5S,OAAAF,IACA,CACA,GAAAksB,GAAA/pB,KAAA6Q,WAAAF,EAAA9S,GAEAksB,IAEA/pB,KAAAq6B,YAAAlsB,EAAA4b,EAAA5Z,UAKA,IAAA5S,EAAAoT,GACA,CACA,GAAAoZ,GAAA/pB,KAAA6Q,WAAAF,EAEAoZ,IAEA/pB,KAAAq6B,YAAAlsB,EAAA4b,EAAA5Z,OAIA,CACA,GAAA5D,GAAA4B,EAAA4b,OAEA/pB,MAAA85B,KAAA3rB,EAAA,WAEA,IAAA,GAAAtQ,GAAA0O,EAAAxO,OAAA,EAAAF,GAAA,EAAAA,IAEAmC,KAAAq6B,YAAAlsB,EAAA5B,EAAA1O,GAAAsS,OAMA6Z,UAAA,SAAA5qB,EAAAuR,GAEA,GAAAxC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,MACAskB,EAAA/X,EAAA4b,OAEA,IAAA/pB,KAAA03B,aAAA/mB,GACA,CACA,IAAA,GAAA9S,GAAA,EAAAA,EAAA8S,EAAA5S,OAAAF,IACA,CACA,GAAAksB,GAAA/pB,KAAA6Q,WAAAF,EAAA9S,GAEA,IAAAksB,IAAA7D,EAAA7B,IAAA0F,EAAAlb,QAEA,OAAA,EAIA,MAAA8B,GAAA5S,OAAA,EAEA,GAAAR,EAAAoT,GACA,CACA,GAAAoZ,GAAA/pB,KAAA6Q,WAAAF,EAEA,OAAAoZ,IAAA7D,EAAA7B,IAAA0F,EAAAlb,QAGA,OAAA,GAGAyrB,iBAAA,SAAAvQ,EAAA5Z,GAEA,OAAAA,IAAA4Z,EAAA6B,cAGAoO,UAAA,SAAA7rB,EAAAgC,GAEAhC,EAAA+rB,aAAA/pB,IAAAhC,EAAAzO,OAAA4qB,YAEAtqB,KAAAkN,QAAA5I,GAAA2wB,MAAAnrB,OAAA9J,KAAAqO,OAAA/J,GAAA4c,KAAApX,SAEAxF,GAAAiG,MAAAvK,KAAA25B,cAAA35B,KAAAmO,GAEAA,EAAAzO,OAAAiV,UAKA6kB,YAAA,SAAArrB,EAAAgC,GAEA,MAAA,UAAA4Z,GAEA,GAAAqM,GAAAjoB,EAAAioB,QACAlqB,EAAA6d,EAAAlb,MAEA3C,KAAAkqB,KAEA9xB,GAAAiG,MAAAvK,KAAA45B,oBAAA55B,KAAAmO,EAAA4b,GAEA/pB,KAAA+5B,SAAA5rB,EAAA4b,EAAA5Z,SAEAimB,GAAAlqB,MAKA2W,KAAA,SAAA1U,GAEA,GAAA4b,GAAA5b,EAAA4b,OAEA5b,GAAA8rB,eAEA31B,GAAAiG,MAAAvK,KAAA65B,UAAA75B,KAAAmO,GAEA4b,EAAA9G,OAAAjjB,KAAAtC,YAEAyQ,EAAAzO,OAAA8J,SAAAhN,GAAAuN,OAAAgd,gBAAA/mB,KAAAmO,QCnPA7J,GAAAwJ,UAAAysB,UAAA/mB,GAEAA,GAAAvH,UAEA7M,MAAA,KACAupB,MAAA,EACAhX,OAAA,EACAzE,MAAA5I,GAAA2wB,MAAA5T,KACAhT,KAAA/J,GAAA4c,KAAAG,KACA+T,MAAA,EACAttB,UAAA,EACA8M,SAAA,EACA2f,MAAA,KACA3hB,QAAAtO,GAAA8lB,QAAA6I,MACAziB,cAAA,gBACA6kB,kBACAC,yBAGA71B,EAAA6T,GAAAE,IAGA+D,KAAA,YAEAkhB,UAAAn0B,GAAAkG,OAAAqR,eACA6c,gBAAAp0B,GAAAkG,OAAA0R,sBACAyc,cAAAr0B,GAAAkG,OAAA2R,oBACAyc,YAAAt0B,GAAAkG,OAAA+R,iBACAsc,cAAAv0B,GAAAkG,OAAA6R,oBACAyc,eAAAx0B,GAAAkG,OAAA8R,qBACAiZ,WAAAjxB,GAAAkG,OAAAgS,gBACAgZ,kBAAAlxB,GAAAkG,OAAAiS,wBAEAgZ,YAAA,SAAA/rB,EAAAsN,EAAA9V,GAEA,MAAAsS,IAAAvH,UAGAsqB,WAAA,SAAAn3B,EAAA6qB,EAAA9Z,GAEA,GAAAhC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,OAEAlC,OAAAN,EACA4qB,UAAAhqB,KAAAy5B,iBAAAr6B,GACA2qB,QAAA,KACAvd,QAAA,EAEA8sB,UAAA,WAEAh1B,GAAAiG,MAAAjG,GAAAkG,OAAAsR,uBAAA9b,KAAAZ,EAAA+O,GAEA/O,EAAAirB,QAAArqB,KAAA4S,SACA5S,KAAAi5B,aAAA9qB,IAGAkrB,QAAA,WAEA/0B,GAAAiG,MAAAjG,GAAAkG,OAAAuR,qBAAA/b,KAAAZ,EAAA+O,GAEAA,EAAA6b,UAAA7b,EAAA4b,WAEA3qB,EAAAirB,QAAArqB,KAAA4S,SACA5S,KAAAi5B,aAAA9qB,KAKA/O,GAAAgK,IAAA5M,GAAAuN,OAAA6c,WAAA5mB,KAAAw6B,WAAAx6B,MACAZ,EAAAgK,IAAA5M,GAAAuN,OAAA+c,UAAA9mB,KAAAy6B,YAAAz6B,MAEAsD,EAAA2mB,KAEAA,EAAAjqB,KAAAk3B,YAAA93B,EAAAY,KAAAu0B,OAEAtK,GAEA3lB,GAAAiG,MAAAjG,GAAAkG,OAAAwR,yBAAAhc,KAAAZ,EAAA6qB,IAIA3mB,EAAA2mB,GAMAjqB,KAAA2R,QAEAxD,EAAAwD,MAAA3R,KAAA42B,aAAAx3B,KANAkF,GAAAiG,MAAAjG,GAAAkG,OAAAyR,kBAAAjc,KAAAZ,EAAA6qB,GAEAjqB,KAAAoW,UAAA6T,EAAAjqB,KAAAw5B,YAAArrB,EAAAgC,GAAAA,KAQAqqB,WAAA,SAAAp7B,GAEA,GAAA+O,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEAuM,KAEA7J,GAAAiG,MAAAjG,GAAAkG,OAAA4R,qBAAApc,KAAAZ,EAAA+O,GAEAnO,KAAA+4B,WAAA5qB,GACAnO,KAAAq3B,YAAAlpB,KAIAssB,YAAA,SAAAr7B,EAAA2qB,EAAA2Q,EAAAC,GAEA,GAAA36B,KAAAu0B,QAAAmG,EACA,CACA,GAAAvsB,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEAuM,IAAA4b,IAAA5b,EAAA4b,UAEA/pB,KAAA+4B,WAAA5qB,GACAnO,KAAAk5B,SAAA/qB,EAAA4b,GACA/pB,KAAAq3B,YAAAlpB,QCnHA7J,GAAAwJ,UAAA8sB,OAAAnnB,GAEAA,GAAAxH,UAEA7M,MAAA,KACAupB,MAAA,EACAhX,OAAA,EACAzE,MAAA5I,GAAA2wB,MAAA5T,KACAhT,KAAA/J,GAAA4c,KAAAG,KACA+T,MAAA,EACAttB,UAAA,EACA8M,SAAA,EACA2f,MAAA,KACA3hB,QAAAtO,GAAA8lB,QAAA7I,IACA/Q,cAAA,gBACA6kB,kBACAC,yBAGA71B,EAAA6T,GAAAG,IAGA8D,KAAA,SAEAkhB,UAAAn0B,GAAAkG,OAAAwQ,YACA0d,gBAAAp0B,GAAAkG,OAAA4Q,mBACAud,cAAAr0B,GAAAkG,OAAA6Q,iBACAud,YAAAt0B,GAAAkG,OAAAkR,cACAmd,cAAAv0B,GAAAkG,OAAAgR,iBACAsd,eAAAx0B,GAAAkG,OAAAiR,kBACA8Z,WAAAjxB,GAAAkG,OAAAmR,aACA6Z,kBAAAlxB,GAAAkG,OAAAoR,qBAEA6Z,YAAA,SAAA/rB,EAAAsN,EAAA9V,GAEA,MAAAuS,IAAAxH,UAGAsqB,WAAA,SAAAn3B,EAAA6qB,EAAA9Z,GAEA,GAAAhC,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,OAEAlC,OAAAN,EACA4qB,UAAAhqB,KAAAy5B,iBAAAr6B,GACA2qB,QAAA,KACAvd,QAAA,EACA+sB,OAAA,EACAtX,QAAA,EAEAqX,UAAA,WAEAh1B,GAAAiG,MAAAjG,GAAAkG,OAAAyQ,oBAAAjb,KAAAZ,EAAA+O,GAEAnO,KAAAi5B,aAAA9qB,IAIA/O,GAAAgK,IAAA5M,GAAAuN,OAAA0c,QAAAzmB,KAAA66B,QAAA76B,MACAZ,EAAAgK,IAAA5M,GAAAuN,OAAA6c,WAAA5mB,KAAAw6B,WAAAx6B,MAEAsD,EAAA2mB,KAEAA,EAAAjqB,KAAAk3B,YAAA93B,EAAAY,KAAAu0B,OAEAtK,GAEA3lB,GAAAiG,MAAAjG,GAAAkG,OAAA0Q,sBAAAlb,KAAAZ,EAAA6qB,IAIA3mB,EAAA2mB,GAMAjqB,KAAA2R,QAEAxD,EAAAwD,MAAA3R,KAAA42B,aAAAx3B,KANAkF,GAAAiG,MAAAjG,GAAAkG,OAAA2Q,eAAAnb,KAAAZ,EAAA6qB,GAEAjqB,KAAAoW,UAAA6T,EAAAjqB,KAAAw5B,YAAArrB,GAAAgC,KAQAya,MAAA,SAAAxrB,EAAAwrB,EAAAvnB,GAEA,GAAA0mB,GAAA/pB,KAAA6K,IAAAzL,EAEA,IAAA2qB,EACA,CACA,GAAA+Q,GAAA/Q,EAAAS,OAAAnnB,EAEArD,MAAAm4B,0BAAAvN,EAAA5qB,KAAAu0B,MAAAuG,EAAAA,EAAA/rB,IAAA7C,KAEA0e,EAAA5qB,KAAA4B,MAAAk5B,IAIAD,QAAA,SAAAz7B,GAEA,GAAA+O,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEA,IAAAuM,GAAAA,EAAA4b,QACA,CACA,GAAAA,GAAA5b,EAAA4b,SAEA5b,EAAAorB,OAAAxP,EAAAtF,iBAEAngB,GAAAiG,MAAAjG,GAAAkG,OAAA8Q,eAAAtb,KAAAZ,EAAA+O,GAEAA,EAAA8T,QAAA,EAEA8H,EAAApV,QAEAxG,EAAA8T,QAAA,EACA9T,EAAAorB,OAAA,KAKAiB,WAAA,SAAAp7B,GAEA,GAAA+O,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEAuM,IAEAnO,KAAA4S,UAEAtO,GAAAiG,MAAAjG,GAAAkG,OAAA+Q,kBAAAvb,KAAAZ,EAAA+O,GAEAnO,KAAA+4B,WAAA5qB,KAKA4qB,WAAA,SAAA5qB,GAEA,GAAA4b,GAAA5b,EAAA4b,OAEAA,KAEAzlB,GAAAiG,MAAAvK,KAAA04B,gBAAA14B,KAAAmO,GAEA4b,EAAAxgB,KAAA/M,GAAAuN,OAAAqb,QAAAjX,EAAAmrB,WAEAt5B,KAAA4S,UAAAmX,EAAA9D,cAEA8D,EAAAM,QAAArqB,KAAA4S,SAGAzE,EAAA4b,QAAA,KACA5b,EAAAorB,OAAA,EACAprB,EAAA3B,QAAA,QAEA2B,GAAAzO,OAAA8oB,YAAAuB,EAAA0B,YCxJAnnB,GAAAwJ,UAAAitB,QAAArnB,GAEAA,GAAAzH,UAEA7M,MAAA,KACAupB,MAAA,EACAhX,OAAA,EACAzE,MAAA5I,GAAA2wB,MAAA5T,KACAhT,KAAA/J,GAAA4c,KAAAG,KACA+T,MAAA,EACAttB,UAAA,EACA8M,SAAA,EACA8kB,QAAA,KACAh8B,WAAA,KACA4P,sBAAA,EACA0tB,cAAA12B,GAAA8lB,QAAA6I,MACAgI,YAAA32B,GAAA8lB,QAAA/I,KACA7Q,cAAA,gBACA6kB,kBACAC,yBAGA71B,EAAA8T,GAAAG,IAGA6D,KAAA,UAEAoiB,cAAAr1B,GAAAkG,OAAA6S,kBACAuc,oBAAAt1B,GAAAkG,OAAA2S,wBACA0c,UAAAv1B,GAAAkG,OAAAwS,aACAuY,WAAAjxB,GAAAkG,OAAAgT,cACAgY,kBAAAlxB,GAAAkG,OAAAiT,sBAEAgY,YAAA,SAAA/rB,EAAAsN,EAAA9V,GAEA,MAAAwS,IAAAzH,UAGA+pB,cAAA,SAAAtsB,EAAAsN,EAAA9V,GAEAlB,KAAA05B,QAAA15B,KAAA05B,SAAAhwB,EAAA9H,KAAA,IAAA8H,EAAAwC,IACAlM,KAAAtC,WAAA8G,EAAAxE,KAAAtC,WAAAsC,KAAAsN,sBACAtN,KAAAk7B,SAAAl7B,KAAAm7B,iBAEA72B,GAAAiG,MAAAjG,GAAAkG,OAAAkS,aAAA1c,MAEAA,KAAAm2B,wBAGAI,WAAA,SAAAn3B,EAAA6qB,EAAA9Z,GAEA,GAAAE,GAAArQ,KACAmO,EAAA/O,EAAAmpB,WAAAvoB,KAAA4B,OAEAlC,OAAAN,EACAg3B,WACApM,UAAAhqB,KAAAy5B,iBAAAr6B,GACA2qB,QAAA/pB,KAAAg3B,yBAAA53B,GACA6iB,QAAA,EACAgY,cAAA,EACAC,aAAA,EAEAZ,UAAA,WAEAh1B,GAAAiG,MAAAjG,GAAAkG,OAAAmS,qBAAAtM,EAAAjR,EAAAY,KAAAmO,GAEAkC,EAAAgqB,YAAAlsB,EAAAnO,MAAA,IAGAq5B,QAAA,WAEAlrB,EAAA8T,SAKA3d,GAAAiG,MAAAjG,GAAAkG,OAAAoS,mBAAAvM,EAAAjR,EAAAY,KAAAmO,GAEAA,EAAA6b,UAAAhqB,OAMAqQ,EAAAwS,KAAA1U,GACAkC,EAAA2pB,UAAA7rB,IALAkC,EAAAgqB,YAAAlsB,EAAAnO,QAWAZ,GAAAgK,IAAA5M,GAAAuN,OAAA2c,SAAA1mB,KAAAo7B,SAAAp7B,MACAZ,EAAAgK,IAAA5M,GAAAuN,OAAA4c,UAAA3mB,KAAAq7B,UAAAr7B,MAGAA,KAAA22B,mBAAA32B,KAAAmR,iBAAAhD,IAGAlR,EAAAgtB,IAEA3lB,GAAAiG,MAAAjG,GAAAkG,OAAAqS,gBAAA7c,KAAAZ,EAAA+O,EAAA8b,GAEAjqB,KAAAm3B,WAAAhpB,EAAA8b,EAAAjqB,KAAAw5B,YAAArrB,EAAAgC,GAAAA,IAEAnQ,KAAA2R,MAEAxD,EAAAwD,MAAA3R,KAAA42B,aAAAx3B,IAIAkF,GAAAiG,MAAAjG,GAAAkG,OAAAsS,uBAAA9c,KAAAZ,EAAA+O,GAEAnO,KAAAsW,MAAAtW,KAAAs7B,eAAAntB,KAIAnO,KAAAq3B,YAAAlpB,IAGAyc,MAAA,SAAAxrB,EAAAwrB,EAAAvnB,GAEA,GAAA0mB,GAAA/pB,KAAA6K,IAAAzL,EAEA,IAAA2qB,EACA,CACA,GAAAwO,KAEAv4B,MAAAm4B,0BAAA90B,EAAArD,KAAA05B,QAAA9O,EAAAxrB,EAAA2P,IAAA7C,KAEA7I,EAAArD,KAAA05B,SAAA9O,EAAAxrB,EAAA2P,IAAA7C,IAEA,KAAA,GAAArO,GAAA,EAAAA,EAAAksB,EAAAhsB,OAAAF,IAEA06B,EAAA/3B,KAAAupB,EAAAlsB,GAAA2sB,OAAAnnB,GAGAunB,GAAA5qB,KAAA4B,MAAA22B,IAIA6C,SAAA,SAAAh8B,GAEA,GAAA+O,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEA,IAAAuM,GAAAnO,KAAAi7B,YACA,CACA32B,GAAAiG,MAAAjG,GAAAkG,OAAA+S,iBAAAvd,KAAAZ,EAAA+O,GAEAA,EAAA8T,QAAA,EACA9T,EAAA+rB,aAAA,CAIA,KAAA,GAFA7tB,GAAA8B,EAAA4b,QAEAlsB,EAAA,EAAAA,EAAAwO,EAAAtO,OAAAF,IACA,CACA,GAAAksB,GAAA1d,EAAAxO,IAEAksB,EAAA9D,cAAA8D,EAAAtF,eAEAsF,EAAApV,MAAA3U,KAAAi7B,aAIA9sB,EAAA8T,QAAA,EACA9T,EAAA+rB,aAAA,IAIAmB,UAAA,SAAAj8B,GAEA,GAAA+O,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEAuM,IAAAnO,KAAAg7B,gBAEA12B,GAAAiG,MAAAjG,GAAAkG,OAAA8S,kBAAAtd,KAAAZ,EAAA+O,GAEAnO,KAAA85B,KAAA3rB,EAAA,WAIA,IAAA,GAFA9B,GAAA8B,EAAA4b,QAEAlsB,EAAAwO,EAAAtO,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAAksB,GAAA1d,EAAAxO,EAEAksB,GAAAM,QAAArqB,KAAAg7B,oBAMA7pB,iBAAA,SAAAhD,GAEA,MAAA,UAAA4b,EAAA5Z,GAEAhC,EAAA6b,UAAAD,KAEAzlB,GAAAiG,MAAAjG,GAAAkG,OAAA4S,kBAAApd,KAAAmO,EAAA4b,GAEA/pB,KAAA+5B,SAAA5rB,EAAA4b,EAAA5Z,MAKAmrB,eAAA,SAAAntB,GAEA,MAAA,UAAAwpB,GAEA,GAAA5N,GAAA4N,EAAAvoB,OAAAjB,EAAA6b,UAEA1lB,IAAAiG,MAAAjG,GAAAkG,OAAA0S,kBAAAld,KAAAmO,EAAA4b,GAEAA,EAAAhsB,OAEAiC,KAAA85B,KAAA3rB,EAAA,WAEA,IAAA,GAAAtQ,GAAA,EAAAA,EAAAksB,EAAAhsB,OAAAF,IAEAmC,KAAA+5B,SAAA5rB,EAAA4b,EAAAlsB,MAIAmC,KAAA2R,QAEAxD,EAAAwD,MAAA3R,KAAA42B,aAAAzoB,EAAAzO,WAKAq6B,SAAA,SAAA5rB,EAAA4b,EAAA5Z,GAEA,IAAA4Z,EAAA9D,aAAA,CAKA,GAAA7mB,GAAA+O,EAAAzO,OACAuB,EAAAkN,EAAA4b,QACA7d,EAAA6d,EAAAlb,OACAurB,GAAAn5B,EAAAojB,IAAAnY,EAuBA,OArBAkuB,KAEA91B,GAAAiG,MAAAjG,GAAAkG,OAAAyS,YAAAjd,KAAAmO,EAAA4b,GAEA9oB,EAAAse,IAAArT,EAAA6d,GAEAA,EAAA3gB,IAAA5M,GAAAuN,OAAAqb,QAAAjX,EAAAmrB,WACAvP,EAAA3gB,IAAA5M,GAAAuN,OAAAqe,kBAAAja,EAAAkrB,SAEAtP,EAAAvB,YAAAppB,EAAAqsB,QAAArsB,EAEAY,KAAAm5B,iBAAA/5B,EAAA2qB,EAAA5Z,GAEAnQ,KAAA6iB,KAAA1U,GAEAgC,GAEAnQ,KAAAg6B,UAAA7rB,IAIAisB,IAGAC,YAAA,SAAAlsB,EAAA4b,EAAA5Z,GAEA,GAAAnQ,KAAAs6B,iBAAAvQ,EAAA5Z,GAAA,CAKA,GAAA/Q,GAAA+O,EAAAzO,OACAuB,EAAAkN,EAAA4b,QACAqM,EAAAjoB,EAAAioB,QACAlqB,EAAA6d,EAAAlb,MAEA5N,GAAAojB,IAAAnY,KAEA5H,GAAAiG,MAAAjG,GAAAkG,OAAAuS,eAAA/c,KAAAmO,EAAA4b,GAEA9oB,EAAAqe,OAAApT,GAEA6d,EAAAxgB,KAAA/M,GAAAuN,OAAAqb,QAAAjX,EAAAmrB,WACAvP,EAAAxgB,KAAA/M,GAAAuN,OAAAqe,kBAAAja,EAAAkrB,eAEAtP,GAAAvB,YAAAppB,EAAAqsB,QAEAzrB,KAAAg7B,eAEAjR,EAAAM,QAAArqB,KAAAg7B,eAGAh7B,KAAA6iB,KAAA1U,GACAnO,KAAAg6B,UAAA7rB,UAGAioB,GAAAlqB,KAGAivB,eAAA,WAEA,GAAAzB,GAAA15B,KAAA05B,QACA9B,EAAA53B,KAAAZ,MAAA9C,SAAA4P,GAEA,IAAAzP,EAAAi9B,GAEA,MAAAz8B,GAAA26B,GAEAp6B,EAAAo6B,EAAA8B,MAAA,EAIA9B,IAAA8B,CAKA,IAAAz8B,EAAA26B,GACA,CACA,IAAA,GAAA/5B,GAAA,EAAAA,EAAA67B,EAAA37B,OAAAF,IAEA,GAAAL,EAAAo6B,EAAA8B,EAAA77B,OAAA,EAEA,OAAA,CAGA,QAAA,EAIA,MAAAL,GAAAk8B,EAAA9B,MAAA,GAOAuB,iBAAA,SAAA/5B,EAAA2qB,EAAA5Z,GAEA,GAAAupB,GAAA15B,KAAA05B,QACAnF,EAAAn1B,EAAA2P,IAAA7C,GAEAlM,MAAAi4B,aAAAlO,EAAA2P,EAAAt6B,EAAAm1B,EAAApkB,IAGAipB,gBAAA,SAAArP,EAAAnX,GAEA,GAAA5S,KAAAk7B,SACA,CACA,GAAAxB,GAAA15B,KAAA05B,OAEA15B,MAAA63B,YAAA9N,EAAA2P,GAAA,EAAA9mB,KAIA6mB,iBAAA,SAAAr6B,GAEA,GAAAs6B,GAAA15B,KAAA05B,QACAnF,EAAAn1B,EAAA2P,IAAA7C,GAEA,OAAA,UAAA6d,GAEA,MAAAprB,GAAAorB,EAAA2P,EAAAt6B,EAAAm1B,OC1WAjwB,GAAAwJ,UAAAytB,eAAA5nB,GAEAA,GAAA1H,UAEA7M,MAAA,KACAupB,MAAA,EACAhX,OAAA,EACAzE,MAAA5I,GAAA2wB,MAAA5T,KACAhT,KAAA/J,GAAA4c,KAAAG,KACA+T,MAAA,EACAttB,UAAA,EACA8M,SAAA,EACA4mB,QAAA1/B,EACAy4B,MAAA,KACAmF,QAAA,KACAh8B,WAAA,KACA4P,sBAAA,EACA0tB,cAAA12B,GAAA8lB,QAAAgJ,OACA6H,YAAA32B,GAAA8lB,QAAA7I,IACAka,mBAAAn3B,GAAA8lB,QAAA/I,KACA7Q,cAAA,gBACA6kB,kBACAC,yBAGA71B,EAAA8T,GAAAI,IAGA4D,KAAA,iBAEAoiB,cAAAr1B,GAAAkG,OAAA8T,sBACAsb,oBAAAt1B,GAAAkG,OAAA4T,4BACAyb,UAAAv1B,GAAAkG,OAAAyT,iBACAsX,WAAAjxB,GAAAkG,OAAAmU,kBACA6W,kBAAAlxB,GAAAkG,OAAAoU,0BAEA6W,YAAA,SAAA/rB,EAAAsN,EAAA9V,GAEA,MAAAyS,IAAA1H,UAGA+pB,cAAA,SAAAtsB,EAAAsN,EAAA9V,GAEA,IAAAlB,KAAA61B,cACA,CACA,GAAA8B,GAAA33B,KAAAZ,MAAA9C,QAEA0D,MAAA05B,QAAA15B,KAAA05B,SAAA/B,EAAA/1B,KAAA,IAAA+1B,EAAAzrB,IAGAlM,KAAAu0B,MAAAv0B,KAAAu0B,OAAA7qB,EAAA9H,KAAA,IAAA8H,EAAAwC,IACAlM,KAAAtC,WAAA8G,EAAAxE,KAAAtC,WAAAsC,KAAAsN,sBAEAjR,EAAA6E,EAAAs6B,SAMAx7B,KAAA07B,WAAAx6B,EAAAs6B,SAJAl3B,GAAAuG,IAAA3J,EAAAs6B,QAAAx7B,KAAA07B,WAAA17B,MAOAsE,GAAAiG,MAAAjG,GAAAkG,OAAAkT,iBAAA1d,OAGA07B,WAAA,SAAAF,GAEAx7B,KAAAw7B,QAAAA,EAEAx7B,KAAAm2B,wBAGAI,WAAA,SAAAn3B,EAAA6qB,EAAA9Z,GAEA,GAAAwrB,GAAA37B,KACA47B,EAAA57B,KAAAw7B,QAAAl/B,SAEA6R,EAAA/O,EAAAmpB,WAAAvoB,KAAA4B,OAEAlC,OAAAN,EACA4qB,UAAAhqB,KAAAy5B,iBAAAr6B,GACAg3B,WACArM,QAAA/pB,KAAAg3B,yBAAA53B,GACAy8B,SAAA,GAAA7sB,IACAiT,QAAA,EACAgY,cAAA,EACAC,aAAA,EAEAZ,UAAA,WAEAh1B,GAAAiG,MAAAjG,GAAAkG,OAAAmT,yBAAAge,EAAAv8B,EAAAY,KAAAmO,GAEAwtB,EAAAtB,YAAAlsB,EAAAnO,OAGAq5B,QAAA,WAEAlrB,EAAA8T,SAKA3d,GAAAiG,MAAAjG,GAAAkG,OAAAoT,uBAAA+d,EAAAv8B,EAAAY,KAAAmO,GAEAwtB,EAAA9Y,KAAA1U,GACAwtB,EAAA3B,UAAA7rB,KAGA2tB,iBAAA,WAEAx3B,GAAAiG,MAAAjG,GAAAkG,OAAAqT,8BAAA8d,EAAAv8B,EAAAY,KAAAmO,GAEAwtB,EAAAI,uBAAA5tB,EAAAnO,OAMAZ,GAAAgK,IAAA5M,GAAAuN,OAAA2c,SAAA1mB,KAAAo7B,SAAAp7B,MACAZ,EAAAgK,IAAA5M,GAAAuN,OAAA4c,UAAA3mB,KAAAq7B,UAAAr7B,MAGA47B,EAAAz0B,GAAAwC,GAAAI,OAAA8W,WAAA7gB,KAAAmR,iBAAAhD,GAAAnO,MAGA/C,EAAAgtB,IAEA3lB,GAAAiG,MAAAjG,GAAAkG,OAAAsT,oBAAA9d,KAAAZ,EAAA+O,EAAA8b,GAEAjqB,KAAAm3B,WAAAhpB,EAAA8b,EAAAjqB,KAAAw5B,YAAArrB,EAAAgC,GAAAA,IAEAnQ,KAAA2R,MAEAxD,EAAAwD,MAAA3R,KAAA42B,aAAAx3B,IAIAkF,GAAAiG,MAAAjG,GAAAkG,OAAAuT,2BAAA/d,KAAAZ,EAAA+O,GAEAytB,EAAAtlB,MAAAtW,KAAAs7B,eAAAntB,GAAAnO,OAIAA,KAAAq3B,YAAAlpB,IAGAyc,MAAA,SAAAxrB,EAAAwrB,EAAAvnB,GAEA,GAAA0mB,GAAA/pB,KAAA6K,IAAAzL,EAEA2qB,KAEAa,EAAA5qB,KAAA4B,MAAAmoB,EAAA9nB,UAIAm5B,SAAA,SAAAh8B,GAEA,GAAA+O,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEA,IAAAuM,GAAAnO,KAAAi7B,YAIA,IAAA,GAFAY,GAAA1tB,EAAA0tB,SAAA75B,OAEAnE,EAAA,EAAAA,EAAAg+B,EAAA99B,OAAAF,IACA,CACA,GAAA29B,GAAAK,EAAAh+B,IAEA29B,EAAAvV,cAAAuV,EAAA/W,eAEA+W,EAAA7mB,MAAA3U,KAAAi7B,aAKA,GAAA9sB,GAAAnO,KAAAy7B,mBACA,CACAn3B,GAAAiG,MAAAjG,GAAAkG,OAAAwxB,oBAAAh8B,KAAAZ,EAAA+O,GAEAA,EAAA8T,QAAA,EACA9T,EAAA+rB,aAAA,CAIA,KAAA,GAFA7tB,GAAA8B,EAAA4b,QAEAlsB,EAAA,EAAAA,EAAAwO,EAAAtO,OAAAF,IACA,CACA,GAAAksB,GAAA1d,EAAAxO,IAEAksB,EAAA9D,cAAA8D,EAAAtF,eAEAsF,EAAApV,MAAA3U,KAAAy7B,oBAIAttB,EAAA8T,QAAA,EACA9T,EAAA+rB,aAAA,IAIAmB,UAAA,SAAAj8B,GAEA,GAAA+O,GAAA/O,EAAAmpB,WAAAvoB,KAAA4B,KAEAuM,IAAAnO,KAAAg7B,gBAEA12B,GAAAiG,MAAAjG,GAAAkG,OAAA+T,sBAAAve,KAAAZ,EAAA+O,GAEAnO,KAAA85B,KAAA3rB,EAAA,WAIA,IAAA,GAFA0tB,GAAA1tB,EAAA0tB,SAAA75B,OAEAnE,EAAA,EAAAA,EAAAg+B,EAAA99B,OAAAF,IACA,CACA,GAAA29B,GAAAK,EAAAh+B,EAEA29B,GAAAnR,QAAArqB,KAAAg7B,oBAMA7pB,iBAAA,SAAAhD,GAEA,MAAA,UAAAqtB,EAAArrB,GAEAhC,EAAA6b,UAAAwR,KAAArtB,EAAA0tB,SAAAxX,IAAAmX,EAAA3sB,UAEAvK,GAAAiG,MAAAjG,GAAAkG,OAAA6T,sBAAAre,KAAAmO,EAAAqtB,GAEAx7B,KAAAi8B,oBAAA9tB,EAAAqtB,EAAArrB,MAKAmrB,eAAA,SAAAntB,GAEA,MAAA,UAAAytB,GAEA,GAAAC,GAAAD,EAAAxsB,OAAAjB,EAAA6b,UAEA1lB,IAAAiG,MAAAjG,GAAAkG,OAAA2T,sBAAAne,KAAAmO,EAAA0tB,GAEAA,EAAA99B,OAEAiC,KAAA85B,KAAA3rB,EAAA,WAEA,IAAA,GAAAtQ,GAAA,EAAAA,EAAAg+B,EAAA99B,OAAAF,IAEAmC,KAAAi8B,oBAAA9tB,EAAA0tB,EAAAh+B,MAIAmC,KAAA2R,QAEAxD,EAAAwD,MAAA3R,KAAA42B,aAAAzoB,EAAAzO,WAKAq6B,SAAA,SAAA5rB,EAAA4b,EAAA5Z,GAEA,IAAA4Z,EAAA9D,aAAA,CAKA,GAAAmU,GAAAp6B,KAAAk8B,eAAA/tB,EAAA4b,EAAA5Z,EAOA,OALAiqB,IAEAp6B,KAAAm8B,WAAAhuB,EAAA4b,EAAA5Z,GAGAiqB,IAGA+B,WAAA,SAAAhuB,EAAA4b,EAAA5Z,GAEA,GAAAyrB,GAAA57B,KAAAw7B,QAAAl/B,SACA8/B,EAAAp8B,KAAAq8B,iBAAAluB,EAAA4b,EAEA6R,GAAAxlB,UAAAgmB,EAAAp8B,KAAAs8B,aAAAnuB,EAAAgC,GAAAnQ,KAAAmQ,IAGAmsB,aAAA,SAAAnuB,EAAAgC,GAEA,MAAA,UAAAqrB,GAEAx7B,KAAAu8B,iBAAApuB,EAAAqtB,EAAArrB,KAIA8rB,oBAAA,SAAA9tB,EAAAqtB,EAAArrB,GAEA,IAAAqrB,EAAAvV,aAAA,CAMA,GAAA0R,GAAA33B,KAAAZ,MAAA9C,SACAs7B,EAAAD,EAAAtV,SAAAmZ,EAAAx7B,KAAA05B,QAEA/B,GAAAvhB,UAAAwhB,EAAA53B,KAAAw8B,sBAAAruB,EAAAqtB,EAAArrB,GAAAnQ,KAAAmQ,KAGAqsB,sBAAA,SAAAruB,EAAAqtB,EAAArrB,GAEA,MAAA,UAAA4Z,GAEAA,IAEA/pB,KAAAu8B,iBAAApuB,EAAAqtB,EAAArrB,GACAnQ,KAAAk8B,eAAA/tB,EAAA4b,EAAA5Z,MAKAosB,iBAAA,SAAApuB,EAAAqtB,EAAArrB,GAEA,GAAA/Q,GAAA+O,EAAAzO,OACAm8B,EAAA1tB,EAAA0tB,SACAO,EAAAZ,EAAA3sB,MAEAgtB,GAAAxX,IAAA+X,KAEA93B,GAAAiG,MAAAjG,GAAAkG,OAAAiU,qBAAAze,KAAAmO,EAAAqtB,GAEAK,EAAAtc,IAAA6c,EAAAZ,GAEAA,EAAApyB,IAAA5M,GAAAuN,OAAAqb,QAAAjX,EAAA2tB,kBAEAN,EAAAhT,YAAAppB,EAAAqsB,QAAArsB,GAEA+Q,GAAAnQ,KAAAi7B,cAEA77B,EAAAoqB,WAEAgS,EAAA7mB,MAAA3U,KAAAi7B,aAIAO,EAAA7mB,MAAArQ,GAAA8lB,QAAA/I,SAMA6a,eAAA,SAAA/tB,EAAA4b,EAAA5Z,GAEA,GAAAooB,GAAApqB,EAAA4b,QACA6N,EAAA7N,EAAAlb,OACAurB,GAAA7B,EAAAlU,IAAAuT,EAmBA,OAjBAwC,KAEA91B,GAAAiG,MAAAjG,GAAAkG,OAAA0T,gBAAAle,KAAAmO,EAAA4b,GAEAwO,EAAAhZ,IAAAqY,EAAA7N,GAEAA,EAAA3gB,IAAA5M,GAAAuN,OAAAqb,QAAAjX,EAAAmrB,WACAvP,EAAA3gB,IAAA5M,GAAAuN,OAAAqe,kBAAAja,EAAAkrB,SAEAr5B,KAAA6iB,KAAA1U,GAEAgC,GAEAnQ,KAAAg6B,UAAA7rB,IAIAisB,GAGAC,YAAA,SAAAlsB,EAAA4b,EAAA5Z,GAEA,GAAAynB,GAAA7N,EAAAlb,OACA0pB,EAAApqB,EAAA4b,QACA0S,EAAAlE,EAAA1tB,IAAA+sB,EAEA6E,IAEAz8B,KAAA08B,cAAAvuB,EAAA4b,EAAA5Z,IAEAnQ,KAAA28B,oBAAAxuB,EAAAypB,EAAAznB,IAKAusB,cAAA,SAAAvuB,EAAA4b,EAAA5Z,GAEA,GAAAyrB,GAAA57B,KAAAw7B,QAAAl/B,SACAsgC,EAAA58B,KAAAq8B,iBAAAluB,EAAA4b,GACA7d,EAAA0vB,EAAApZ,OAAAoa,GACAf,EAAA1tB,EAAA0tB,SACAL,EAAAK,EAAAhxB,IAAAqB,EAEA,OAAAlM,MAAA68B,oBAAA1uB,EAAAqtB,EAAAzR,GAAA,EAAA5Z,IAGA4rB,uBAAA,SAAA5tB,EAAAqtB,GAEA,GAAA7D,GAAA33B,KAAAZ,MAAA9C,SACAs7B,EAAAD,EAAAtV,SAAAmZ,EAAAx7B,KAAA05B,QAEA15B,MAAA68B,oBAAA1uB,EAAAqtB,IAEAx7B,KAAA28B,oBAAAxuB,EAAAypB,IAIAiF,oBAAA,SAAA1uB,EAAAqtB,EAAAzR,EAAA+H,EAAA3hB,GAEA,GAAA/Q,GAAA+O,EAAAzO,OACA4uB,IAAAkN,CAEA,IAAAlN,EACA,CACA,IAAAtuB,KAAAs6B,iBAAAkB,EAAArrB,GAEA,OAAA,CAGA7L,IAAAiG,MAAAjG,GAAAkG,OAAAkU,wBAAA1e,KAAAmO,EAAAqtB,EAAAzR,EAEA,IAAA8R,GAAA1tB,EAAA0tB,SACAO,EAAAZ,EAAA3sB,MAEA2sB,GAAAjyB,KAAA/M,GAAAuN,OAAAqb,QAAAjX,EAAA2tB,wBAEAN,GAAAhT,YAAAppB,EAAAqsB,QAEAqG,GAEA0J,EAAAnR,UAGAwR,EAAAvc,OAAA8c,GAGA,MAAA9N,IAGAqO,oBAAA,SAAAxuB,EAAAypB,GAEA,GAAAxB,GAAAjoB,EAAAioB,QACAmC,EAAApqB,EAAA4b,QACAA,EAAAwO,EAAA1tB,IAAA+sB,EAiBA,OAfA7N,KAEAzlB,GAAAiG,MAAAjG,GAAAkG,OAAAwT,mBAAAhe,KAAAmO,EAAA4b,GAEAwO,EAAAjZ,OAAAsY,GAEA7N,EAAAxgB,KAAA/M,GAAAuN,OAAAqb,QAAAjX,EAAAmrB,WACAvP,EAAAxgB,KAAA/M,GAAAuN,OAAAqe,kBAAAja,EAAAkrB,SAEAr5B,KAAA6iB,KAAA1U,GACAnO,KAAAg6B,UAAA7rB,UAGAioB,GAAAwB,GAEA7N,GAGA0P,iBAAA,SAAAr6B,GAEA,GAAAs6B,GAAAt6B,EAAA2P,IAAA7C,IACAqoB,EAAAv0B,KAAAu0B,KAEA,OAAA,UAAAiH,GAEA,MAAA78B,GAAA68B,EAAAjH,EAAAn1B,EAAAs6B,KAIA2C,iBAAA,SAAAluB,EAAA4b,GASA,IAAA,GAPA3qB,GAAA+O,EAAAzO,OACAo9B,EAAA19B,EAAA2P,IACA4oB,EAAA33B,KAAAZ,MAAA9C,SACAs/B,EAAA57B,KAAAw7B,QAAAl/B,SACA8/B,EAAAR,EAAA1vB,IACAA,KAEArO,EAAA,EAAAA,EAAAu+B,EAAAr+B,OAAAF,IACA,CACA,GAAA8C,GAAAy7B,EAAAv+B,EAEA,IAAA8C,IAAAX,KAAA05B,QAEAxtB,EAAAvL,GAAAopB,EAAAlb,WAEA,IAAAlO,IAAAX,KAAAu0B,MAEAroB,EAAAvL,GAAAvB,EAAAyP,WAEA,IAAA5R,EAAA+C,KAAA05B,SACA,CACA,GAAAqD,GAAAv/B,EAAAwC,KAAA05B,QAAA/4B,GACAq8B,EAAArF,EAAAzrB,IAAA6wB,EAEA7wB,GAAAvL,GAAAopB,EAAAiT,OAEA,IAAA//B,EAAA+C,KAAAu0B,OACA,CACA,GAAAwI,GAAAv/B,EAAAwC,KAAAu0B,MAAA5zB,GACAq8B,EAAAF,EAAA5wB,IAAA6wB,EAEA7wB,GAAAvL,GAAAvB,EAAA49B,IAIA,MAAA9wB,MCngBA5H,GAAAwJ,UAAAqU,UAAAvO,GAEAA,GAAA3H,UAEA7M,MAAAtD,EACA6sB,MAAA,EACAhX,OAAA,EACAzE,MAAA5I,GAAA2wB,MAAA5T,KACAhT,KAAA/J,GAAA4c,KAAAG,KACA+T,MAAA,EACAttB,UAAA,EACA8M,SAAA,EACAlX,WAAA,KACA4P,sBAAA,EACAqU,aAAA,GAGAliB,EAAA8T,GAAAK,IAGA2D,KAAA,YAEAsiB,UAAAv1B,GAAAkG,OAAAsU,eACAyW,WAAAjxB,GAAAkG,OAAAyyB,gBACAzH,kBAAAlxB,GAAAkG,OAAA0yB,wBAEAzH,YAAA,SAAA/rB,EAAAsN,EAAA9V,GAEA,MAAA0S,IAAA3H,UAGA+pB,cAAA,SAAAtsB,EAAAsN,EAAA9V,GAEAlB,KAAAtC,WAAA8G,EAAAxE,KAAAtC,WAAAsC,KAAAsN,sBAEAhJ,GAAAiG,MAAAjG,GAAAkG,OAAAqU,eAAA7e,MAEAA,KAAAm2B,wBAGAI,WAAA,SAAAn3B,EAAA+Q,GAEA,GAAAE,GAAArQ,KAEAmO,GADA/O,EAAAY,KAAA4B,MACAxC,EAAAmpB,WAAAvoB,KAAA4B,OAEAlC,OAAAN,EACAg3B,WACArM,QAAA/pB,KAAAg3B,yBAAA53B,GACA66B,cAAA,EACAC,aAAA,EAEAZ,UAAA,WAEAh1B,GAAAiG,MAAAjG,GAAAkG,OAAAuU,uBAAA1O,EAAAjR,EAAAY,KAAAmO,GAEAkC,EAAAgqB,YAAAlsB,EAAAnO,MAAA,IAGAq5B,QAAA,WAEA/0B,GAAAiG,MAAAjG,GAAAkG,OAAAwU,qBAAA3O,EAAAjR,EAAAY,KAAAmO,GAEAkC,EAAAwS,KAAA1U,GACAkC,EAAA2pB,UAAA7rB,KAMA/O,GAAAyP,OAGA7O,KAAA2hB,aAEAviB,EAAAgK,IAAApJ,KAAA2hB,YAAA3hB,KAAAm9B,UAAAhvB,GAAAnO,MAIAmO,EAAAwD,MAAA3R,KAAA42B,aAAAx3B,GAGAY,KAAAq3B,YAAAlpB,IAGAgvB,UAAA,SAAAhvB,GAEA,MAAA,YAEAA,EAAAwD,MAAA3R,KAAA42B,aAAAzoB,EAAAzO,UAIAq6B,SAAA,SAAA5rB,EAAA4b,EAAA5Z,GAEA,IAAA4Z,EAAA9D,aAAA,CAKA,GACAhlB,IADAkN,EAAAzO,OACAyO,EAAA4b,SACA7d,EAAA6d,EAAAlb,OACAurB,GAAAn5B,EAAAojB,IAAAnY,EAmBA,OAjBAkuB,KAEA91B,GAAAiG,MAAAjG,GAAAkG,OAAAyS,YAAAjd,KAAAmO,EAAA4b,GAEA9oB,EAAAse,IAAArT,EAAA6d,GAEAA,EAAA3gB,IAAA5M,GAAAuN,OAAAqb,QAAAjX,EAAAmrB,WACAvP,EAAA3gB,IAAA5M,GAAAuN,OAAAqe,kBAAAja,EAAAkrB,SAEAr5B,KAAA6iB,KAAA1U,GAEAgC,GAEAnQ,KAAAg6B,UAAA7rB,IAIAisB,IAGAC,YAAA,SAAAlsB,EAAA4b,EAAA5Z,GAEA,GAAAnQ,KAAAs6B,iBAAAvQ,EAAA5Z,GAAA,CAKA,GACAlP,IADAkN,EAAAzO,OACAyO,EAAA4b,SACAqM,EAAAjoB,EAAAioB,QACAlqB,EAAA6d,EAAAlb,MAEA5N,GAAAojB,IAAAnY,KAEA5H,GAAAiG,MAAAjG,GAAAkG,OAAAuS,eAAA/c,KAAAmO,EAAA4b,GAEA9oB,EAAAqe,OAAApT,GAEA6d,EAAAxgB,KAAA/M,GAAAuN,OAAAqb,QAAAjX,EAAAmrB,WACAvP,EAAAxgB,KAAA/M,GAAAuN,OAAAqe,kBAAAja,EAAAkrB,SAEAr5B,KAAA6iB,KAAA1U,GACAnO,KAAAg6B,UAAA7rB,UAGAioB,GAAAlqB,MuBzJA,IAAA4pB,KAGAC,cAAA,SAAArsB,EAAAsN,EAAA9V,GAEAlB,KAAAy5B,iBAAAz5B,KAAAo9B,8BAAAp9B,KAAAy5B,kBAEAz5B,KAAAq9B,mBAAA,WAEAr9B,KAAAg2B,cAAAtsB,EAAAsN,EAAA9V,MAIAk8B,8BAAA,SAAA3D,GAEA,MAAA,UAAAr6B,GAEA,GAAA4qB,GAAAyP,EAAAt9B,KAAA6D,KAAAZ,GACAoR,EAAAxQ,KAAAs9B,yBAAAl+B,GACAm+B,EAAAv9B,KAAAwQ,aAEA,OAAA,UAAAuZ,GAEA,MAAAC,GAAAD,GAKA7qB,EAAAsR,EAAAuZ,EAAAwT,KAHA,KAQAF,mBAAA,SAAAG,GAMA,QAAAC,OAEAjxB,IAAAgjB,GAEAgO,EAAAphC,MAAA4D,MARA,GAAAq1B,GAAAr1B,KAAAq1B,eACA7F,EAAApsB,EAAAiyB,GACA7oB,EAAA,CAUA,KAAA,GAAA5K,KAAAyzB,GACA,CACA,GAAA7kB,GAAA6kB,EAAAzzB,EAEA0C,IAAAuG,IAAAjJ,EAAA5B,KAAA09B,iBAAAltB,EAAAitB,GAAAz9B,QAIA09B,iBAAA,SAAAltB,EAAAgtB,GAEA,MAAA,UAAAtH,GAEAl2B,KAAAq1B,eAAAa,EAAA55B,SAAAsF,MAAA4O,EACAxQ,KAAAq1B,eAAAa,EAAA55B,SAAAuN,WAAA2G,EACAxQ,KAAAs1B,qBAAA9kB,GAAA0lB,EAEAsH,EAAAphC,MAAA4D,QAIAg3B,yBAAA,SAAA53B,GAEA,MAAAkR,IAAA,GAAAF,IAAAtU,EAAAsD,EAAAY,MAAAA,KAAAwQ,cAAAxQ,KAAAs1B,uBAGA2B,iBAAA,WAEA,MAAA3mB,IAAA,GAAAhE,IAAAtM,KAAAwQ,cAAAxQ,KAAAs1B,uBAGAhf,MAAA,SAAAjP,GAEA,GAAAgF,GAAArM,KAAAs1B,oBAEA,KAAA,GAAA30B,KAAA0L,GACA,CACA,GAAAjN,GAAAiN,EAAA1L,EAEAvB,GAAA9C,SAAAga,MAAAjP,EAAArH,QAIA22B,mBAAA,SAAAtvB,GAEA,GAAAgF,GAAArM,KAAAs1B,oBAEA,KAAA,GAAA30B,KAAA0L,GACA,CACA,GAAAjN,GAAAiN,EAAA1L,EAEAvB,GAAA9C,SAAA6K,GAAAwC,GAAAI,OAAA8W,WAAAxZ,EAAArH,QAIA42B,aAAA,SAAAx3B,GAEA,GAAAy3B,GAAA72B,KAAA2R,MACAA,EAAAlV,EAAAo6B,GAAA/xB,GAAA+xB,EAAAz3B,GAAAy3B,EACAC,EAAA,GAAAplB,IAAAtS,EAAA2P,IAAA4C,EAOA,OALArB,IAAAwmB,EAAA92B,KAAAwQ,cAAAxQ,KAAAs1B,sBAEAwB,EAAArgB,OACAqgB,EAAAxgB,MAAAtW,KAAA+2B,mBAAA33B,GAAAY,MAEA82B,GAGAjmB,WAAA,SAAAF,EAAAR,GAEA,GAAAQ,YAAAnU,IAEA,MAAAmU,EAEA,IAAAxT,EAAAwT,GACA,CACA,GAAA7B,GAAA9O,KAAA29B,yBAAAhtB,EAEA,IAAA7B,EAEA,MAAAA,GAAA+B,WAAAF,EAAAR,GAIA,OAAA,GAGA0nB,YAAA,SAAA52B,EAAA62B,EAAA3nB,GAEA,GAAA2iB,GAAA9yB,KAAA+3B,yBAAA92B,EAAA62B,EAaA,OAXA72B,GAAAjB,KAAAwQ,iBAEAvP,EAAAjB,KAAAwQ,eAAA,KACAsiB,GAAA,GAGAA,IAAA3iB,GAAAnQ,KAAAo1B,OAAAn0B,EAAA6qB,UAEA7qB,EAAA0T,QAGAme,GAGAmF,aAAA,SAAAh3B,EAAA62B,EAAAtiB,EAAA0iB,EAAA/nB,GAEA,GAAA2iB,GAAA9yB,KAAAm4B,0BAAAl3B,EAAA62B,EAAAtiB,EAAA0iB,GAEAF,EAAAh4B,KAAAwQ,cACA4nB,EAAAn3B,EAAA+2B,GACAK,EAAAr4B,KAAAs9B,yBAAA9nB,EAkBA,OAhBAtW,GAAAk5B,EAAAC,KAEAp3B,EAAA+2B,GAAAK,EACAvF,GAAA,GAGAA,KAEA9yB,KAAAo1B,MAAAn0B,EAAA6qB,UAAA3b,GAEAlP,EAAA0T,QAGA1T,EAAAuI,SAAAhN,GAAAuN,OAAA+c,WAAA7lB,EAAAuU,EAAAsiB,EAAAI,KAGApF,GAGAoE,YAAA,SAAA93B,EAAAC,GAEA,GAAAmR,GAAAxQ,KAAAwQ,cACAotB,EAAAx+B,EAAAoR,EAEA,IAAArR,EAAAC,EAAAC,EAAA9B,IAAAA,EAAAqgC,GACA,CACA,GAAA7T,GAAA/pB,KAAAs1B,qBAAAsI,EAEA,IAAA7T,EAAAztB,SACA,CACA,GAAA86B,KAIA,IAFAA,EAAA5mB,GAAAotB,EAEAnhC,EAAA4C,GAEA+3B,EAAArN,EAAAztB,SAAA4P,KAAA9M,EAAAC,OAIA,KAAA,GAAAxB,GAAA,EAAAA,EAAAwB,EAAAtB,OAAAF,IAEAu5B,EAAArN,EAAAztB,SAAA4P,IAAArO,IAAAuB,EAAAC,EAAAxB,GAIA,OAAAu5B,MAKAhhB,UAAA,SAAAzF,EAAAtJ,EAAA8I,GAEA,GAAAhT,EAAAwT,GACA,CACA,GAAA7B,GAAA9O,KAAA29B,yBAAAhtB,EAEA7B,MAAA,GAEAA,EAAAsH,UAAAzF,EAAAtJ,EAAArH,KAAAmQ,KAKAgnB,WAAA,SAAAC,EAAA/vB,EAAA8I,GAEA,IAAA,GAAAtS,GAAA,EAAAA,EAAAu5B,EAAAr5B,OAAAF,IACA,CACA,GAAA8S,GAAAymB,EAAAv5B,EAEA,IAAA8S,YAAAnU,IAEA6K,EAAAlL,KAAA6D,KAAA2Q,OAEA,IAAAxT,EAAAwT,GACA,CACA,GAAA7B,GAAA9O,KAAA29B,yBAAAhtB,EAEA,IAAA7B,EACA,CACA,GAAA5C,GAAA4C,EAAA4B,kBAAAC,EAEAxC,UAAAioB,QAAAlqB,IAAA,EAEA4C,EAAAsH,UAAAzF,EAAAtJ,EAAArH,KAAAmQ,OAMAgrB,eAAA,WAEA,OAAA,GAGAzD,aAAA,SAAA/mB,GAEA,MAAA1T,GAAA0T,IAGAktB,iBAAA,SAAAz+B,GAEA,MAAAA,GAAAY,KAAAwQ,gBAGAmtB,yBAAA,SAAAv+B,GAEA,GAAAoR,GAAAxQ,KAAA69B,iBAAAz+B,GACAA,EAAAY,KAAAs1B,qBAAA9kB,EAEA,OAAApR,GAAAA,EAAA9C,UAAA,GAGAghC,yBAAA,SAAAl+B,GAEA,MAAAY,MAAAq1B,eAAAj2B,EAAA2P,IAAAnN,OClRA/F,GAAAyI,MAAAA,GAGAzI,EAAAyI,MAAAwF,MAAAtN,GACAX,EAAAyI,MAAAhI,SAAAqN,GACA9N,EAAAyI,MAAAw5B,SAAA9vB,GACAnS,EAAAyI,MAAAy5B,UAAArrB,GAGA7W,EAAAyI,MAAA05B,IAAAhvB,GACAnT,EAAAyI,MAAA25B,WAAA/7B,GACArG,EAAAyI,MAAA45B,gBAAA5xB,GACAzQ,EAAAyI,MAAA65B,MAAArtB,GACAjV,EAAAyI,MAAA85B,YAAA1sB,GACA7V,EAAAyI,MAAA+5B,KAAAlsB,GAGAtW,EAAAyI,MAAAjI,QAAAA,EACAR,EAAAyI,MAAAvI,UAAAA,EACAF,EAAAyI,MAAArI,WAAAA,EACAJ,EAAAyI,MAAA7H,SAAAA,EACAZ,EAAAyI,MAAA5H,SAAAA,EACAb,EAAAyI,MAAA1H,UAAAA,EACAf,EAAAyI,MAAAzH,OAAAA,EACAhB,EAAAyI,MAAAvH,SAAAA,EACAlB,EAAAyI,MAAArH,QAAAA,EACApB,EAAAyI,MAAAnH,SAAAA,EACAtB,EAAAyI,MAAA/G,QAAAA,EAEA1B,EAAAyI,MAAAjG,KAAAA,EACAxC,EAAAyI,MAAA9G,QAAAA,EACA3B,EAAAyI,MAAA3F,WAAAA,EACA9C,EAAAyI,MAAAnF,UAAAA,EAEAtD,EAAAyI,MAAAqD,SAAAA,GAEA9L,EAAAyI,MAAA7E,OAAAA,EACA5D,EAAAyI,MAAArE,YAAAA,EAEApE,EAAAyI,MAAAzE,SAAAA,EACAhE,EAAAyI,MAAA1D,KAAAA,EACA/E,EAAAyI,MAAAlC,KAAAA,EACAvG,EAAAyI,MAAA5B,KAAAA,EACA7G,EAAAyI,MAAAhD,KAAAA,EACAzF,EAAAyI,MAAAtG,KAAAA,EACAnC,EAAAyI,MAAArG,KAAAA,EACApC,EAAAyI,MAAAtB,KAAAA,EACAnH,EAAAyI,MAAAlB,OAAAA,EACAvH,EAAAyI,MAAAhB,QAAAA,EACAzH,EAAAyI,MAAAvC,QAAAA,EAEAlG,EAAAyI,MAAAb,QAAAA,EACA5H,EAAAyI,MAAApF,OAAAA,EACArD,EAAAyI,MAAA1G,aAAAA,EACA/B,EAAAyI,MAAAd,cAAAA,EAEA3H,EAAAyI,MAAAH,SAAAA,EACAtI,EAAAyI,MAAAD,eAAAA,EACAxI,EAAAyI,MAAAE,iBAAAA,EACA3I,EAAAyI,MAAAG,cAAAA,EAEA5I,EAAAyI,MAAA0B,UAAAA,EACAnK,EAAAyI,MAAA4B,YAAAA,EAEArK,EAAAyI,MAAAmB,qBAAAA,EACA5J,EAAAyI,MAAAsB,uBAAAA,EAEA/J,EAAAyI,MAAAa,mBAAAA,EACAtJ,EAAAyI,MAAAgB,qBAAAA,EAEAzJ,EAAAyI,MAAA+B,WAAAA,GACAxK,EAAAyI,MAAAkC,aAAAA,GAEA3K,EAAAyI,MAAAW,MAAAA,GACApJ,EAAAyI,MAAAQ,OAAAA,GACAjJ,EAAAyI,MAAAwC,gBAAAA,IAEA9G","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note, \n * Arrays are considered objects.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a \n * string it is split based on the delimiter given. If the variable is an \n * array then it is returned. If the variable is any other type it may result \n * in an error.\n * \n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n * \n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom \n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n * \n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n * \n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n * \n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n * \n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid() \n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n  \n  expr.replace( parse.REGEX, function(prop) \n  {\n    if (!valid) \n    {\n      return;\n    }\n\n    if ( isArray( base ) ) \n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i)) \n      {\n        base = base[ i ];\n      }\n      else \n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) ) \n    {\n      if (prop in base) \n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      } \n      else \n      {\n        valid = false;\n      }\n    } \n    else \n    {\n      valid = false;\n    }\n  });\n  \n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n      \n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the \n * constructor for creating instances of the Neuro object defined.\n * \n * @namespace \n * @param {Object} options\n *        The options of \n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  if ( Neuro.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });  \n  }\n  else\n  {\n    Neuro.unloaded.push( database );    \n  }\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.autoload = false;\n\nNeuro.unloaded = [];\n\nNeuro.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Neuro.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Neuro.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new NeuroModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };  \n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n    \n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw 'Model keys cannot be changed.';\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n      \n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n    \n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === NeuroModel.Status.RemovePending )\n      {\n        Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( NeuroRemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== NeuroModel.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n      \n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( Neuro.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );      \n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n  \n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model ); \n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\n/**\n * An instance\n * \n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData ); \n        }\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    if ( this.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, this.$db, this );\n\n      return false;\n    }\n\n    var cascade = \n      (arguments.length === 3 ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    this.$db.addReference( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n    \n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].clone( this, values, properties[ relationName ] );\n      }\n    }\n\n    return db.instantiate( values );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function(models)\n  {\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function() \n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetOffline, [model] );\n    }\n    else\n    {  \n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n    }\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n        \n        model.$trigger( NeuroModel.Events.RemoteRemoveOffline, [model] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live(\n      {\n        op:   NeuroDatabase.Live.Remove,\n        key:  key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n\n        model.$trigger( NeuroModel.Events.RemoteSaveOffline, [model] );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = \n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = \n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.pendingInitials = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var initials = this.pendingInitials;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], initials[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    initials.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, initialValue, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingInitials.push( initialValue );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, initialValue, remoteData );\n    }\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  clone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle, \n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n    \n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n      \n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );        \n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n      \n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );        \n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );      \n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  clone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  clone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  clone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( NeuroModel.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 108,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);"],"sourceRoot":"/source/"}