{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","all.js","boot.js","create.js","fetch.js","methods.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","parsed","eventize","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","Neuro","cache","database","NeuroDatabase","model","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","arguments","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","remoteOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","checkNeuro","cached","callbackContext","all","getModels","boot","input","putRemoteData","create","instantiate","$save","$key","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","fetch","buildKeyFromInput","instance","getModel","buildObjectFromKey","$set","$refresh","methods","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","encode","data","decode","rawData","ready","persistent","onReadyRemove","onReady","invoked","grabModel","remoteData","checkModel","result","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","sort","revisionFunction","ar","br","comparatorFunction","isSorted","decoded","revisionCompare","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$isDeleted","SavePending","refresh","onLocalError","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","op","UpdateAndSave","CreateAndSave","removeFromModels","RemovePending","Removed","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","filter","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","next","finished","run","finish","tryNext","setNext","insertNext","onSuccess","onFailure","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","changes","saving","publish","clearLocal","markSynced","handleData","saveNow","clearPending","publishing","Store","Key","Keys","auto","getDefaults","field","pendingLoads","pendingRemoteDatas","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","remotes","handleLoad","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","total","belongsTo","that","isRelatedFactory","initial","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleModelAdded","handleLazyLoad","bulk","existing","given","removing","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","dontRemove","Relation","Operation","Map"],"mappings":"CAAA,SAAAA,EAAAC,GCAA,QAAAC,GAAAC,GAEA,MAAAA,KAAAF,EAGA,QAAAG,GAAAD,GAEA,SAAAA,GAAAA,EAAAE,aAAAF,EAAAG,MAAAH,EAAAI,OAGA,QAAAC,GAAAL,GAEA,SAAAA,GAAAA,EAAAM,UAAAL,EAAAD,IAAAA,EAAAO,oBAAAC,IAGA,QAAAC,GAAAT,GAEA,MAAA,gBAAAA,GAGA,QAAAU,GAAAV,GAEA,MAAA,gBAAAA,KAAAW,MAAAX,GAGA,QAAAY,GAAAZ,GAEA,MAAA,iBAAAA,GAGA,QAAAa,GAAAb,GAEA,MAAAA,aAAAc,MAGA,QAAAC,GAAAf,GAEA,MAAAA,aAAAgB,QAGA,QAAAC,GAAAjB,GAEA,MAAAA,aAAAkB,OAGA,QAAAC,GAAAnB,GAEA,MAAA,QAAAA,GAAA,gBAAAA,GAGA,QAAAoB,GAAApB,EAAAqB,GAEA,MAAArB,aAAAkB,OAAAlB,EAAAA,EAAAqB,MAAAA,GAQA,QAAAC,GAAAtB,GAEA,QAAAA,IAAAF,GAAA,OAAAE,GAGA,QAAAuB,GAAAC,EAAAxB,EAAAyB,GAIA,IAAA,GAFAC,GAAAD,GAAAE,EAEAC,EAAA,EAAAC,EAAAL,EAAAM,OAAAD,EAAAD,EAAAA,IAEA,GAAAF,EAAAF,EAAAI,GAAA5B,GAEA,MAAA4B,EAIA,QAAA,EAGA,QAAAG,MAKA,QAAAC,KAEA,OAAA,OAAA,EAAAC,KAAAC,UAAA,GAAAC,SAAA,IAAAC,UAAA,GAGA,QAAAC,KAEA,MAAAL,KAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,IAGA,QAAAM,GAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAjC,EAAA+B,GAEA,MAAAD,GAAAC,KAAAC,EAAAC,EAIA,KAAA,GAAAd,GAAA,EAAAA,EAAAY,EAAAV,OAAAF,IACA,CACA,GAAAe,GAAAH,EAAAZ,GACAgB,EAAAF,EAAAd,EAEA,KAAAiB,EAAAN,EAAAI,GAAAF,EAAAG,IAEA,OAAA,EAIA,OAAA,EAMA,QAAAE,GAAAC,EAAAC,EAAAC,GAEAC,EAAAD,EAAAD,EAAAzC,UAAAwC,GAGA,QAAAG,GAAAC,EAAAC,GAEA,IAAA,GAAAC,KAAAF,GAEAC,EAAAC,GAAAF,EAAAE,EAGA,OAAAD,GAGA,QAAAE,GAAAC,EAAA3B,EAAA4B,GAEA,GAAAC,GAAAF,EAAA3B,EACA2B,GAAA3B,GAAA2B,EAAAC,GACAD,EAAAC,GAAAC,EAGA,QAAAC,GAAAC,EAAAC,EAAAC,GAEA,IAAA,GAAAR,KAAAQ,GACA,CACA,GAAAC,GAAAD,EAAAR,GACAU,EAAAH,EAAAP,EAEA,KAAAU,GAAAD,IAAAhE,EAEA,KAAAuD,GAAA,uBAEA/B,GAAAyC,GAEAJ,EAAAN,GAAAU,EAIAJ,EAAAN,GAAAW,EAAAF,GAIAH,EAAAC,QAAAA,EAGA,QAAAK,GAAAC,GAEA,MAAA,KAAAA,EAAApC,OAAAoC,EAAAC,cAAAD,EAAAE,OAAA,GAAAD,cAGA,QAAAE,GAAAC,GAEA,MAAAA,GAAAC,QAAA,WAAAN,GAGA,QAAAO,GAAAxE,GAEA,MAAAsB,GAAAtB,GAKAK,EAAAL,GAEA,GAAAA,GAEAC,EAAAD,GAEAA,IAGAgE,EAAAhE,GAZAA,EAeA,QAAAyE,GAAAC,EAAAC,EAAAC,GAIA,IAAA,GAFAC,MAEAjD,EAAA,EAAAA,EAAA+C,EAAA7C,OAAAF,IACA,CACA,GAAAkD,GAAAH,EAAA/C,EAEAkD,KAAAJ,KAEAG,EAAAC,GAAAF,EAAAZ,EAAAU,EAAAI,IAAAJ,EAAAI,IAIA,MAAAD,GAGA,QAAAE,GAAAL,EAAAC,EAAAC,GAEA,GAAAnE,EAAAkE,GACA,CACA,GAAAK,GAAAN,EAAAC,EAEA,OAAAC,GAAAZ,EAAAgB,GAAAA,EAMA,IAAA,GAFAC,MAEArD,EAAA,EAAAA,EAAA+C,EAAA7C,OAAAF,IACA,CACA,GAAAkD,GAAAH,EAAA/C,GACAoD,EAAAN,EAAAI,EAEAG,GAAAC,KAAAN,EAAAZ,EAAAgB,GAAAA,GAGA,MAAAC,GAiBA,QAAAjB,GAAAhE,EAAAmF,GAEA,GAAA,OAAAnF,GAAAA,IAAAF,GAAA,gBAAAE,IAAAC,EAAAD,IAAAe,EAAAf,GAEA,MAAAA,EAGA,IAAAiB,EAAAjB,GACA,CAGA,IAAA,GAFAoF,MAEAxD,EAAA,EAAAA,EAAA5B,EAAA8B,OAAAF,IAEAwD,EAAAF,KAAAlB,EAAAhE,EAAA4B,IAGA,OAAAwD,GAGA,GAAAvE,EAAAb,GAEA,MAAA,IAAAc,MAAAd,EAAAqF,UAGA,IAAAD,KAEA,KAAA,GAAA/B,KAAArD,IAEAmF,GAAA,MAAA9B,EAAAe,OAAA,MAEAgB,EAAA/B,GAAAW,EAAAhE,EAAAqD,IAIA,OAAA+B,GAGA,QAAAE,GAAAC,EAAAC,EAAAb,EAAAlD,GAIA,IAAA,GAFAgE,MAEA7D,EAAA,EAAAA,EAAA+C,EAAA7C,OAAAF,IACA,CACA,GAAAkD,GAAAH,EAAA/C,EAEAH,GAAA8D,EAAAT,GAAAU,EAAAV,MAEAW,EAAAX,GAAAd,EAAAuB,EAAAT,KAIA,MAAAW,GAGA,QAAAC,GAAA1F,GAEA,GAAAiB,EAAAjB,IAAAS,EAAAT,GAEA,MAAAA,GAAA8B,MAEA,IAAAX,EAAAnB,GACA,CACA,GAAA2F,GAAA,CAEA,KAAA,GAAAtC,KAAArD,GAEA2F,GAGA,OAAAA,GAGA,MAAA,GAGA,QAAAC,GAAA5F,GAEA,GAAA,OAAAA,GAAA,SAAAA,GAAA,IAAAA,EAEA,OAAA,CAEA,IAAAiB,EAAAjB,IAAAS,EAAAT,GAEA,MAAA,KAAAA,EAAA8B,MAEA,IAAAjB,EAAAb,GAEA,MAAA,KAAAA,EAAAqF,WAAA1E,MAAAX,EAAAqF,UAEA,IAAAlE,EAAAnB,GACA,CACA,IAAA,GAAAqD,KAAArD,GAEA,OAAA,CAEA,QAAA,EAGA,OAAA,EAGA,QAAA2B,GAAA4B,EAAAsC,GAEA,MAAAtC,KAAAsC,EAGA,QAAAhD,GAAAU,EAAAsC,GAEA,GAAAtC,IAAAsC,EAAA,OAAA,CACA,IAAA,OAAAtC,GAAA,OAAAsC,EAAA,OAAA,CACA,IAAAtC,IAAAA,GAAAsC,IAAAA,EAAA,OAAA,CAEA,IAAAC,SAAAvC,GACAwC,QAAAF,EACA,IAAAC,IAAAC,EAAA,OAAA,CAEA,IAAAC,GAAA/E,EAAAsC,GACA0C,EAAAhF,EAAA4E,EACA,IAAAG,IAAAC,EAAA,OAAA,CAEA,IAAAD,EAAA,CACA,GAAAzC,EAAAzB,SAAA+D,EAAA/D,OAAA,OAAA,CACA,KAAA,GAAAF,GAAA,EAAAA,EAAA2B,EAAAzB,OAAAF,IACA,IAAAiB,EAAAU,EAAA3B,GAAAiE,EAAAjE,IACA,OAAA,CAGA,QAAA,EAGA,GAAAf,EAAA0C,GACA,MAAA1C,GAAAgF,IAAAhD,EAAAU,EAAA8B,UAAAQ,EAAAR,UAEA,IAAAtE,EAAAwC,GACA,MAAAxC,GAAA8E,IAAAtC,EAAApB,aAAA0D,EAAA1D,UAGA,IAAA,WAAA2D,EAAA,CACA,IAAA,GAAAhB,KAAAvB,GACA,KAAA,MAAAuB,EAAAV,OAAA,IAAAnE,EAAAsD,EAAAuB,KACAA,IAAAe,IAAAhD,EAAAU,EAAAuB,GAAAe,EAAAf,KACA,OAAA,CAIA,KAAA,GAAAA,KAAAe,GACA,KAAA,MAAAf,EAAAV,OAAA,IAAAnE,EAAA4F,EAAAf,KACAA,IAAAvB,IACA,OAAA,CAIA,QAAA,EAGA,OAAA,EAGA,QAAA2C,GAAA3C,EAAAsC,GAEA,MAAAtC,KAAAsC,EAAA,EAAAA,EAAAtC,EAAA,GAAA,EAGA,QAAA4C,GAAA5C,EAAAsC,EAAAO,GAEA,GAAA7C,GAAAsC,EAEA,MAAA,EAGA,IAAAQ,GAAA/E,EAAAiC,GACA+C,EAAAhF,EAAAuE,EAEA,OAAAQ,KAAAC,EAEAD,IAAAD,GAAAE,GAAAF,EAAA,GAAA,GAGAvF,EAAA0C,KAEAA,EAAAA,EAAA8B,WAEAxE,EAAAgF,KAEAA,EAAAA,EAAAR,WAEA3E,EAAA6C,IAAA7C,EAAAmF,GAEAK,EAAA3C,EAAAsC,GAEA5E,EAAAsC,IAAAtC,EAAA4E,GAEAK,EAAA3C,EAAAzB,OAAA+D,EAAA/D,QAEAlB,EAAA2C,IAAA3C,EAAAiF,GAEAtC,EAAA,GAAA,GAGAA,EAAA,IAAAgD,cAAAV,EAAA,KAGA,QAAAW,GAAA/E,EAAA2E,GAEA,GAAAnG,EAAAwB,GAEA,MAAAA,EAEA,IAAAhB,EAAAgB,GAEA,MAAA,MAAAA,EAAA2C,OAAA,IAEA3C,EAAAA,EAAAW,UAAA,GAEA,SAAAmB,EAAAsC,GAEA,GAAAQ,GAAA/E,EAAAiC,GAAAA,EAAA9B,GAAA8B,EACA+C,EAAAhF,EAAAuE,GAAAA,EAAApE,GAAAoE,CAEA,OAAAM,GAAAG,EAAAD,GAAAD,KAKA,SAAA7C,EAAAsC,GAEA,GAAAQ,GAAA/E,EAAAiC,GAAAA,EAAA9B,GAAA8B,EACA+C,EAAAhF,EAAAuE,GAAAA,EAAApE,GAAAoE,CAEA,OAAAM,GAAAE,EAAAC,EAAAF,GAIA,IAAAnF,EAAAQ,GACA,CAGA,IAAA,GAFAgF,MAEA7E,EAAA,EAAAA,EAAAH,EAAAK,OAAAF,IAEA6E,EAAA7E,GAAA4E,EAAA/E,EAAAG,GAAAwE,EAGA,OAAA,UAAA7C,EAAAsC,GAIA,IAAA,GAFAJ,GAAA,EAEA7D,EAAA,EAAAA,EAAA6E,EAAA3E,QAAA,IAAA2D,EAAA7D,IAEA6D,EAAAgB,EAAA7E,GAAA2B,EAAAsC,EAGA,OAAAJ,IAIA,MAAA,MC/dA,QAAAiB,GAAA/C,EAAAgD,GAgBA,QAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAhH,EAAA+G,GAAA,CAKA,GAAAD,GAAA3F,EAAA2F,EAAA,IAEAhH,GAAA8G,EAAAC,MAEAD,EAAAC,MAGA,KAAA,GAAAlF,GAAA,EAAAA,EAAAmF,EAAAjF,OAAAF,IAEA7B,EAAA8G,EAAAC,GAAAC,EAAAnF,OAEAiF,EAAAC,GAAAC,EAAAnF,QAGAiF,EAAAC,GAAAC,EAAAnF,IAAAsD,MAAA8B,EAAAC,GAAAJ,EAAA,KAeA,QAAAK,GAAAH,EAAAC,EAAAC,GAIA,MAFAL,GAAAO,KAAA,OAAAJ,EAAAC,EAAAC,GAEAE,KAcA,QAAAC,GAAAL,EAAAC,EAAAC,GAIA,MAFAL,GAAAO,KAAA,SAAAJ,EAAAC,EAAAC,GAEAE,KAGA,QAAAE,GAAAN,EAAAC,EAAAC,GAIA,MAFAL,GAAAO,KAAA,UAAAJ,EAAAC,EAAAC,GAEAE,KAIA,QAAAG,GAAAC,EAAAC,EAAAR,GAEA,GAAAO,GAAAC,IAAAD,GAIA,IAAA,GAFAE,GAAAF,EAAAC,GAEAhE,EAAAiE,EAAA3F,OAAA,EAAA0B,GAAA,EAAAA,IAEAiE,EAAAjE,GAAAkE,KAAAV,GAEAS,EAAAE,OAAAnE,EAAA,GAOA,QAAAoE,GAAAlD,EAAArB,GAEAqB,GAAArB,IAAAqB,UAEAA,GAAArB,GAoBA,QAAAwE,GAAAd,EAAAC,GAGA,GAAAjH,EAAAgH,GAOA,CACA,GAAAA,GAAA3F,EAAA2F,EAAA,IAGA,IAAA9G,EAAA+G,GAYA,IAAA,GAAApF,GAAA,EAAAA,EAAAmF,EAAAjF,OAAAF,IAEA0F,EAAAH,KAAAW,KAAAf,EAAAnF,GAAAoF,GACAM,EAAAH,KAAAY,OAAAhB,EAAAnF,GAAAoF,GACAM,EAAAH,KAAAa,QAAAjB,EAAAnF,GAAAoF,OAdA,KAAA,GAAApF,GAAA,EAAAA,EAAAmF,EAAAjF,OAAAF,IAEAgG,EAAAT,KAAAW,KAAAf,EAAAnF,IACAgG,EAAAT,KAAAY,OAAAhB,EAAAnF,IACAgG,EAAAT,KAAAa,QAAAjB,EAAAnF,QAfAgG,GAAAT,KAAA,QACAS,EAAAT,KAAA,UACAS,EAAAT,KAAA,UA4BA,OAAAA,MAIA,QAAAc,GAAAV,EAAAC,EAAAU,EAAAC,GAEA,GAAAZ,GAAAC,IAAAD,GACA,CAIA,IAAA,GAHAE,GAAAF,EAAAC,GACAY,IAAAC,EAEAzG,EAAA,EAAAA,EAAA6F,EAAA3F,OAAAF,IACA,CACA,GAAAoF,GAAAS,EAAA7F,EAEAoF,IAEAA,EAAAsB,KAAAF,IAEApB,EAAAsB,GAAAF,EACApB,EAAAU,GAAAtH,MAAA4G,EAAAuB,GAAAL,GAEAlB,IAAAS,EAAA7F,KAEAA,EAAA,KAMAuG,SAEAZ,GAAAC,IAcA,QAAAgB,GAAAzB,EAAAmB,GAIA,IAAA,GAFAnB,GAAA3F,EAAA2F,EAAA,KAEAnF,EAAA,EAAAA,EAAAmF,EAAAjF,OAAAF,IACA,CACA,GAAA6G,GAAA1B,EAAAnF,EAEAqG,GAAAd,KAAAW,KAAAW,EAAAP,GAAA,GACAD,EAAAd,KAAAY,OAAAU,EAAAP,GAAA,GACAD,EAAAd,KAAAa,QAAAS,EAAAP,GAAA,GAGA,MAAAf,MAzNA,GAAAO,GAAA,EACAa,EAAA,EACAD,EAAA,EAEAD,EAAA,CAwNA1B,IAEAhD,EAAA+E,IAAAxB,EACAvD,EAAAgF,MAAAvB,EACAzD,EAAAiF,OAAAvB,EACA1D,EAAAkF,KAAAhB,EACAlE,EAAAmF,SAAAN,IAIA7E,EAAAuD,GAAAA,EACAvD,EAAAyD,KAAAA,EACAzD,EAAA0D,MAAAA,EACA1D,EAAAkE,IAAAA,EACAlE,EAAA6E,QAAAA,GCrQA,QAAAO,GAAAnF,GAEA,GAAAA,EAAAU,OAAAyE,GAAAC,MAEA,MAAAD,GAAAC,MAAApF,EAAAU,KAGA,IAAA2E,GAAA,GAAAC,GAAAtF,GAEAuF,EAAA,GAAAC,UAAA,mBAAAH,EAAAI,UAAA,4DAiBA,OAhBAF,GAAA5I,UAAA,GAAAC,GAAAyI,GAEAA,EAAAK,MAAAH,EACAA,EAAA7I,SAAA2I,EAEAF,EAAAP,QAAAO,EAAAQ,OAAAC,SAAAL,EAAAF,EAAArF,IAEAmF,EAAAC,MAAAC,EAAA3E,MAAA6E,EACAJ,EAAAC,MAAAC,EAAAI,WAAAF,EAEAF,EAAAQ,OAEAV,EAAAP,QAAAO,EAAAQ,OAAAG,aAAAP,IAEAJ,EAAAY,MAAAZ,EAAAa,OAAAC,SAAAZ,EAAArF,GAEAuF,ECdA,QAAAW,GAAAC,EAAAjD,EAAAkD,GAEA,GAAAC,GAAAhK,EAAA+J,GAAAA,EACA7I,EAAA6I,IAAA/J,EAAA+J,EAAAC,KAAAD,EAAAC,IAAAlI,EACAmI,EAAA/I,EAAA6I,IAAA/J,EAAA+J,EAAAE,KAAAF,EAAAE,IAAAnI,CAEA,IAAAoI,OAAAC,eAEAD,OAAAC,eAAAL,EAAAjD,GAEAuD,cAAA,EACAC,YAAA,EACAL,IAAAA,EACAC,IAAAA,QAIA,CACA,GAAAK,GAAAR,EAAAQ,KAEAR,GAAAQ,MAAA,WAEAA,EAAAnK,MAAA+G,KAAAqD,UAEA,IAAAC,GAAAtD,KAAAL,GAAAmD,EAAA7J,MAAA+G,MAEAuD,EAAA,WAEA,GAAAC,GAAAxD,KAAAL,EAEA6D,KAAAF,EAEAP,EAAA/J,KAAAgH,KAAAwD,GAIAF,EAAAtD,KAAAL,GAAAmD,EAAA7J,MAAA+G,MAIAA,MAAAyB,OAAApI,EAAA+I,OAAAqB,QAAAF,EAAAvD,QCXA,QAAA0D,GAAA9D,EAAAC,EAAAL,EAAAmE,GAEA,GAAAC,IACA7D,GAAAP,EAAA,MAAA,KACAS,KAAAT,EAAA,QAAA,OACAU,MAAAV,EAAA,SAAA,SAGAY,EAAAuD,KAEA,IAAA7K,EAAA+G,GAEAO,EAAArC,MAEA8F,KAAAD,EAAA7D,GACAH,OAAAA,EACAkE,OAAAjE,QAGA,IAAA/F,EAAA+F,IAAA,IAAAA,EAAAlF,QAAA7B,EAAA+G,EAAA,IAEAO,EAAArC,MAEA8F,KAAAD,EAAA7D,GACAH,OAAAA,EACAkE,OAAAjE,EAAA,GACAC,QAAAD,EAAA,SAGA,IAAA7F,EAAA6F,GAEA,IAAA,GAAAkE,KAAAlE,GAEA,GAAAkE,IAAAH,GACA,CACA,GAAAI,GAAAnE,EAAAkE,GACAF,EAAAD,EAAAG,EAEAjL,GAAAkL,GAEA5D,EAAArC,MAEA8F,KAAAA,EACAjE,OAAAA,EACAkE,OAAAE,IAGAlK,EAAAkK,IAAA,IAAAA,EAAArJ,QAAA7B,EAAAkL,EAAA,KAEA5D,EAAArC,MAEA8F,KAAAA,EACAjE,OAAAA,EACAkE,OAAAE,EAAA,GACAlE,QAAAkE,EAAA,KAOA,MAAA5D,GAGA,QAAA6D,GAAAzH,EAAA4D,GAEA,IAAA,GAAA3F,GAAA,EAAAA,EAAA2F,EAAAzF,OAAAF,IACA,CACA,GAAAyJ,GAAA9D,EAAA3F,EAEA+B,GAAA0H,EAAAL,MAAAK,EAAAtE,OAAAsE,EAAAJ,OAAAI,EAAApE,UC9GA,QAAAiC,GAAAtF,GAEA,GAAAC,GAAAqF,EAAAoC,QAGA5H,GAAAyD,KAAAvD,EAAAC,EAGA,KAAA,GAAAR,KAAAO,GAEAP,IAAAQ,KAEAsD,KAAA9D,GAAAO,EAAAP,GAKA,IAAAkI,GAAApE,KAAAoE,IACAC,EAAArE,KAAAqE,MACA,IAAAvK,EAAAsK,GAEA,IAAA,GAAA3J,GAAA2J,EAAAzJ,OAAA,EAAAF,GAAA,EAAAA,IAEAL,EAAAiK,EAAAD,EAAA3J,OAAA,GAEA4J,EAAAC,QAAAF,EAAA3J,QAMAL,GAAAiK,EAAAD,MAAA,GAEAC,EAAAC,QAAAF,EAKApE,MAAAuE,OAAA,GAAAC,GACAxE,KAAAkC,UAAAlC,KAAAkC,WAAAhF,EAAA8C,KAAA7C,MACA6C,KAAAyE,aAAA,EACAzE,KAAA0E,gBAAA,EACA1E,KAAA2E,aAAA,EACA3E,KAAA4E,cAAA,EACA5E,KAAA6E,iBAAA,EACA7E,KAAA8E,aAAA,EACA9E,KAAA+E,WAAAlI,EAAAwH,GAGArE,KAAAgF,KAAApD,EAAAoD,KAAAhF,MACAA,KAAAiF,MAAArD,EAAAqD,MAAAjF,MACAA,KAAAkF,KAAAtD,EAAAsD,KAAAlF,KAAAA,KAAAmF,cAAAnF,OAGAA,KAAAoF,cAAApF,KAAA1F,WAAA0F,KAAAqF,sBACArF,KAAAsF,YAAAtF,KAAAuF,UACAvF,KAAAwF,YAAAxF,KAAAhF,UAGAgF,KAAAyF,aACAzF,KAAA0F,gBAEA,KAAA,GAAAC,KAAAlJ,GAEA,GAAAkJ,IAAA/D,GAAAgE,UAAA,CAKA,GAAAC,GAAAjE,EAAAgE,UAAAD,EAEA,IAAAE,EAAAzM,oBAAA0M,IAAA,CAKA,GAAAC,GAAAtJ,EAAAkJ,EAEA,KAAA,GAAAxI,KAAA4I,GACA,CACA,GAAAC,GAAAD,EAAA5I,GACA8I,EAAA,GAAAJ,EAEAI,GAAA3D,KAAAtC,KAAA7C,EAAA6I,GAEAC,EAAAC,MAEAlG,KAAA+E,WAAAhH,KAAAZ,GAGA6C,KAAAyF,UAAAtI,GAAA8I,EACAjG,KAAA0F,cAAA3H,KAAAZ,MC5FA,QAAA9D,GAAA8M,GAEAnG,KAAAoG,IAAAD,ECMA,QAAA3B,KAMAxE,KAAAqG,UAMArG,KAAAsG,QAMAtG,KAAAuG,WCfA,QAAAC,GAAAC,EAAAC,GAEA1G,KAAAyG,WAAAA,EACAzG,KAAA0G,KAAAA,ECfA,QAAAC,GAAA3E,EAAA4E,GAEA5G,KAAA6G,MAAA7E,EAAA4E,GCFA,QAAAE,GAAA9E,EAAA4E,GAEA5G,KAAA6G,MAAA7E,EAAA4E,GCFA,QAAAG,GAAA/E,EAAA4E,GAEA5G,KAAA6G,MAAA7E,EAAA4E,GCFA,QAAAI,GAAAhF,EAAA4E,GAEA5G,KAAA6G,MAAA7E,EAAA4E,GCFA,QAAAK,GAAAjF,EAAA4E,GAEA5G,KAAA6G,MAAA7E,EAAA4E,GCFA,QAAAM,GAAAlF,EAAA4E,GAEA5G,KAAA6G,MAAA7E,EAAA4E,GCFA,QAAAO,GAAAnF,EAAA4E,GAEA5G,KAAA6G,MAAA7E,EAAA4E,GCFA,QAAAQ,GAAApF,EAAA4E,GAEA5G,KAAA6G,MAAA7E,EAAA4E,GCFA,QAAAS,IAAArF,EAAA4E,GAEA5G,KAAA6G,MAAA7E,EAAA4E,GCDA,QAAAd,OCDA,QAAAwB,MAEAtH,KAAA0G,KAAA,YCFA,QAAAa,MAEAvH,KAAA0G,KAAA,UCFA,QAAAc,MAEAxH,KAAA0G,KAAA,iBCFA,QAAAe,MAEAzH,KAAA0G,KAAA,SpB4BA9E,EAAAQ,QAEAG,YAAA,cACAF,QAAA,UACAqF,OAAA,SACAC,QAAA,WAGA/F,EAAAC,SAEAD,EAAAkB,IAAA,SAAA3F,EAAA0C,EAAAC,GAaA,QAAA8H,KAEA,GAAAC,GAAAjG,EAAAC,MAAA1E,EAEA0K,KAEAhI,EAAA7G,KAAA8O,EAAAD,GAEAjG,EAAAlB,IAAAkB,EAAAQ,OAAAG,YAAAqF,IAnBA,GAAAC,GAAAjG,EAAAC,MAAA1E,GACA2K,EAAAhI,GAAApH,CA0BA,OAxBAI,GAAA+G,KAEAgI,EAEAhI,EAAA7G,KAAA8O,EAAAD,GAgBAjG,EAAA7B,GAAA6B,EAAAQ,OAAAG,YAAAqF,IAIAC,GAGAtI,EAAAqC,GqBxEAA,EAAA7B,GAAA6B,EAAAQ,OAAAC,QAAA,SAAAL,EAAAmE,EAAA1J,GAEAuF,EAAA+F,IAAA,WAEA,MAAA5B,GAAA6B,eCJApG,EAAA7B,GAAA6B,EAAAQ,OAAAC,QAAA,SAAAL,EAAAmE,EAAA1J,GAEAuF,EAAAiG,KAAA,SAAAC,GAEA,MAAA/B,GAAAgC,cAAAD,MCJAtG,EAAA7B,GAAA6B,EAAAQ,OAAAC,QAAA,SAAAL,EAAAmE,EAAA1J,GAEAuF,EAAAoG,OAAA,SAAA5K,GAEA,IAAAxD,EAAAwD,GACA,CACA,GAAAwE,GAAAmE,EAAAkC,aAIA,OAFArG,GAAAsG,QAEAtG,EAGA,GAAAqC,GAAA/G,EAAAE,EAAA2I,EAAA9B,QACArC,EAAAmE,EAAAkC,YAAAhE,GACAD,EAAApC,EAAAuG,OACA9C,IAEAU,GAAA5B,OAAAiE,IAAApE,EAAApC,GACAmE,EAAA9E,QAAAU,EAAAK,OAAAqG,YAAAzG,GAAA,IACAmE,EAAAuC,SAEA,KAAA,GAAAjO,GAAA,EAAAA,EAAA0L,EAAAT,cAAA/K,OAAAF,IACA,CACA,GAAAkO,GAAAxC,EAAAT,cAAAjL,EAEAkO,KAAAnL,KAEAiI,EAAAkD,GAAAnL,EAAAmL,IAMA,MAFA3G,GAAAsG,MAAA7C,GAEAzD,KtBlCAJ,EAAA7B,GAAA6B,EAAAQ,OAAAC,QAAA,SAAAL,EAAAmE,EAAA1J,GAEA,GAAAzC,EAAAyC,EAAAmM,SAEA,IAAA,GAAAjJ,KAAAlD,GAAAmM,QACA,CACA,GAAA/F,GAAApG,EAAAmM,QAAAjJ,EAEAgD,GAAAX,EAAA5I,UAAAuG,EAAAkD,MCRAjB,EAAA7B,GAAA6B,EAAAQ,OAAAC,QAAA,SAAAL,EAAAmE,EAAA1J,GAEA,GAAAmD,GAAAnD,EAAAmD,MAEA,IAAA5F,EAAA4F,GACA,CACA,GAAAiJ,MACAC,KAEA1F,EAAApB,EAAA5I,UAAAgK,KAEApB,GAAA5I,UAAAgK,MAAA,WAEAA,EAAAnK,MAAA+G,KAAAqD,WAEAY,EAAAjE,KAAA6I,GAGA,KAAA,GAAA9E,KAAAnE,GACA,CACA,GAAAC,GAAAD,EAAAmE,GACAgF,EAAA7L,EAAA6G,GAEAiF,EAAAjH,EAAAK,OAAA2G,GACAE,EAAA5P,EAAA+I,OAAA2G,EAEAC,IAEAtF,EAAAsF,EAAAnJ,GAAA,EAAAiJ,GAGAG,GAEAvF,EAAAuF,EAAApJ,GAAA,EAAAgJ,GAIA5E,EAAAkC,EAAA2C,MsBrCAlH,EAAA7B,GAAA6B,EAAAQ,OAAAC,QAAA,SAAAL,EAAAmE,EAAA1J,GAEAuF,EAAAkH,MAAA,SAAAhB,GAEA,GAAA9D,GAAA+B,EAAAgD,kBAAAjB,GACAkB,EAAAjD,EAAAkD,SAAAjF,EAcA,OAZAgF,KAEAA,EAAAjD,EAAAmD,mBAAAlF,GAEApK,EAAAkO,IAEAkB,EAAAG,KAAArB,IAIAkB,EAAAI,WAEAJ,KCnBAxH,EAAA7B,GAAA6B,EAAAQ,OAAAC,QAAA,SAAAL,EAAAmE,EAAA1J,GAEAzC,EAAAyC,EAAAgN,UAEA1N,EAAAU,EAAAgN,QAAAzH,EAAA5I,aCHAwI,EAAAY,MAAA,SAAAnC,EAAAqJ,KAKA9H,EAAAa,QAEAC,SAAA,EAEAiH,KAAA,EACAC,aAAA,GAEAC,cAAA,EACAC,cAAA,EACAC,cAAA,EACAC,YAAA,EACAC,oBAAA,EACAC,kBAAA,EACAC,mBAAA,EACAC,mBAAA,GAEAC,WAAA,EACAC,oBAAA,GACAC,kBAAA,GACAC,iBAAA,GAEAC,cAAA,GACAC,gBAAA,GAEAC,YAAA,GACAC,aAAA,GACAC,cAAA,GACAC,iBAAA,GACAC,WAAA,GACAC,aAAA,GACAC,YAAA,GACAC,YAAA,GACAC,aAAA,GAEAC,kBAAA,GAEAC,WAAA,GACAC,iBAAA,GACAC,mBAAA,GACAC,mBAAA,GAEAC,oBAAA,GACAC,oBAAA,GAEAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,cAAA,GACAC,cAAA,GACAC,mBAAA,GAEAN,aAAA,GACAO,mBAAA,GACAC,qBAAA,GACAC,kBAAA,GACAC,qBAAA,GAEAC,sBAAA,GAEAC,kBAAA,IACAC,UAAA,IACAC,gBAAA,IACAC,WAAA,IACAC,iBAAA,IAEAC,OAAA,GACAC,QAAA,GAEAC,eAAA,GAEAC,YAAA,GACAC,oBAAA,GACAC,kBAAA,GACAC,sBAAA,GACAC,eAAA,GACAC,mBAAA,GACAC,iBAAA,GACAC,eAAA,GACAC,kBAAA,GACAC,iBAAA,GACAC,kBAAA,GACAC,cAAA,GAEAC,eAAA,GACAC,uBAAA,GACAC,qBAAA,GACAC,yBAAA,GACAC,kBAAA,GACAC,sBAAA,GACAC,oBAAA,GACAC,qBAAA,GACAC,oBAAA,GACAC,qBAAA,GACAC,iBAAA,GAEAC,aAAA,GACAC,qBAAA,GACAC,mBAAA,GACAC,gBAAA,GACAC,uBAAA,GACAC,eAAA,GACAC,aAAA,GACAC,YAAA,GACAC,kBAAA,GACAC,wBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,iBAAA,GAEAC,iBAAA,GACAC,yBAAA,GACAC,uBAAA,GACAC,8BAAA,GACAC,oBAAA,GACAC,2BAAA,GACAC,mBAAA,GACAC,iBAAA,GACAC,gBAAA,GACAC,sBAAA,GACAC,4BAAA,GACAC,sBAAA,GACAC,sBAAA,IACAC,sBAAA,IACAC,qBAAA,IACAC,qBAAA,IACAC,wBAAA,ICnIAzO,EAAAoD,KAAA,SAAAlD,GAGA,OAIAiG,IAAA,SAAAuI,EAAAC,GAEAD,OAKAxN,IAAA,SAAAd,EAAAsO,EAAAC,GAEAA,EAAA,KAAA,KAKAnI,OAAA,SAAApG,EAAAwO,EAAAF,EAAAC,GAEAD,OAKAG,OAAA,SAAAzO,EAAAwO,EAAAF,EAAAC,GAEAD,OAKAI,OAAA,SAAA1O,EAAAsO,EAAAC,GAEAD,SC/BA1O,EAAAqD,MAAA,SAAAnD,GAEA,OAkBA0G,IAAA,SAAApE,EAAAuM,EAAAL,EAAAC,GAEAD,EAAAlM,EAAAuM,IAIA7N,IAAA,SAAAsB,EAAAkM,EAAAC,GAEAA,EAAAnM,EAAA,SAiBAsM,OAAA,SAAAtM,EAAAkM,EAAAC,GAEAD,EAAAlM,EAAAuM,SAYA5I,IAAA,SAAAuI,EAAAC,GAEAD,YCvDA1O,EAAAsD,KAAA,SAAApD,EAAA8O,GAEA,MAAA,UAAAC,MCfAjP,EAAAkP,OAAAC,OAAAC,UAAAC,UAAA,EAEArP,EAAAsP,cAAA,EAGAtP,EAAAuP,UAAA,WAEAvP,EAAAkP,QAAA,EACAlP,EAAAY,MAAAZ,EAAAa,OAAAoK,QACAjL,EAAAP,QAAAO,EAAAQ,OAAAsF,SAIA9F,EAAAwP,WAAA,WAEAxP,EAAAkP,QAAA,EACAlP,EAAAY,MAAAZ,EAAAa,OAAAqK,SACAlL,EAAAP,QAAAO,EAAAQ,OAAAuF,UAKA/F,EAAAyP,sBAAA,WAEAN,OAAAO,kBAEAP,OAAAO,iBAAA1P,EAAAQ,OAAAsF,OAAA9F,EAAAuP,WAAA,GACAJ,OAAAO,iBAAA1P,EAAAQ,OAAAuF,QAAA/F,EAAAwP,YAAA,KAIAG,SAAAC,KAAAC,SAAA7P,EAAAuP,UACAI,SAAAC,KAAAE,UAAA9P,EAAAwP,aAKAxP,EAAA+P,mBAAA,WAEA,GAAAb,GAAAC,OAAAC,UAAAC,MAEArP,GAAAsP,eAEAJ,GAAA,GAGAA,KAAA,GAAAlP,EAAAkP,UAAA,EAEAlP,EAAAuP,YAGAL,KAAA,GAAAlP,EAAAkP,UAAA,GAEAlP,EAAAwP,c3B2CArP,EAAAK,QAEAwP,OAAA,UACAC,WAAA,cACAC,UAAA,aACAC,QAAA,UACAtJ,WAAA,cACAuJ,aAAA,gBACAC,aAAA,gBACAC,MAAA,kCAGAnQ,EAAAoQ,MAEAC,KAAA,OACAC,OAAA,UAGAzQ,EAAA0Q,OAEAC,KAAA,OACAC,QAAA,UACAC,IAAA,OAGA1Q,EAAAoC,UAEAhH,KAAAxE,EACAuJ,UAAA,KACAkC,IAAA,KACAsO,aAAA,IACArO,UACA3H,YACApC,WAAA,KACA+K,qBAAA,KACAE,SAAA,KACAoN,eAAA,EACAC,YAAA,EACAC,aAAA,EACAhR,MAAAD,EAAA0Q,MAAAG,IACAK,UAAA,EACAC,aAAA,EACAC,OAAA,SAAAC,GAAA,MAAAA,IACAC,OAAA,SAAAC,GAAA,MAAAA,IACAnY,SAAA,SAAAgH,GAAA,MAAAA,GAAAuG,SAGAxG,EAAA3I,WAIAga,MAAA,SAAAvT,EAAAC,EAAAuT,GAaA,QAAAC,KAEAnN,EAAAzF,IAAAqB,EAAAK,OAAA8P,MAAAqB,GAGA,QAAAA,KAEAF,GAEAC,MAEAE,GAAAH,KAEAxT,EAAA7G,KAAA8O,EAAA3B,MAAA,GAEAmN,IAEAE,GAAA,GA5BA,GAAArN,GAAAnG,KACA8H,EAAAhI,GAAAqG,EACAqN,GAAA,CAiCA,OA/BArN,GAAA1B,aAEA5E,EAAA7G,KAAA8O,EAAA3B,GACAqN,GAAA,GAyBArN,EAAApG,GAAAgC,EAAAK,OAAA8P,MAAAqB,GAGAC,GAIAC,UAAA,SAAAvL,EAAArI,EAAAC,EAAA4T,GAMA,QAAAC,KAEA,GAAAC,GAAAzN,EAAA0N,WAAA3L,EAAAwL,EAQA,OANAE,MAAA,GAAAlW,IAEAA,GAAA,EACAmC,EAAA7G,KAAA8O,EAAA8L,IAGA,OAAAA,GAAA,GAAA,EAdA,GAAAzN,GAAAnG,KACA8H,EAAAhI,GAAAqG,EACAzI,GAAA,CAeAiW,MAEAxN,EAAAiN,MAAAO,EAAAxN,GAAA,IAiBA0N,WAAA,SAAA3L,EAAAwL,GAEA,GAAAvN,GAAAnG,KACA8T,EAAA3N,EAAAvB,eAAAuB,EAAAyM,UAEA,KAAAzY,EAAA+N,GAEA,MAAA4L,GAAA,MAAA,CAGA5a,GAAAgP,KAEAA,EAAA,GAAAA,GAGA,IAAA9D,GAAA+B,EAAAgD,kBAAAjB,EAEA,IAAAA,YAAA/B,GAAAhE,MAIA,MAFAgE,GAAA4N,aAAA7L,GAEAA,CAEA,IAAA/B,EAAA5B,OAAAyP,IAAA5P,GACA,CACA,GAAApC,GAAAmE,EAAA5B,OAAAzB,IAAAsB,EAcA,OAZApK,GAAAkO,KAEAwL,EAEAvN,EAAAgC,cAAAD,EAAA9D,EAAApC,GAIAA,EAAAuH,KAAArB,IAIAlG,EAEA,MAAAhI,GAAAkO,GAEAwL,EAEAvN,EAAAgC,cAAAD,GAIA/B,EAAAkC,YAAAlC,EAAA+M,OAAAhL,IAGA4L,EAEA,MAGA,GAIAG,UAAA,SAAAjS,GAEA,GAAA3F,GAAA2D,KAAAoE,GAEA,IAAAtK,EAAAuC,GAEA,IAAA,GAAA5B,GAAA,EAAAA,EAAA4B,EAAA1B,OAAAF,UAEAuH,GAAA3F,EAAA5B,eAKAuH,GAAA3F,IAKA6X,SAAA,SAAAlS,EAAAqC,GAEA,GAAAD,GAAApE,KAAAmU,UAAAnS,EAAAqC,EAOA,OALAvK,GAAAsK,KAEAA,EAAAA,EAAAgQ,KAAApU,KAAA0S,eAGAtO,GAIA+P,UAAA,SAAAnS,EAAAqC,GAEA,GAAAD,GAAA,IAEA,IAAAtK,EAAAuK,GACA,CACAD,IAEA,KAAA,GAAA3J,GAAA,EAAAA,EAAA4J,EAAA1J,OAAAF,IAEA2J,EAAArG,KAAAiE,EAAAqC,EAAA5J,SAKA2J,GAAApC,EAAAqC,GAEAD,IAEAA,EAAApC,EAAAqC,GAAAnJ,IAIA,OAAAkJ,IAIA+E,kBAAA,SAAAjB,GAEA,MAAAA,aAAAlI,MAAAmC,MAEA+F,EAAAK,OAEAzO,EAAAoO,GAEAlI,KAAAqU,kBAAAnM,GAEAlO,EAAAkO,GAEAlI,KAAAkU,SAAAhM,EAAAlI,KAAAoE,KAGA8D,GAIAmM,kBAAA,SAAAha,GAEA,MAAAA,GAAA+Z,KAAApU,KAAA0S,eAIA4B,OAAA,SAAAtS,GAEA,MAAAhC,MAAAkU,SAAAlS,EAAAhC,KAAAoE,MAIAmQ,QAAA,SAAAvS,GAEA,MAAAhC,MAAAmU,UAAAnS,EAAAhC,KAAAoE,MAGAkF,mBAAA,SAAAlF,GAEA,GAAA+B,GAAAnG,KAEAxC,IAEA,IAAA1D,EAAAqM,EAAA/B,KACA,CACA9K,EAAA8K,KAEAA,EAAAA,EAAAlK,MAAAiM,EAAAuM,cAGA,KAAA,GAAAjY,GAAA,EAAAA,EAAA0L,EAAA/B,IAAAzJ,OAAAF,IAEA+C,EAAA2I,EAAA/B,IAAA3J,IAAA2J,EAAA3J,OAKA+C,GAAA2I,EAAA/B,KAAAA,CAGA,OAAA+B,GAAAkC,YAAA7K,IAIAgX,UAAA,SAAAxS,EAAAqC,EAAAoQ,GAEA,GAAA3a,EAAAuK,GACA,CACA,IAAA,GAAA5J,GAAA,EAAAA,EAAA4J,EAAA1J,OAAAF,IAEA,IAAAga,EAAAzS,EAAAqC,EAAA5J,KAEA,OAAA,CAIA,QAAA,EAIA,MAAAga,GAAAzS,EAAAqC,KAKAqE,QAAA,WAEA1I,KAAA0U,OACA1U,KAAAqB,QAAAU,EAAAK,OAAA2P,UAMAzM,YAAA,SAAAC,GAEAzM,EAAAyM,GAEAvF,KAAA2U,iBAAApP,EAEAjM,EAAAiM,GAEAvF,KAAA2U,iBAAA,SAAAvY,EAAAsC,GAEA,GAAAkW,GAAA5a,EAAAoC,IAAAmJ,IAAAnJ,GAAAA,EAAAmJ,GAAA5M,EACAkc,EAAA7a,EAAA0E,IAAA6G,IAAA7G,GAAAA,EAAA6G,GAAA5M,CAEA,OAAAic,KAAAjc,GAAAkc,IAAAlc,GAAA,EAAAqG,EAAA4V,EAAAC,IAKA7U,KAAA2U,iBAAA,SAAAvY,EAAAsC,GAEA,OAAA,IAOA0G,cAAA,SAAA9K,EAAA2E,GAEAe,KAAA8U,mBAAAzV,EAAA/E,EAAA2E,IAGAuG,YAAA,SAAAxK,GAEAlC,EAAAkC,GAEAgF,KAAAhF,SAAAA,EAEA1B,EAAA0B,GAEAgF,KAAAhF,SAAA,SAAAgH,GAEA,MAAA7H,GAAA6H,GAAAA,EAAAhH,GAAAgH,GAKAhC,KAAAhF,SAAA,SAAAgH,GAEA,MAAAA,GAAAuG,SAMAmM,KAAA,WAEA1U,KAAA+U,YAEA/U,KAAAuE,OAAAmQ,KAAA1U,KAAA8U,qBAKAC,SAAA,WAEA,MAAA/U,MAAAuE,OAAAwQ,SAAA/U,KAAA8U,qBAKA3M,cAAA,SAAAqI,EAAApM,EAAApC,GAEA,GAAAmE,GAAAnG,KACAoE,EAAAA,GAAA+B,EAAAmO,OAAA9D,GACAxO,EAAAA,GAAAmE,EAAA5B,OAAAzB,IAAAsB,GACA4Q,EAAA7O,EAAA+M,OAAArW,EAAA2T,GAEA,IAAAxO,EACA,CACA,GAAAiT,GAAAjV,KAAA2U,iBAAA3S,EAAAwO,EAEA,IAAAyE,KAAA,GAAAA,EAAA,EAIA,MAFArT,GAAAY,MAAAZ,EAAAa,OAAA2I,kBAAAjF,EAAAnE,EAAAwO,GAEAxO,EAIA,GAAAA,GAAAA,EAAAkT,OACA,CACA,GAAAC,IAAAhP,EAAA5B,OAAAyP,IAAA5P,EAEA+Q,IAEAhP,EAAA5B,OAAAiE,IAAApE,EAAApC,EAGA,IAAAwB,GAAAxB,EAAAoT,SAAA,GACAC,KACAC,GAAA,EACA5M,KACA6M,EAAA9W,EAAAuD,EAAAkT,QACAzP,EAAAU,EAAAV,SAEA,KAAA,GAAAvJ,KAAAsU,GAEA,GAAA,MAAAtU,EAAAe,OAAA,GAKA,GAAAf,IAAAuJ,GAEAzD,EAAAuH,KAAArN,EAAAsU,EAAAtU,IAAA,OAFA,CAOA,GAAAsZ,GAAAhS,EAAAtH,GACAuZ,EAAAzT,EAAAkT,OAAAhZ,EAEAqZ,IAAA7Z,EAAA8Z,EAAAC,IAEAzT,EAAA9F,GAAA8Y,EAAA9Y,GACAwM,EAAAxM,GAAAsU,EAAAtU,GAEA8F,EAAA0T,SAEA1T,EAAA0T,OAAAxZ,GAAAsU,EAAAtU,MAKAmZ,EAAAnZ,GAAAsU,EAAAtU,GACAoZ,GAAA,GAGAtT,EAAAkT,OAAAhZ,GAAAW,EAAA2T,EAAAtU,IAGAoZ,EAEAtT,EAAAL,SAAAtI,EAAA+I,OAAAuT,eAAAnF,EAAA6E,IAIArT,EAAAL,SAAAtI,EAAA+I,OAAAwT,YAAApF,EAAA9H,IAGA1G,EAAAL,SAAAtI,EAAA+I,OAAAyT,cAAArF,IAEAxO,EAAA8T,cAAA1O,GAEA+N,GAEAhP,EAAA9E,QAAAU,EAAAK,OAAAqG,YAAAzG,GAAA,QAKAA,GAAAmE,EAAAkC,YAAA2M,GAAA,GAEAhT,EAAA+T,QAAA1c,EAAA2c,OAAAC,OAEA9P,EAAAtE,QAAAD,EAAA0Q,MAAAG,KAEAzQ,EAAA0T,OAAA1T,EAAAoT,SAAA,GACApT,EAAA0T,OAAAK,QAAA/T,EAAA+T,QACA/T,EAAAkT,OAAAlT,EAAA0T,OAAAR,OAAAlT,EAAAoT,SAAA,GAEApT,EAAA8T,cAAA1O,IAIApF,EAAAkT,OAAAlT,EAAAoT,SAAA,GAGAjP,EAAA5B,OAAAyP,IAAA5P,KAEA+B,EAAA5B,OAAAiE,IAAApE,EAAApC,GACAmE,EAAA9E,QAAAU,EAAAK,OAAAqG,YAAAzG,GAAA,IAIA,OAAAA,IAGAkU,0BAAA,SAAAlU,EAAAoC,GAEA,GAAA+B,GAAAnG,IAEA,OAAAgC,GAEAA,EAAAmU,qBAEAnU,GAAAkT,OAEA/O,EAAA8N,UAAAjS,GAEAA,EAAAL,SAAAtI,EAAA+I,OAAAgU,SAEA,IAGAjQ,EAAA5B,OAAAmM,OAAAtM,GACA+B,EAAA9E,QAAAU,EAAAK,OAAA6P,cAAAjQ,IAEAA,EAAAL,SAAAtI,EAAA+I,OAAAiU,iBAEAzU,EAAAY,MAAAZ,EAAAa,OAAAsH,cAAA5D,EAAAnE,IAEA,IAGA,GAGAsU,wBAAA,SAAAtU,EAAAoC,GAEA,GAAA+B,GAAAnG,IAEA,OAAAgC,GAGAA,EAAAmU,qBAGAnU,GAAAkT,aACAlT,GAAA0T,OAAAR,OAEA/O,EAAA8N,UAAAjS,GACAmE,EAAA8N,UAAAjS,EAAA0T,QAEA1T,EAAAL,SAAAtI,EAAA+I,OAAAgU,QAEApU,EAAA8T,cAAA1O,IAEA,IAGApF,EAAA8T,cAAA7O,GAEAd,EAAA5B,OAAAmM,OAAAtM,GACA+B,EAAA9E,QAAAU,EAAAK,OAAA6P,cAAAjQ,IAEAA,EAAAL,SAAAtI,EAAA+I,OAAAiU,iBAEAzU,EAAAY,MAAAZ,EAAAa,OAAAsH,cAAA5D,EAAAnE,IAgBA,IAZAmE,EAAAlB,MAAAyL,OAAAtM,EAAA,SAAAmS,GAEAA,GAEA3U,EAAAY,MAAAZ,EAAAa,OAAAsH,cAAA5D,EAAAoQ,MAKA,IAOAC,kBAAA,SAAApS,GAEA,GAAA+B,GAAAnG,KACAgC,EAAAmE,EAAA5B,OAAAzB,IAAAsB,EAEA,OAAA+B,GAAAtE,QAAAD,EAAA0Q,MAAAG,IAEAtM,EAAAmQ,wBAAAtU,EAAAoC,GAIA+B,EAAA+P,0BAAAlU,EAAAoC,IAMA9B,KAAA,WA0BA,QAAAmU,GAAAC,EAAApQ,GAEA1E,EAAAY,MAAAZ,EAAAa,OAAA4H,WAAAlE,EAAAuQ,GAEAvQ,EAAA5B,OAAAsC,OAEA,KAAA,GAAApM,GAAA,EAAAA,EAAAic,EAAA/b,OAAAF,IACA,CACA,GAAA+V,GAAAkG,EAAAjc,GACA2J,EAAAkC,EAAA7L,GACAua,EAAA7O,EAAA+M,OAAArW,EAAA2T,GAAA,IACAxO,EAAAmE,EAAAkC,YAAA2M,GAAA,EAEAhT,GAAA0T,OAAAlF,EAEAA,EAAAmG,cAEA/U,EAAAY,MAAAZ,EAAAa,OAAA6H,oBAAAnE,EAAAnE,GAEAA,EAAA8T,cAAA5O,KAIAsJ,EAAAuF,UAAA1c,EAAA2c,OAAAY,aAEAhV,EAAAY,MAAAZ,EAAAa,OAAA8H,kBAAApE,EAAAnE,GAEAA,EAAA8T,cAAAzO,MAIAzF,EAAAY,MAAAZ,EAAAa,OAAA+H,iBAAArE,EAAAnE,GAEAA,EAAA0T,OAAAR,OAAAlT,EAAAkT,QAIA9Q,IAAApC,EAAAuG,OAEApC,EAAA5B,OAAAiE,IAAApE,EAAApC,GAIAmE,EAAAlB,MAAAyL,OAAAtM,IAKA+B,EAAA1B,aAAA,EACA0B,EAAAxB,aAAA,EAEAwB,EAAA9E,QAAAU,EAAAK,OAAA0P,WAAA3L,IAEAA,EAAAuC,UAEAvC,EAAAyM,YAEAzM,EAAA0Q,UAIA,QAAAC,KAEA3Q,EAAA1B,aAAA,EAEA0B,EAAAyM,WAEAzM,EAAA0Q,UAIA1Q,EAAA9E,QAAAU,EAAAK,OAAAwP,QAAAzL,IA/FA,GAAAA,GAAAnG,IAOA,OALAmG,GAAAyM,YAAAzM,EAAA0M,aAEAjR,EAAA1B,MAAA,SAAAiG,EAAA4Q,SAAA5Q,GAGAA,EAAAtE,QAAAD,EAAA0Q,MAAAC,UAEApM,EAAAyM,WAEAzM,EAAA0Q,WAIA1Q,EAAA1B,aAAA,EACA0B,EAAA9E,QAAAU,EAAAK,OAAAwP,QAAAzL,UAMAA,GAAAlB,MAAA8C,IAAA0O,EAAAK,IA8EAC,SAAA,WAEA/W,KAAA8E,aAAA,EAEA,IAAA9E,KAAA6E,kBAEA7E,KAAAgX,gBAIAA,aAAA,WAEA,GAAA7Q,GAAAnG,IAEAmG,GAAA0M,aAAA1M,EAAAvB,cAEAuB,EAAArB,cAEAqB,EAAArB,aAAA,EAEAlD,EAAAY,MAAAZ,EAAAa,OAAAmH,aAAAzD,GAEAA,EAAA0Q,YAMAA,QAAA,WAMA,QAAAI,GAAA1S,GAIA,IAAA,GAFA2S,MAEAzc,EAAA,EAAAA,EAAA8J,EAAA5J,OAAAF,IACA,CACA,GAAAuH,GAAAmE,EAAAgC,cAAA5D,EAAA9J,GAEA,IAAAuH,EACA,CACA,GAAAoC,GAAApC,EAAAuG,MAEA2O,GAAA9S,GAAApC,GAMA,IAAA,GAFAsE,GAAAH,EAAA5B,OAAA+B,KAEA7L,EAAA,EAAAA,EAAA6L,EAAA3L,OAAAF,IACA,CACA,GAAA4B,GAAAiK,EAAA7L,EAEA,MAAA4B,IAAA6a,IACA,CACA,GAAA7Y,GAAA8H,EAAA5B,OAAAzB,IAAAzG,EAEAgC,GAAA6W,SAEAtT,EAAAY,MAAAZ,EAAAa,OAAA0H,mBAAAhE,EAAA9J,GAEA8J,EAAAqQ,kBAAAna,KAKA8J,EAAA1B,aAAA,EACA0B,EAAAvB,cAAA,EAEAuB,EAAA9E,QAAAU,EAAAK,OAAAyP,YAAA1L,IAEAA,EAAAuC,UAEA9G,EAAAY,MAAAZ,EAAAa,OAAAuH,YAAA7D,EAAA5B,GAGA,QAAA4S,GAAA5S,EAAA6S,GAEA,IAAAA,GAEAxV,EAAA+P,qBAEA/P,EAAAkP,SAEA3K,EAAAzB,gBAAA,EAEA9C,EAAA3B,KAAA,SAAAkG,EAAAkR,gBAAAlR,IAGAvE,EAAAY,MAAAZ,EAAAa,OAAAwH,oBAAA9D,KAIAvE,EAAAY,MAAAZ,EAAAa,OAAAyH,kBAAA/D,EAAAiR,GAEAjR,EAAA1B,aAAA,EACA0B,EAAA9E,QAAAU,EAAAK,OAAAwP,QAAAzL,KArEA,GAAAA,GAAAnG,IAEAmG,GAAAnB,KAAA+C,IAAAkP,EAAAE,IAyEAE,gBAAA,WAEA,GAAAlR,GAAAnG,IAEA4B,GAAAY,MAAAZ,EAAAa,OAAA2H,mBAAAjE,GAEAA,EAAAzB,iBAEAyB,EAAAzB,gBAAA,EAEAyB,EAAA0Q,YAKA7O,UAAA,WAEA,MAAAhI,MAAAuE,OAAA8B,QAIAgD,SAAA,SAAAjF,GAOA,MALAtK,GAAAsK,KAEAA,EAAApE,KAAAqU,kBAAAjQ,IAGApE,KAAAuE,OAAAzB,IAAAsB,IAIAe,cAAA,SAAAgB,GAEA,MAAA,UAAA0K,GAEA,GAAAzM,GAAAyM,EAAAzM,IACAoM,EAAAK,EAAA7O,KAEA,QAAA6O,EAAAyG,IAEA,IAAAvV,GAAAoQ,KAAAC,KAEAjM,EAAAgC,cAAAqI,EAAApM,GACA+B,EAAAuC,UAEA9G,EAAAY,MAAAZ,EAAAa,OAAAgI,cAAAtE,EAAA0K,EAAA7O,MAAAoC,EACA,MAEA,KAAArC,GAAAoQ,KAAAE,OAEAlM,EAAAqQ,kBAAApS,IAEA+B,EAAAuC,UAGA9G,EAAAY,MAAAZ,EAAAa,OAAAiI,gBAAAvE,EAAA/B,MAOAiE,YAAA,SAAA4K,EAAAS,GAEA,MAAA,IAAA1T,MAAAmC,MAAA8Q,EAAAS,IAIAxN,KAAA,SAAAlE,EAAA4E,GAEA,GAAAT,GAAAnG,IAGA,OAAAgC,GAAA2U,iBAEA/U,GAAAY,MAAAZ,EAAAa,OAAA0I,aAAAhF,EAAAnE,IAMAhC,KAAA+T,aAAA/R,OAEAA,GAAA8T,cAAA3O,EAAAP,KAGAmN,aAAA,SAAA/R,EAAA0R,GAEA,GAAAvN,GAAAnG,KACAoE,EAAApC,EAAAuG,MAEApC,GAAA5B,OAAAyP,IAAA5P,IAUA+B,EAAA9E,QAAAU,EAAAK,OAAA4P,cAAAhQ,EAAA0R,IAEA1R,EAAAL,SAAAtI,EAAA+I,OAAAmV,iBAVApR,EAAA5B,OAAAiE,IAAApE,EAAApC,GACAmE,EAAA9E,QAAAU,EAAAK,OAAAqG,YAAAzG,EAAA0R,IACAvN,EAAAuC,UAEA1G,EAAAL,SAAAtI,EAAA+I,OAAAoV,iBAWA9G,OAAA,SAAA1O,EAAA4E,GAEA,GAAAT,GAAAnG,IAGAA,MAAAyX,iBAAAzV,GAGAA,EAAA+T,UAAA1c,EAAA2c,OAAAY,aAEAhV,EAAAY,MAAAZ,EAAAa,OAAAyJ,mBAAA/F,EAAAnE,GAGAA,EAAA+T,QAAA1c,EAAA2c,OAAA0B,cAEA1V,EAAA8T,cAAA9O,IAGAyQ,iBAAA,SAAAzV,GAEA,GAAAmE,GAAAnG,KACAoE,EAAApC,EAAAuG,MAEApC,GAAA5B,OAAAyP,IAAA5P,KAEA+B,EAAA5B,OAAAmM,OAAAtM,GACA+B,EAAA9E,QAAAU,EAAAK,OAAA6P,cAAAjQ,IACAmE,EAAAuC,UAEA1G,EAAAL,SAAAtI,EAAA+I,OAAAuV,WAIAC,aAAA,SAAA5V,EAAA4E,GAEA5E,EAAA8T,cAAAnP,EAAAC,KAKArH,EAAAwC,EAAA3I,WC7hCAC,EAAA+I,QAEAyV,QAAA,UACAC,MAAA,QACAC,QAAA,WACAC,SAAA,YACAC,UAAA,aACAC,WAAA,cACAvC,cAAA,iBACAC,WAAA,cACA7D,QAAA,UACAqE,OAAA,SACA+B,OAAA,SACAX,cAAA,gBACAD,cAAA,gBACAa,UAAA,aACAC,eAAA,kBACAV,QAAA,UACA9B,aAAA,gBACAyC,aAAA,gBACAjC,gBAAA,wBACAkC,kBAAA,sBACA9U,QAAA,iEAGApK,EAAA2c,QAEAC,OAAA,EACAW,YAAA,EACAc,cAAA,EACAC,QAAA,GAGAte,EAAAD,WAGAgK,MAAA,SAAA5F,EAAAkW,GAgBA,GAdA1T,KAAA+V,QAAA1c,EAAA2c,OAAAC,OACAjW,KAAAwY,WAAA,KACAxY,KAAAyY,cAEA/E,EAEA1T,KAAAuJ,KAAA/L,EAAA,OAAAkW,GAIA1T,KAAA0Y,OAAAlb,GAIAwC,KAAAoG,IAAAuM,cACA,CACA,GAAAgG,GAAA3Y,KAAAoG,IAAAX,SAEA,KAAA,GAAAtI,KAAAwb,GAEA3Y,KAAA4Y,aAAAzb,EAAAuW,KAKAgF,OAAA,SAAAlb,GAEA,GAAAqb,GAAA7Y,KAAAoG,IAAA1J,SACA2H,EAAArE,KAAAoG,IAAA/B,OACAoB,EAAAzF,KAAAoG,IAAAX,SAEA,IAAAzL,EAAA6e,GACA,CACA,IAAA,GAAApe,GAAA,EAAAA,EAAA4J,EAAA1J,OAAAF,IACA,CACA,GAAAyB,GAAAmI,EAAA5J,GACAkC,EAAAkc,EAAA3c,GACA4c,EAAAzb,EAAAV,EAEAqD,MAAA9D,GAAA4c,EAGA,IAAA,GAAA5c,KAAAuJ,GAEA,GAAAvJ,IAAA2c,GACA,CACA,GAAAlc,GAAAkc,EAAA3c,GACA4c,EAAAzb,EAAAV,GACAsJ,EAAAjG,KAAA4Y,aAAA1c,EAEA+J,GAAAlD,IAAA/C,KAAA8Y,QAMA,KAAA,GAAAre,GAAA,EAAAA,EAAA4J,EAAA1J,OAAAF,IACA,CACA,GAAAyB,GAAAmI,EAAA5J,EAEAuF,MAAA9D,GAAAvD,EAIAqH,KAAAuJ,KAAA/L,IAGA+L,KAAA,SAAA/L,EAAAub,EAAArF,GAEA,GAAA1Z,EAAAwD,GAEA,IAAA,GAAAtB,KAAAsB,GAEAwC,KAAAuJ,KAAArN,EAAAsB,EAAAtB,GAAAwX,OAGA,IAAApa,EAAAkE,GACA,CACA,GAAAyI,GAAAjG,KAAA4Y,aAAApb,EAAAkW,EAEAzN,GAEAA,EAAAlD,IAAA/C,KAAA+Y,EAAArF,GAIA1T,KAAAxC,GAAAub,EAIA5e,EAAAqD,IAEAwC,KAAA2B,SAAAtI,EAAA+I,OAAA+V,QAAA3a,EAAAub,KAIAC,KAAA,SAAAxb,EAAAC,GAEA,GAAA3D,EAAA0D,GAEA,MAAAF,GAAA0C,KAAAxC,EAAAC,EAEA,IAAAzD,EAAAwD,GACA,CACA,IAAA,GAAAG,KAAAH,GAEAA,EAAAG,GAAAF,EAAAZ,EAAAmD,KAAArC,IAAAqC,KAAArC,EAGA,OAAAH,GAEA,GAAAlE,EAAAkE,GACA,CACA,GAAAyI,GAAAjG,KAAA4Y,aAAApb,EAEA,IAAAyI,EACA,CACA,GAAAI,GAAAJ,EAAAnD,IAAA9C,KAEA,OAAAvC,GAAAZ,EAAAwJ,GAAAA,EAIA,MAAA5I,GAAAZ,EAAAmD,KAAAxC,IAAAwC,KAAAxC,KAKAyb,QAAA,SAAA/c,EAAAgd,GAEA,GAAAjT,GAAAjG,KAAA4Y,aAAA1c,EAEA+J,IAEAA,EAAAiT,OAAAlZ,KAAAkZ,IAIAC,UAAA,SAAAjd,EAAAkd,GAEA,GAAAnT,GAAAjG,KAAA4Y,aAAA1c,EAEA+J,IAEAA,EAAAoT,SAAArZ,KAAAoZ,IAIAE,WAAA,SAAApd,EAAAqd,GAEA,GAAAtT,GAAAjG,KAAA4Y,aAAA1c,EAEA,OAAA+J,IAAAA,EAAAuT,UAAAxZ,KAAAuZ,IAGAX,aAAA,SAAA1c,EAAAwX,GAEA,GAAAiF,GAAA3Y,KAAAoG,IAAAX,SAEA,IAAAvJ,IAAAyc,GACA,CACA,GAAA1S,GAAA0S,EAAAzc,EAOA,OALAA,KAAA8D,MAAAyY,YAEAxS,EAAAwT,KAAAzZ,KAAA0T,GAGAzN,EAGA,OAAA,GAGAqC,MAAA,SAAAoR,EAAAC,EAAA/S,GAEA,GAAAA,GACA,IAAAvD,UAAA1I,OAAAiM,KAAA,EACA,IAAAvD,UAAA1I,QAAAX,EAAA0f,GAAAC,KAAA,EACA,IAAAtW,UAAA1I,OAAA+e,KAAA,GAAA,CAEA1Z,MAAAuJ,KAAAmQ,EAAAC,GAEA3Z,KAAA2B,SAAAtI,EAAA+I,OAAA2V,SAAA/X,OAEAA,KAAAoG,IAAAF,KAAAlG,KAAA4G,GAEA5G,KAAA2B,SAAAtI,EAAA+I,OAAA4V,UAAAhY,QAGA4Z,QAAA,SAAAhT,GAEA5G,KAAA6Z,YAEA7Z,KAAA2B,SAAAtI,EAAA+I,OAAA6V,WAAAjY,OAEAA,KAAAoG,IAAAsK,OAAA1Q,KAAA4G,GAEA5G,KAAA2B,SAAAtI,EAAA+I,OAAA8V,YAAAlY,SAIAwJ,SAAA,SAAA5C,GAEA5G,KAAAoG,IAAAwR,aAAA5X,KAAA4G,IAGAiT,QAAA,WAEA,OAAA7Z,KAAA2W,cAAA3W,KAAAoG,IAAA7B,OAAAyP,IAAAhU,KAAAuI,SAGAuN,cAAA,SAAAgE,EAAAlT,GAEA,GAAAmT,GAAA,GAAAD,GAAA9Z,KAAA4G,EAEA5G,MAAAwY,WAOAxY,KAAAwY,WAAAwB,MAAAD,IALA/Z,KAAAwY,WAAAuB,EACA/Z,KAAAwY,WAAAyB,YAQA7E,QAAA,SAAA8E,GAEA,GAAA1J,GAAAxQ,KAAAoG,IAAA4M,OAAA1V,EAAA0C,KAAAA,KAAAoG,IAAA/B,QAAA,IAEAsU,EAAA3Y,KAAAoG,IAAAX,UACAA,EAAAzF,KAAAyY,UAEA,KAAA,GAAAtb,KAAAsI,GAEAkT,EAAAxb,GAAA6V,OAAAhT,KAAAwQ,EAAA0J,EAGA,OAAA1J,IAGA2J,QAAA,WAEAna,KAAA2B,SAAAtI,EAAA+I,OAAA+V,SAGA5P,KAAA,WAEA,MAAAvI,MAAAoG,IAAAkO,OAAAtU,OAGAoa,MAAA,WAEA,MAAApa,MAAAoG,IAAAmO,QAAAvU,OAGAqa,QAAA,WAEA,MAAAra,MAAAoG,IAAAoO,UAAAxU,KAAAA,KAAAoG,IAAAhC,IAAAjK,IAGAwc,WAAA,WAEA,MAAA3W,MAAA+V,SAAA1c,EAAA2c,OAAA0B,eAGA4C,SAAA,WAEA,QAAAta,KAAAkV,QAGAqF,gBAAA,WAEA,QAAAva,KAAA0V,QAGA8E,OAAA,WAEA,QAAAxa,KAAAkV,QAAAlV,KAAA0V,SAGA+E,YAAA,SAAAC,GAEA,GAAAC,GAAA3a,KAAAkV,OACA1E,EAAAkK,GAAA1a,KAAAoV,SAAA,GACA/Q,EAAArE,KAAAoG,IAAArB,UAEA,OAAA4V,GAAAxc,EAAAqS,EAAAmK,EAAAtW,EAAA3I,GAAA8U,GAGA2F,YAAA,WAEA,IAAAnW,KAAAkV,OAEA,OAAA,CAGA,IAAA1E,GAAAxQ,KAAAoV,SAAA,GACAuF,EAAA3a,KAAAkV,MAEA,KAAA,GAAAhZ,KAAAsU,GACA,CACA,GAAAgF,GAAAhF,EAAAtU,GACAuZ,EAAAkF,EAAAze,EAEA,KAAAR,EAAA8Z,EAAAC,GAEA,OAAA,EAIA,OAAA,GAGAza,SAAA,WAEA,MAAAgF,MAAAoG,IAAAlE,UAAA,IAAA0Y,KAAAC,UAAA7a,KAAAoV,aAKA7V,EAAAlG,EAAAD,WAAA,GCvWAoL,EAAApL,WASAyN,MAAA,WAMA,MAJA7G,MAAAqG,OAAA1L,OAAA,EACAqF,KAAAsG,KAAA3L,OAAA,EACAqF,KAAAuG,WAEAvG,MAWAwI,IAAA,SAAApE,EAAA2U,GAaA,MAXA3U,KAAApE,MAAAuG,QAEAvG,KAAAqG,OAAArG,KAAAuG,QAAAnC,IAAA2U,GAIA/Y,KAAAuG,QAAAnC,GAAApE,KAAAqG,OAAA1L,OACAqF,KAAAqG,OAAAtI,KAAAgb,GACA/Y,KAAAsG,KAAAvI,KAAAqG,IAGApE,MASA8C,IAAA,SAAAsB,GAEA,MAAApE,MAAAqG,OAAArG,KAAAuG,QAAAnC,KAUAsM,OAAA,SAAAtM,GAEA,GAAA0W,GAAA9a,KAAAuG,QAAAnC,EAOA,OALA7K,GAAAuhB,IAEA9a,KAAA+a,SAAAD,GAGA9a,MAUA+a,SAAA,SAAAD,GAEA,GAAA1W,GAAApE,KAAAsG,KAAAwU,GACAE,EAAAhb,KAAAqG,OAAA4U,MACAC,EAAAlb,KAAAsG,KAAA2U,KAWA,OATAH,GAAA9a,KAAAqG,OAAA1L,SAEAqF,KAAAqG,OAAAyU,GAAAE,EACAhb,KAAAsG,KAAAwU,GAAAI,EACAlb,KAAAuG,QAAA2U,GAAAJ,SAGA9a,MAAAuG,QAAAnC,GAEApE,MASAgU,IAAA,SAAA5P,GAEA,MAAAA,KAAApE,MAAAuG,SAQA4U,KAAA,WAEA,MAAAnb,MAAAqG,OAAA1L,QAGAygB,SAAA,SAAAxX,EAAAyX,GAOA,IAAA,GALA1X,GAAA0X,GAAA,GAAA7W,GACA9J,EAAAsF,KAAAmb,OACA9U,EAAArG,KAAAqG,OACAC,EAAAtG,KAAAsG,KAEA7L,EAAA,EAAAC,EAAAD,EAAAA,IACA,CACA,GAAA6gB,GAAAjV,EAAA5L,GACA4B,EAAAiK,EAAA7L,EAEAmJ,GAAAoQ,IAAA3X,IAEAsH,EAAA6E,IAAAnM,EAAAif,GAIA,MAAA3X,IAWA4X,OAAA,SAAA1b,EAAAwb,GAOA,IAAA,GALA1X,GAAA0X,GAAA,GAAA7W,GACA9J,EAAAsF,KAAAmb,OACA9U,EAAArG,KAAAqG,OACAC,EAAAtG,KAAAsG,KAEA7L,EAAA,EAAAC,EAAAD,EAAAA,IACA,CACA,GAAA6gB,GAAAjV,EAAA5L,GACA4B,EAAAiK,EAAA7L,EAEAoF,GAAAyb,EAAAjf,IAEAsH,EAAA6E,IAAAnM,EAAAif,GAIA,MAAA3X,IASA6X,QAAA,WAKA,IAAA,GAHAC,GAAAzb,KAAAmb,OAAA,EACAO,EAAA5gB,KAAA6gB,KAAAF,EAAA,GAEAhhB,EAAA,EAAAihB,EAAAjhB,EAAAA,IAEA0B,EAAA6D,KAAAqG,OAAA5L,EAAAghB,EAAAhhB,GACA0B,EAAA6D,KAAAsG,KAAA7L,EAAAghB,EAAAhhB,EAKA,OAFAuF,MAAA4b,eAEA5b,MAQA+U,SAAA,SAAAza,GAEA,IAAAA,EAEA,OAAA,CAKA,KAAA,GAFAiK,GAAAvE,KAAAqG,OAEA5L,EAAA,EAAAC,EAAA6J,EAAA5J,OAAA,EAAAD,EAAAD,EAAAA,IAEA,GAAAH,EAAAiK,EAAA9J,GAAA8J,EAAA9J,EAAA,IAAA,EAEA,OAAA,CAIA,QAAA,GAeAia,KAAA,SAAApa,GAKA,QAAAuhB,GAAAC,EAAAC,GAMA,IAJA,GAAAC,GAAApY,EAAAyC,OAAAvL,KAAAmhB,OAAAF,EAAAD,GAAA,IACArhB,EAAAqhB,EACAI,EAAAH,EAEAG,GAAAzhB,GACA,CACA,KAAAH,EAAAsJ,EAAAyC,OAAA5L,GAAAuhB,GAAA,GAAAvhB,GACA,MAAAH,EAAAsJ,EAAAyC,OAAA6V,GAAAF,GAAA,GAAAE,GAEAA,IAAAzhB,IACA0B,EAAAyH,EAAAyC,OAAA5L,EAAAyhB,GACA/f,EAAAyH,EAAA0C,KAAA7L,EAAAyhB,GACAzhB,IACAyhB,KAIA,MAAAzhB,GAIA,QAAA0hB,GAAAL,EAAAC,GAEA,GAAAjB,GAAAe,EAAAC,EAAAC,EAEAjB,GAAA,EAAAgB,GAEAK,EAAAL,EAAAhB,EAAA,GAGAiB,EAAAjB,GAEAqB,EAAArB,EAAAiB,GArCA,GAAAnY,GAAA5D,KAyCA+b,EAAA/b,KAAAmb,OAAA,CAUA,OAPAY,GAAA,IAEAI,EAAA,EAAAJ,GAEA/b,KAAA4b,gBAGA5b,MASA4b,aAAA,WAEA5b,KAAAuG,UAEA,KAAA,GAAA9L,GAAA,EAAAyJ,EAAAlE,KAAAsG,KAAA3L,OAAAuJ,EAAAzJ,EAAAA,IAEAuF,KAAAuG,QAAAvG,KAAAsG,KAAA7L,IAAAA,CAGA,OAAAuF,QCtTAwG,EAAApN,WAEAyN,MAAA,SAAA7E,EAAA4E,GAEA5G,KAAAgC,MAAAA,EACAhC,KAAA4G,QAAAA,KAAA,EACA5G,KAAAmG,GAAAnE,EAAAoE,IACApG,KAAAoc,KAAA,KACApc,KAAAqc,UAAA,GAGArC,MAAA,SAAAD,GAEA/Z,KAAAoc,OAAArC,EAAAtT,WAEAzG,KAAAoc,KAAApC,MAAAD,GAIA/Z,KAAAoc,KAAArC,GAIAE,QAAA,WAEAja,KAAAmG,GAAAtB,mBAEA7E,KAAAsc,IAAAtc,KAAAmG,GAAAnG,KAAAgC,QAGAsa,IAAA,SAAAnW,EAAAnE,GAEA,KAAA,sCAGAua,OAAA,WAmBA,MAjBAvc,MAAAqc,WAEArc,KAAAqc,UAAA,GAEArc,KAAAgC,MAAAwW,WAAAxY,KAAAoc,OAEApc,KAAAoc,KAAAnC,UAGAja,KAAAmG,GAAAtB,mBAEA,IAAA7E,KAAAmG,GAAAtB,kBAEA7E,KAAAmG,GAAA6Q,gBAIAhX,MAGAwc,QAAA,SAAA1C,EAAAlT,GAEA,GAAA6V,IAAAzc,KAAAoc,IAOA,OALAK,KAEAzc,KAAAoc,KAAA,GAAAtC,GAAA9Z,KAAAgC,MAAA4E,IAGA6V,GAGAC,WAAA,SAAA5C,EAAAlT,GAEA,GAAA0Q,GAAA,GAAAwC,GAAA9Z,KAAAgC,MAAA4E,EAEA0Q,GAAA8E,KAAApc,KAAAoc,KACApc,KAAAoc,KAAA9E,GAGAhH,QAAA,WAEA,GAAAgH,GAAAtX,IAEA,OAAA,YAEAsX,EAAAqF,UAAA1jB,MAAAqe,EAAAjU,WACAiU,EAAAiF,WAIAI,UAAA,aAKApM,QAAA,WAEA,GAAA+G,GAAAtX,IAEA,OAAA,YAEAsX,EAAAsF,UAAA3jB,MAAAqe,EAAAjU,WACAiU,EAAAiF,WAIAK,UAAA,cCrHAjhB,EAAA,GAAA6K,IAAA,EAAA,iBAAAG,GAGA2V,IAAA,SAAAnW,EAAAnE,GAEAA,EAAA2U,aAEA3W,KAAAuc,SAEApW,EAAAtE,QAAAD,EAAA0Q,MAAAG,IAEAtM,EAAAlB,MAAAnC,IAAAd,EAAAuG,OAAAvI,KAAAsQ,UAAAtQ,KAAAuQ,WAEAvQ,KAAA4G,UAEAhF,EAAAY,MAAAZ,EAAAa,OAAA+J,kBAAAxK,GAEAhC,KAAA0c,WAAA5V,GACA9G,KAAAuc,WAIAI,UAAA,SAAAvY,EAAAoM,GAEA,GAAAxO,GAAAhC,KAAAgC,KAEAhI,GAAAwW,IAEAxO,EAAAuH,KAAAiH,GAGA5O,EAAAY,MAAAZ,EAAAa,OAAAgK,UAAAzK,EAAAwO,GAEAxQ,KAAA4G,UAAA5E,EAAA2U,cAEA3W,KAAA0c,WAAA5V,IAIA8V,UAAA,SAAAtb,GAEA,GAAAU,GAAAhC,KAAAgC,KAEAJ,GAAAY,MAAAZ,EAAAa,OAAAgK,UAAAzK,EAAAV,GAEAtB,KAAA4G,UAAA5E,EAAA2U,cAEA3W,KAAA0c,WAAA5V,MC/CAnL,EAAA,GAAA6K,IAAA,EAAA,kBAAAM,GAGAwV,IAAA,SAAAnW,EAAAnE,GAEAA,EAAA2U,aAEA3W,KAAAuc,SAIApW,EAAAnB,KAAAlC,IAAAd,EAAAhC,KAAAsQ,UAAAtQ,KAAAuQ,YAIAoM,UAAA,SAAA1J,GAEA,GAAAjR,GAAAhC,KAAAgC,KAEAhI,GAAAiZ,IAEAjR,EAAAuH,KAAA0J,EAAA,QAAA,GAGArR,EAAAY,MAAAZ,EAAAa,OAAAkK,WAAA3K,EAAAiR,IAGA2J,UAAA,SAAA3J,EAAAmE,GAEA,GAAApV,GAAAhC,KAAAgC,KAEAJ,GAAAY,MAAAZ,EAAAa,OAAAmK,iBAAA5K,EAAAiR,EAAAmE,MC/BAzb,EAAA,GAAA6K,IAAA,EAAA,oBAAAO,GAGAuV,IAAA,SAAAnW,EAAAnE,GAEAmE,EAAAtE,OAAAD,EAAA0Q,MAAAC,KAEAvS,KAAAuc,SAIApW,EAAAlB,MAAAyL,OAAA1O,EAAAuG,OAAAvI,KAAAsQ,UAAAtQ,KAAAuQ,cCXA5U,EAAA,GAAA6K,IAAA,EAAA,oBAAAQ,GAGAsV,IAAA,SAAAnW,EAAAnE,GAEAA,EAAA+T,QAAA1c,EAAA2c,OAAA0B,cAEAvR,EAAAtE,QAAAD,EAAA0Q,MAAAC,MAAAvQ,EAAA0T,OAOA1T,EAAAkT,QAEAlT,EAAA0T,OAAAK,QAAA/T,EAAA+T,QAEA5P,EAAAlB,MAAAuD,IAAAxG,EAAAuG,OAAAvG,EAAA0T,OAAA1V,KAAAsQ,UAAAtQ,KAAAuQ,aAIA3O,EAAAY,MAAAZ,EAAAa,OAAA6J,qBAAAtK,GAEAmE,EAAAlB,MAAAyL,OAAA1O,EAAAuG,OAAAvI,KAAAsQ,UAAAtQ,KAAAuQ,aAfA3O,EAAAY,MAAAZ,EAAAa,OAAA4J,kBAAArK,GAEAhC,KAAA0c,WAAAxV,GACAlH,KAAAuc,WAgBAI,UAAA,SAAAvY,EAAAoM,EAAAqM,GAEA,GAAA7a,GAAAhC,KAAAgC,KAEAJ,GAAAY,MAAAZ,EAAAa,OAAAmJ,aAAA5J,GAEAA,EAAAkT,QAAAlV,KAAA4G,SAEA5E,EAAA8T,cAAA5O,IAIA0V,UAAA,SAAAtb,GAEA,GAAAU,GAAAhC,KAAAgC,KAEAJ,GAAAY,MAAAZ,EAAAa,OAAA0J,mBAAAnK,EAAAV,GAEAU,EAAAkT,QAAAlV,KAAA4G,SAEA5E,EAAA8T,cAAA5O,MChDAvL,EAAA,GAAA6K,IAAA,EAAA,kBAAAS,GAGAqV,IAAA,SAAAnW,EAAAnE,GAEA,GAAAoC,GAAApC,EAAAuG,MAEAvG,GAAA+T,QAAA1c,EAAA2c,OAAA0B,cAEAvR,EAAAsR,iBAAAzV,GAEAmE,EAAAtE,QAAAD,EAAA0Q,MAAAC,MAEAvS,KAAA8c,eACA9c,KAAAuc,UAIApW,EAAAlB,MAAAyL,OAAAtM,EAAApE,KAAAsQ,UAAAtQ,KAAAuQ,YAIAoM,UAAA,WAEA3c,KAAA8c,gBAGAF,UAAA,WAEA5c,KAAA8c,gBAGAA,aAAA,WAEA,GAAA9a,GAAAhC,KAAAgC,KAEAA,GAAA+T,QAAA1c,EAAA2c,OAAA2B,cAEA3V,GAAA0T,aACA1T,GAAA+a,cACA/a,GAAAgb,eACAhb,GAAAkT,UCzCAvZ,EAAA,GAAA6K,IAAA,EAAA,qBAAAU,GAGAoV,IAAA,SAAAnW,EAAAnE,GAEAA,EAAA+T,QAAA1c,EAAA2c,OAAA0B,cAEAvR,EAAAnB,KAAA0L,OAAA1O,EAAAhC,KAAAsQ,UAAAtQ,KAAAuQ,YAGAoM,UAAA,SAAA1J,GAEAjT,KAAA8c,gBAGAF,UAAA,SAAA3J,EAAAmE,GAEA,GAAAhT,GAAApE,KAAAoE,IACApC,EAAAhC,KAAAgC,KAEA,OAAAoV,GAAA,MAAAA,GAEAxV,EAAAY,MAAAZ,EAAAa,OAAAoJ,eAAA7J,EAAAoC,GAEApE,KAAA8c,gBAEA,IAAA1F,EAEAxV,EAAAY,MAAAZ,EAAAa,OAAAqJ,aAAA9J,EAAAoV,EAAAhT,IAKAxC,EAAA+P,qBAGA/P,EAAAkP,QAEAlP,EAAA3B,KAAA,SAAAD,KAAAid,aAAAjd,MAGA4B,EAAAY,MAAAZ,EAAAa,OAAAsJ,eAAA/J,KAIA8a,aAAA,WAEA,GAAA3W,GAAAnG,KAAAmG,GACA/B,EAAApE,KAAAoE,IACApC,EAAAhC,KAAAgC,KAEAJ,GAAAY,MAAAZ,EAAAa,OAAAwJ,cAAAjK,EAAAoC,GAGApC,EAAA+T,QAAA1c,EAAA2c,OAAA2B,QAGA3X,KAAA0c,WAAAzV,GAGArF,EAAAY,MAAAZ,EAAAa,OAAAkJ,eAAA3J,EAAAoC,GAEA+B,EAAAjB,MAEAoS,GAAAvV,EAAAoQ,KAAAE,OACAjO,IAAAA,KAIA6Y,aAAA,WAEA,GAAAjb,GAAAhC,KAAAgC,KAEAJ,GAAAY,MAAAZ,EAAAa,OAAAuJ,cAAAhK,GAEAA,EAAA8T,cAAA5O,MC3EAvL,EAAA,GAAA6K,IAAA,EAAA,kBAAAW,GAGAmV,IAAA,SAAAnW,EAAAnE,GAEA,GAAAA,EAAA2U,aAEA/U,EAAAY,MAAAZ,EAAAa,OAAA8I,mBAAAvJ,GAEAhC,KAAAuc,aAEA,IAAApW,EAAAtE,QAAAD,EAAA0Q,MAAAC,KAEAvS,KAAA4G,SAEA5G,KAAAwc,QAAAnV,KAEArH,KAAAkd,WAAA/W,EAAAnE,GAIAhC,KAAAuc,aAGA,CACA,GAAAnY,GAAApC,EAAAuG,OACA4U,EAAAnb,EAAAoT,SAAA,EAEApV,MAAAkd,WAAA/W,EAAAnE,GAEAA,EAAA0T,OAEA3Z,EAAAohB,EAAAnb,EAAA0T,SAIA1T,EAAA0T,OAAAyH,EAEAnb,EAAAkT,SAEAlT,EAAA0T,OAAAR,OAAAlT,EAAAkT,SAIAlT,EAAA0T,OAAAK,QAAA/T,EAAA+T,QACA/T,EAAA0T,OAAAqH,QAAA/a,EAAA+a,QACA/a,EAAA0T,OAAAsH,SAAAhb,EAAAgb,SAEA7W,EAAAlB,MAAAuD,IAAApE,EAAApC,EAAA0T,OAAA1V,KAAAsQ,UAAAtQ,KAAAuQ,aAIA2M,WAAA,SAAA/W,EAAAnE,GAEA,GAAAob,GAAApb,EAAAoT,SAAA,GACAiI,EAAArb,EAAAyY,YAAA2C,GAEAE,EAAAnX,EAAA2M,SAAAsK,EAAAC,EACAE,EAAApX,EAAA4M,YAAAqK,EAAAC,CAEArb,GAAA+T,QAAA1c,EAAA2c,OAAAY,YACA5U,EAAA+a,QAAAO,EACAtb,EAAAgb,SAAAO,GAGAC,WAAA,SAAAxb,GAEAA,EAAA+T,QAAA1c,EAAA2c,OAAAC,OAEAjU,EAAA0T,OAAAK,QAAA/T,EAAA+T,cAEA/T,GAAA0T,OAAAqH,cACA/a,GAAA0T,OAAAsH,SAEAhd,KAAA0c,WAAAtV,IAGAuV,UAAA,SAAAvY,EAAAoM,EAAAqM,GAEA,GAAA7a,GAAAhC,KAAAgC,KAEAJ,GAAAY,MAAAZ,EAAAa,OAAA4I,WAAArJ,GAEAhC,KAAA4G,QAEA5G,KAAAwc,QAAAnV,IAIArH,KAAAwd,WAAAxb,IAIA4a,UAAA,SAAAtb,GAEA,GAAAU,GAAAhC,KAAAgC,KAEAJ,GAAAY,MAAAZ,EAAAa,OAAA6I,iBAAAtJ,EAAAV,GAEAtB,KAAA4G,QAEA5G,KAAAwc,QAAAnV,IAIArH,KAAAwd,WAAAxb,MCzGArG,EAAA,GAAA6K,IAAA,EAAA,gBAAAY,GAGAkV,IAAA,SAAAnW,EAAAnE,GAEA,GAAAoC,GAAApC,EAAAuG,OACA4U,EAAAnb,EAAA0T,MAEAvP,GAAAtE,QAAAD,EAAA0Q,MAAAG,KAAArO,GAAA+Y,EAEAhX,EAAAlB,MAAAuD,IAAApE,EAAA+Y,EAAAnd,KAAAsQ,UAAAtQ,KAAAuQ,WAIAvQ,KAAAuc,YCdA5gB,EAAA,GAAA6K,IAAA,EAAA,mBAAAa,IAGAiV,IAAA,SAAAnW,EAAAnE,GAEAA,EAAA2U,cAEA/U,EAAAY,MAAAZ,EAAAa,OAAAgJ,oBAAAzJ,GAEAhC,KAAAuc,UAEA9d,EAAAuD,EAAA+a,UAEA/c,KAAAyd,WAAAzb,GAAA,GAEAhC,KAAAuc,WAIAva,EAAA+T,QAAA1c,EAAA2c,OAAAY,YAEA5U,EAAAkT,OAEA/O,EAAAnB,KAAAyL,OAAAzO,EAAAA,EAAA+a,QAAA/c,KAAAsQ,UAAAtQ,KAAAuQ,WAIApK,EAAAnB,KAAAoD,OAAApG,EAAAA,EAAA+a,QAAA/c,KAAAsQ,UAAAtQ,KAAAuQ,aAKAoM,UAAA,SAAA1J,GAEA,GAAAjR,GAAAhC,KAAAgC,KAEAJ,GAAAY,MAAAZ,EAAAa,OAAAyI,YAAAlJ,GAEAhC,KAAA0d,WAAAzK,IAGA2J,UAAA,SAAA3J,EAAAmE,GAEA,GAEApV,IADAhC,KAAAmG,GACAnG,KAAAgC,MAGA,OAAAoV,GAEAxV,EAAAY,MAAAZ,EAAAa,OAAAoI,cAAA7I,EAAAiR,GAEAjT,KAAA0d,WAAAzK,IAEA,MAAAmE,GAAA,MAAAA,GAEAxV,EAAAY,MAAAZ,EAAAa,OAAAqI,iBAAA9I,GAEAhC,KAAA0c,WAAAzV,IAEA,IAAAmQ,GAEAxV,EAAAY,MAAAZ,EAAAa,OAAAsI,WAAA/I,EAAAoV,GAEApX,KAAAyd,WAAAzb,GAAA,KAKAJ,EAAA+P,qBAGA/P,EAAAkP,OAMA9Q,KAAAyd,WAAAzb,GAAA,GAJAJ,EAAA3B,KAAA,SAAAD,KAAAid,aAAAjd,MAOA4B,EAAAY,MAAAZ,EAAAa,OAAAuI,aAAAhJ,KAIAyb,WAAA,SAAAzb,EAAA2b,GAEA3b,EAAA+T,QAAA1c,EAAA2c,OAAAC,OAEAjW,KAAA4d,aAAA5b,GAEA2b,GAEA3d,KAAA0c,WAAAtV,IAIAwW,aAAA,SAAA5b,SAEAA,GAAA+a,cACA/a,GAAAgb,SAEAhb,EAAA0T,SAEA1T,EAAA0T,OAAAK,QAAA/T,EAAA+T,cAEA/T,GAAA0T,OAAAqH,cACA/a,GAAA0T,OAAAsH,WAIAU,WAAA,SAAAzK,GAEA,GAAA9M,GAAAnG,KAAAmG,GACAnE,EAAAhC,KAAAgC,MACAsb,EAAAtb,EAAA+a,QACAc,EAAA7b,EAAAgb,QAGA,OAAAhb,GAAA2U,cAEA/U,EAAAY,MAAAZ,EAAAa,OAAAgJ,oBAAAzJ,EAAAiR,GAEAjT,KAAA4d,aAAA5b,KAGAJ,EAAAY,MAAAZ,EAAAa,OAAAkI,YAAA3I,EAAAsb,GAIAtb,EAAAkT,SAEAlT,EAAAkT,OAAAlT,EAAA0T,OAAA1T,EAAA0T,OAAAR,cAGAnZ,EAAAuhB,EAAAtb,EAAAkT,QAGAzW,EAAAwU,IAEA9M,EAAAgC,cAAA8K,EAAAjR,EAAAuG,OAAAvG,GAIAJ,EAAAY,MAAAZ,EAAAa,OAAAmI,aAAA5I,EAAA6b,GAEA1X,EAAAjB,MAEAoS,GAAAvV,EAAAoQ,KAAAC,KACApQ,MAAAA,EAAAgb,SACA5Y,IAAApC,EAAAuG,SAGAvI,KAAAyd,WAAAzb,GAAA,QAEAmE,EAAAtE,QAAAD,EAAA0Q,MAAAE,QAEAxS,KAAA0c,WAAA3V,GAIA/G,KAAA0c,WAAAtV,MAIA6V,aAAA,WAEA,GAAAjb,GAAAhC,KAAAgC,KAEAA,GAAA+T,UAAA1c,EAAA2c,OAAAY,cAEA5U,EAAA8T,cAAAzO,IAEAzF,EAAAY,MAAAZ,EAAAa,OAAAwI,YAAAjJ,OC5KAJ,EAAAgE,aAEAhE,EAAAkc,OACAvL,KAAA,EACApQ,MAAA,EACA4b,IAAA,EACAC,KAAA,GAGApc,EAAAwQ,MACAG,KAAA,EACApQ,MAAA,GAGA2D,GAAA3B,UAEAnC,MAAArJ,EACAsM,MAAArD,EAAAkc,MAAAvL,KACArM,KAAAtE,EAAAwQ,KAAAG,KACA0L,MAAA,EACAte,UAAA,GAGAmG,GAAA1M;AAGA8kB,YAAA,SAAApc,EAAAqc,EAAA1hB,GAEA,MAAAqJ,IAAA3B,UAWA7B,KAAA,SAAAR,EAAAqc,EAAA1hB,GAEAF,EAAAyD,KAAAvD,EAAAuD,KAAAke,YAAApc,EAAAqc,EAAA1hB,IAEAuD,KAAA8B,SAAAA,EACA9B,KAAA7C,KAAAghB,EACAne,KAAAvD,QAAAA,EACAuD,KAAAoe,gBACApe,KAAAqe,sBACAre,KAAAyE,aAAA,EAEAzE,KAAAse,cAAA7hB,EAAA6hB,eAAA,gBACAte,KAAAue,eAAA9hB,EAAA8hB,mBACAve,KAAAwe,gBAAA/hB,EAAA8hB,cAEA,IAAAE,GAAAze,KAAAye,SAAA3c,EAAAqc,EAAA1hB,EAEAvD,GAAAuD,EAAAuF,OAMAyc,EAAAzlB,KAAAgH,KAAAvD,EAAAuF,OAJAJ,EAAAkB,IAAArG,EAAAuF,MAAAyc,EAAAze,OAYAye,SAAA,SAAA3c,EAAAqc,EAAA1hB,GAEA,MAAA,UAAAiiB,GAEA1e,KAAAgC,MAAA0c,EAEA1e,KAAAL,WAEAK,KAAAL,SAAAvF,EAAA0H,EAAAuC,OAAArE,KAAA7C,SAAA,GAGA6C,KAAAwe,eAEAxe,KAAA2e,qBAGA3e,KAAA4e,cAAA9c,EAAAqc,EAAA1hB,KAWAmiB,cAAA,SAAA9c,EAAAuC,EAAA5H,KAKAoiB,qBAAA,WAEA7e,KAAAyE,aAAA,CAKA,KAAA,GAHAqa,GAAA9e,KAAAoe,aACAW,EAAA/e,KAAAqe,mBAEA5jB,EAAA,EAAAA,EAAAqkB,EAAAnkB,OAAAF,IAEAuF,KAAAgf,WAAAF,EAAArkB,GAAAskB,EAAAtkB,GAGAqkB,GAAAnkB,OAAA,EACAokB,EAAApkB,OAAA,GAYA8e,KAAA,SAAAzX,EAAA0R,GAEA1T,KAAAyE,YAOAzE,KAAAgf,WAAAhd,EAAA0R,IALA1T,KAAAoe,aAAArgB,KAAAiE,GACAhC,KAAAqe,mBAAAtgB,KAAA2V,KAQAsL,WAAA,SAAAhd,EAAA0R,KAKA3Q,IAAA,SAAAf,EAAAkG,EAAAwL,KAKAwF,OAAA,SAAAlX,EAAAkG,KAKAmR,SAAA,SAAArX,EAAAkG,KAKAsR,UAAA,SAAAxX,EAAAkG,KAKApF,IAAA,SAAAd,KAKAgR,OAAA,SAAAhR,EAAA2B,EAAAuW,KAKA+E,aAAA,SAAA/W,GAEA,IAAApO,EAAAoO,GAEA,OAAA,CAGA,IAAAgX,GAAAlf,KAAAgC,MAAA7I,SACAgmB,EAAAD,EAAA9a,GAEA,KAAAtK,EAAAqlB,GAEA,OAAA,CAGA,IAAAA,EAAAxkB,SAAAuN,EAAAvN,OAEA,OAAA,CAGA,KAAA,GAAAF,GAAA,EAAAA,EAAAyN,EAAAvN,OAAAF,IAEA,IAAAlB,EAAA2O,EAAAzN,MAAAnB,EAAA4O,EAAAzN,IAEA,OAAA,CAIA,QAAA,GAGA2kB,YAAA,SAAA5iB,EAAA6iB,EAAA3L,GAEA,GAAA2J,IAAA,CAEA,IAAA/jB,EAAA+lB,GAEA7iB,EAAA6iB,KAEA7iB,EAAA6iB,GAAA,KACAhC,GAAA,OAKA,KAAA,GAAA5iB,GAAA,EAAAA,EAAA4kB,EAAA1kB,OAAAF,IACA,CACA,GAAA6kB,GAAAD,EAAA5kB,EAEA+B,GAAA8iB,KAEA9iB,EAAA8iB,GAAA,KACAjC,GAAA,GAUA,MALAA,KAAA3J,GAAA1T,KAAAie,OAAAzhB,EAAAge,UAEAhe,EAAA8L,QAGA+U,GAGAkC,aAAA,SAAA/iB,EAAA6iB,EAAA3V,EAAA8V,EAAA9L,GAEA,GAAA2J,IAAA,CAIA,IAFA3T,EAAAnB,OAEAjP,EAAA+lB,GACA,CACA,GAAAI,GAAAjjB,EAAA6iB,GACAK,EAAAhW,EAAA8V,EAEA9jB,GAAA+jB,EAAAC,KAEAljB,EAAA6iB,GAAAK,EACArC,GAAA,OAKA,KAAA,GAAA5iB,GAAA,EAAAA,EAAA4kB,EAAA1kB,OAAAF,IACA,CACA,GAAA6kB,GAAAD,EAAA5kB,GACAglB,EAAAjjB,EAAA8iB,GACAK,EAAAH,EAAA/kB,GACAmlB,EAAAlW,EAAAiW,EAEAjkB,GAAA+jB,EAAAG,KAEApjB,EAAA8iB,GAAAziB,EAAA+iB,GACAvC,GAAA,GAeA,MAVAA,MAEArd,KAAAie,MAAAzhB,EAAAge,UAAA9G,GAEAlX,EAAA8L,QAGA9L,EAAAmF,SAAAtI,EAAA+I,OAAAgW,WAAA5b,EAAAkN,EAAA2V,EAAAG,KAGAnC,GAGAwC,eAAA,SAAAC,EAAAC,GAEA,IAAAA,EAEA,MAAA,KAKA,KAAA,GAFAC,MAEAvlB,EAAA,EAAAA,EAAAqlB,EAAAnlB,OAAAF,IACA,CACA,GAAA8e,GAAAvZ,KAAAigB,UAAAH,EAAArlB,GAAAslB,EAEA,QAAAxG,GAEAyG,EAAAjiB,KAAAwb,GAIA,MAAAyG,IAGAC,UAAA,SAAA1G,EAAAwG,GAEA,GAAAxG,EAEA,OAAAwG,GAEA,IAAAne,GAAAwQ,KAAAjQ,MACA,MAAAoX,GAAAnE,SAAA,EAEA,KAAAxT,GAAAkc,MAAA3b,MACA,GAAAoX,EAAA7D,OAEA,MAAA6D,GAAA7D,MAIA,IAAAyH,GAAA5D,EAAAnE,SAAA,EAOA,OALAmE,GAAArE,SAEAiI,EAAAjI,OAAAqE,EAAArE,QAGAiI,CAGA,KAAAvb,GAAAkc,MAAAC,IACA,MAAAxE,GAAAhR,MAEA,KAAA3G,GAAAkc,MAAAE,KACA,MAAAzE,GAAAa,QAKA,MAAA,OAKAuE,mBAAA,WAEA,IAAA,GAAAL,KAAAte,MAAAue,eACA,CACA,GAAAphB,GAAA6C,KAAAue,eAAAD,EAEA1c,GAAAkB,IAAA3F,EAAA6C,KAAAkgB,iBAAAlgB,QAIAkgB,iBAAA,SAAA5B,GAEA,MAAA,UAAAI,GAEA1e,KAAAue,eAAAD,GAAAI,IAIAyB,iBAAA,SAAAne,GAEA,MAAAA,GAAAhC,KAAAse,gBAGA8B,yBAAA,SAAApe,GAEA,GAAAsc,GAAAte,KAAAmgB,iBAAAne,EAEA,IAAAsc,IAAAte,MAAAue,eACA,CACA,GAAAvc,GAAAhC,KAAAue,eAAAD,EAEA,OAAAtc,GAAA7I,SAGA,OAAA,GAGAknB,mBAAA,SAAAnY,GAEA,GAAAlO,EAAAkO,GACA,CACA,GAAA/B,GAAAnG,KAAAogB,yBAAAlY,EAEA,OAAA/B,GAAA0N,WAAA3L,GAGA,OAAA,GAGAuL,UAAA,SAAA+F,EAAA8G,EAAApY,EAAArI,GAEA,GAAAG,KAAAwe,cACA,CACA,GAAAxe,KAAAugB,kBAAArY,EAAArI,GAEA,OAAA,CAIAG,MAAAwgB,uBAAAF,KAOAC,kBAAA,SAAArY,EAAArI,GAEA,GAAA7F,EAAAkO,GACA,CACA,GAAA/B,GAAAnG,KAAAogB,yBAAAlY,EAEA,IAAA/B,KAAA,EAIA,MAFAA,GAAAsN,UAAAvL,EAAAuY,QAAAzgB,OAEA,EAIA,OAAA,GAGAwgB,uBAAA,SAAAxe,GAEA,IAAA,GAAAsc,KAAAte,MAAAue,eACA,CACA,GAAA7X,GAAA1G,KAAAue,eAAAD,EAEA,IAAAtc,YAAA0E,GAEA,MAAA4X,GAIA,OAAA,GAGAoC,eAAA,SAAAlH,EAAA3Z,GAEA,GAAAG,KAAAwe,cAEAxe,KAAA2gB,qBAAAnH,EAAA3Z,OAGA,CACA,GAAAqf,GAAAlf,KAAAgC,MAAA7I,QAEA+lB,GAAA9L,MAAApT,KAAA4gB,aAAApH,EAAA3Z,GAAAG,QAIA4gB,aAAA,SAAApH,EAAA3Z,GAEA,MAAA,UAAAsG,GAEA,GAAAoT,GAAApT,EAAA5B,OAAAgX,OAAA/B,EAEA3Z,GAAA7G,KAAAgH,KAAAuZ,KAIAoH,qBAAA,SAAAnH,EAAA3Z,GAEA,GAAA0Z,GAAA,GAAA/U,GACAsD,EAAA9H,KACA6gB,EAAAtiB,EAAAyB,KAAAue,gBACA/a,EAAA,CAEA,KAAA,GAAA8a,KAAAte,MAAAue,eACA,CACA,GAAA7X,GAAA1G,KAAAue,eAAAD,GACAnY,EAAAO,EAAAvN,QAEAgN,GAAAiN,MAAA,SAAAjN,GAEAA,EAAA5B,OAAAgX,OAAA/B,EAAAD,KAEA/V,IAAAqd,GAEAhhB,EAAA7G,KAAA8O,EAAAyR,QC1eA3X,EAAAgE,UAAAkb,UAAAxZ,GAEAA,GAAAnD,UAEAnC,MAAArJ,EACAsM,MAAArD,EAAAkc,MAAAvL,KACArM,KAAAtE,EAAAwQ,KAAAG,KACA0L,MAAA,EACAte,UAAA,EACAwd,MAAA,KACAvW,SAAA,GAGAjL,EAAA,GAAAmK,IAAAwB,IAGA4W,YAAA,SAAApc,EAAAqc,EAAA1hB,GAEA,MAAA6K,IAAAnD,UAGAya,cAAA,SAAA9c,EAAAqc,EAAA1hB,GAEA,GAAAyiB,GAAAlf,KAAAgC,MAAA7I,QAEA6G,MAAAmd,MAAAnd,KAAAmd,OAAA+B,EAAA/hB,KAAA,IAAA+hB,EAAA9a,IAEAxC,EAAAY,MAAAZ,EAAAa,OAAAmL,eAAA5N,MAEAA,KAAA6e,wBAGAG,WAAA,SAAAhd,EAAA0R,GAEA,GAAAqN,GAAA/gB,KACAwZ,EAAAxZ,KAAAghB,iBAAAhf,GACAkd,EAAAlf,KAAAgC,MAAA7I,SACA8nB,EAAAjf,EAAAhC,KAAA7C,MAEA8I,EAAAjE,EAAAyW,WAAAzY,KAAA7C,OAEAvB,OAAAoG,EACAif,QAAAA,EACAzH,UAAAA,EACAxX,MAAA,KACAkf,QAAA,EAEAC,UAAA,WAEAvf,EAAAY,MAAAZ,EAAAa,OAAAoL,uBAAAkT,EAAA/e,EAAAiE,GAEAjG,KAAA4G,QAEA5E,EAAA4X,QAAA5Z,KAAA4G,SAIA5G,KAAAohB,aAAAnb,IAGAob,QAAA,WAEAzf,EAAAY,MAAAZ,EAAAa,OAAAqL,qBAAAiT,EAAA/e,EAAAiE,GAEAuT,EAAAvT,EAAAjE,SAEAhC,KAAA4G,QAEA5E,EAAA4X,QAAA5Z,KAAA4G,SAIA5G,KAAAohB,aAAAnb,KAMAjE,GAAAT,IAAAlI,EAAA+I,OAAAgW,UAAApY,KAAAshB,YAAAthB,MACAgC,EAAAT,IAAAlI,EAAA+I,OAAA8V,WAAAlY,KAAAuhB,WAAAvhB,MAEAvB,EAAAwiB,IAAA/B,EAAA1K,UAAAxS,EAAAhC,KAAAmd,MAAAhjB,KAEA8mB,EAAArjB,EAAAoE,EAAAhC,KAAAmd,OAEAvb,EAAAY,MAAAZ,EAAAa,OAAAsL,yBAAA/N,KAAAgC,EAAAif,IAGAxiB,EAAAwiB,KAEArf,EAAAY,MAAAZ,EAAAa,OAAAuL,kBAAAhO,KAAAgC,EAAAif,GAEA/B,EAAAzL,UAAAwN,EAAAjhB,KAAAwhB,YAAAvb,EAAAyN,GAAA1T,KAAA0T,KAKA3Q,IAAA,SAAAf,EAAAkG,EAAAwL,GAEA,GAAAjV,EAAAyJ,GAEAlI,KAAAqZ,SAAArX,OAGA,CACA,GAAAkd,GAAAlf,KAAAgC,MAAA7I,SACAogB,EAAA2F,EAAArL,WAAA3L,EAAAwL,GACAzN,EAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEAoc,KAAAtT,EAAAuT,UAAAD,KAEAvZ,KAAAyhB,WAAAxb,GACAjG,KAAA0hB,WAAAzb,EAAAsT,EAAA7F,MAMAwF,OAAA,SAAAlX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACAogB,EAAA2F,EAAArL,WAAA3L,GACAjC,EAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEAoc,IAEAtT,EAAAjE,QAAAuX,IAEAvZ,KAAAyhB,WAAAxb,GACAjG,KAAA0hB,WAAAzb,EAAAsT,KAMAF,SAAA,SAAArX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,MACAoc,EAAA2F,EAAArL,WAAA3L,EAEAqR,IAAAtT,EAAAjE,QAAAuX,GAEAvZ,KAAAohB,aAAAnb,IAKAuT,UAAA,SAAAxX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,MACAoc,EAAA2F,EAAArL,WAAA3L,EAEA,OAAAqR,KAAAtT,EAAAjE,OAIA0f,WAAA,SAAAzb,EAAAsT,EAAA7F,GAEA1T,KAAA2hB,SAAA1b,EAAAsT,GACAvZ,KAAA4hB,iBAAA3b,EAAArK,OAAA2d,EAAA7F,GACA1T,KAAA6hB,YAAA5b,IAGAmb,aAAA,SAAAnb,GAEAjG,KAAAyhB,WAAAxb,GACAjG,KAAA8hB,gBAAA7b,EAAArK,QACAoE,KAAA6hB,YAAA5b,IAIAnD,IAAA,SAAAd,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,OAAA8I,GAAAjE,OAIAgR,OAAA,SAAAhR,EAAA2B,EAAAuW,GAEA,GAAAjU,GAAAjE,EAAAyW,WAAAzY,KAAA7C,MACA4iB,EAAA7F,EAAAla,KAAAkG,KAAAlG,KAAAiF,KAEAgB,IAAA8Z,IAEApc,EAAA3D,KAAA7C,MAAA6C,KAAAigB,UAAAha,EAAAjE,MAAA+d,KAIAwB,WAAA,SAAAvf,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA8I,KAEArE,EAAAY,MAAAZ,EAAAa,OAAA0L,qBAAAnO,KAAAgC,EAAAiE,GAEAjG,KAAAyhB,WAAAxb,GACAjG,KAAA6hB,YAAA5b,KAIAwb,WAAA,SAAAxb,GAEA,GAAAsT,GAAAtT,EAAAjE,KAEAuX,KAEA3X,EAAAY,MAAAZ,EAAAa,OAAAwL,sBAAAjO,KAAAiG,GAEAsT,EAAA7X,KAAArI,EAAA+I,OAAA0V,MAAA7R,EAAAob,SACA9H,EAAA7X,KAAArI,EAAA+I,OAAAuV,QAAA1R,EAAAkb,WAEAlb,EAAAjE,MAAA,KACAiE,EAAAib,QAAA,IAIAS,SAAA,SAAA1b,EAAAsT,GAEAA,EAAAhY,IAAAlI,EAAA+I,OAAA0V,MAAA7R,EAAAob,QAAArhB,MACAuZ,EAAAhY,IAAAlI,EAAA+I,OAAAuV,QAAA1R,EAAAkb,UAAAnhB,MAEAiG,EAAAjE,MAAAuX,EACAtT,EAAAib,QAAA,EAEAtf,EAAAY,MAAAZ,EAAAa,OAAAyL,oBAAAlO,KAAAiG,IAIAub,YAAA,SAAAvb,EAAAyN,GAEA,MAAA,UAAA6F,GAEA3X,EAAAY,MAAAZ,EAAAa,OAAA6L,iBAAAtO,KAAAiG,EAAArK,OAAAqK,EAAAsT,GAEAtT,EAAAib,UAAA,IAEA3H,GAEAvZ,KAAA2hB,SAAA1b,EAAAsT,EAAA7F,GACA1T,KAAA4hB,iBAAA3b,EAAArK,OAAA2d,EAAA7F,IAIA1T,KAAA8hB,gBAAA7b,EAAArK,OAAA8X,GAGAzN,EAAAib,QAAA,EAEAlhB,KAAA6hB,YAAA5b,MAMA+a,iBAAA,SAAAhf,GAEA,GAAAkd,GAAAlf,KAAAgC,MAAA7I,SACAgkB,EAAAnd,KAAAmd,MACA4E,EAAA7C,EAAA9a,GAEA,OAAA,UAAAmV,GAEA,MAAApe,GAAA6G,EAAAmb,EAAA5D,EAAAwI,KAKAD,gBAAA,SAAA9f,EAAA0R,GAEA,GAAAyJ,GAAAnd,KAAAmd,KAEAvb,GAAAY,MAAAZ,EAAAa,OAAA2L,oBAAApO,KAAAgC,EAAAmb,GAEAnd,KAAAof,YAAApd,EAAAmb,EAAAzJ,IAIAkO,iBAAA,SAAA5f,EAAAuX,EAAA7F,GAEA,GAAAwL,GAAAlf,KAAAgC,MAAA7I,SACAgkB,EAAAnd,KAAAmd,MACA4E,EAAA7C,EAAA9a,GAEAxC,GAAAY,MAAAZ,EAAAa,OAAA4L,qBAAArO,KAAAgC,EAAAmb,EAAA5D,EAAAwI,GAEA/hB,KAAAuf,aAAAvd,EAAAmb,EAAA5D,EAAAwI,EAAArO,IAIAmO,YAAA,SAAA5b,GAEA,GAAAjG,KAAAL,SACA,CACA,GAAAqC,GAAAiE,EAAArK,OACA2d,EAAAtT,EAAAjE,KAEAA,GAAAhC,KAAA7C,QAAAoc,IAEAvX,EAAAhC,KAAA7C,MAAAoc,EAEAvX,EAAAL,SAAAtI,EAAA+I,OAAAiW,gBAAArY,KAAAiG,OAKAqb,YAAA,SAAAtf,EAAAuX,EAAAyI,EAAAC,GAEA,GAAAjiB,KAAAmd,QAAA6E,EACA,CACA,GAAA/b,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA8I,IAAAsT,IAAAtT,EAAAjE,QAEAhC,KAAAyhB,WAAAxb,GACAjG,KAAA2hB,SAAA1b,EAAAsT,GACAvZ,KAAA6hB,YAAA5b,QChUArE,EAAAgE,UAAAsc,QAAA3a,GAEAA,GAAApD,UAEAnC,MAAArJ,EACAsM,MAAArD,EAAAkc,MAAAvL,KACArM,KAAAtE,EAAAwQ,KAAAG,KACA0L,MAAA,EACAte,UAAA,EACAoiB,QAAA,KACAznB,WAAA,KACA+K,sBAAA,EACA8c,eAAA,EACAC,aAAA,GAGAzmB,EAAA,GAAAmK,IAAAyB,IAGA2W,YAAA,SAAApc,EAAAqc,EAAA1hB,GAEA,MAAA8K,IAAApD,UAGAya,cAAA,SAAA9c,EAAAqc,EAAA1hB,GAEAuD,KAAA+hB,QAAA/hB,KAAA+hB,SAAAjgB,EAAA3E,KAAA,IAAA2E,EAAAsC,IACApE,KAAA1F,WAAA+E,EAAAW,KAAA1F,WAAA0F,KAAAqF,sBACArF,KAAAqiB,SAAAriB,KAAAsiB,iBAEA1gB,EAAAY,MAAAZ,EAAAa,OAAA8L,aAAAvO,MAEAA,KAAA6e,wBAGAG,WAAA,SAAAhd,EAAA0R,GAEA,GAAAqN,GAAA/gB,KACAkf,EAAAlf,KAAAgC,MAAA7I,SACAqgB,EAAAxZ,KAAAghB,iBAAAhf,GACAif,EAAAjf,EAAAhC,KAAA7C,MAEA8I,EAAAjE,EAAAyW,WAAAzY,KAAA7C,OAEAvB,OAAAoG,EACAwX,UAAAA,EACAyH,QAAAA,EACAnC,WACAva,OAAA,GAAAC,GACA8Y,QAAA,EACAiF,cAAA,EACAC,aAAA,EAEArB,UAAA,WAEAvf,EAAAY,MAAAZ,EAAAa,OAAA+L,qBAAAuS,EAAA/e,EAAAhC,KAAAiG,GAEA8a,EAAA0B,YAAAxc,EAAAjG,MAAA,IAGAqhB,QAAA,WAEApb,EAAAqX,SAKA1b,EAAAY,MAAAZ,EAAAa,OAAAgM,mBAAAsS,EAAA/e,EAAAhC,KAAAiG,GAEAuT,EAAAxZ,OAMA+gB,EAAArM,KAAAzO,GACA8a,EAAA2B,UAAAzc,IALA8a,EAAA0B,YAAAxc,EAAAjG,QAYAgC,GAAAuG,OACAvG,EAAAT,IAAAlI,EAAA+I,OAAA4V,SAAAhY,KAAA2iB,SAAA3iB,MACAgC,EAAAT,IAAAlI,EAAA+I,OAAA6V,UAAAjY,KAAA4iB,UAAA5iB,MAGAkf,EAAAnf,GAAAgC,EAAAK,OAAAqG,WAAAzI,KAAA6iB,iBAAA5c,GAAAjG,KAGA,IAAAuZ,GAAAtT,EAAA1B,OAAA8B,MAuBA,IArBAkT,EAAAxW,IAAA,SAAAmF,GAEA6Y,EAAAhe,IAAAf,EAAAkG,IAGAqR,EAAAL,OAAA,SAAAhR,GAEA6Y,EAAA7H,OAAAlX,EAAAkG,IAGAqR,EAAAF,SAAA,SAAAnR,GAEA6Y,EAAA1H,SAAArX,EAAAkG,IAGAqR,EAAAC,UAAA,SAAAtR,GAEA,MAAA6Y,GAAAvH,UAAAxX,EAAAkG,IAIApO,EAAAmnB,GACA,CACArf,EAAAY,MAAAZ,EAAAa,OAAAiM,gBAAA1O,KAAAgC,EAAAiE,EAAAgb,EAEA,KAAA,GAAAxmB,GAAA,EAAAA,EAAAwmB,EAAAtmB,OAAAF,IACA,CACA,GAAAyN,GAAA+Y,EAAAxmB,GACA2J,EAAA8a,EAAA/V,kBAAAjB,EAEAjC,GAAA6Y,QAAA1a,IAAA,EACA8a,EAAAzL,UAAAvL,EAAAlI,KAAAwhB,YAAAvb,GAAAjG,KAAA0T,QAKA9R,GAAAY,MAAAZ,EAAAa,OAAAkM,uBAAA3O,KAAAgC,EAAAiE,GAEAiZ,EAAA9L,MAAApT,KAAA8iB,eAAA7c,GAAAjG,KAIAA,MAAA6hB,YAAA5b,IAGA8c,KAAA,SAAA9c,EAAApG,EAAA6T,GAEAzN,EAAAsc,cAAA,EACAtc,EAAAuc,aAAA,EAEA3iB,EAAA5G,MAAA+G,MAEAiG,EAAAsc,cAAA,EACAtc,EAAAuc,aAAA,EAEAxiB,KAAA0U,KAAAzO,GACAjG,KAAA0iB,UAAAzc,EAAAyN,IAGA3Q,IAAA,SAAAf,EAAAkG,EAAAwL,GAEA,GAAAjV,EAAAyJ,GAEAlI,KAAAqZ,SAAArX,OAGA,CACA,GAAAkd,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,MACA6lB,EAAA/c,EAAA1B,OACA0e,EAAA,GAAAze,EAEA,IAAAxE,KAAAif,aAAA/W,GAEA,IAAA,GAAAzN,GAAA,EAAAA,EAAAyN,EAAAvN,OAAAF,IACA,CACA,GAAA8e,GAAA2F,EAAArL,WAAA3L,EAAAzN,GAAAiZ,EAEA6F,IAEA0J,EAAAza,IAAA+Q,EAAAhR,OAAAgR,OAKA,CACA,GAAAA,GAAA2F,EAAArL,WAAA3L,EAAAwL,EAEA6F,IAEA0J,EAAAza,IAAA+Q,EAAAhR,OAAAgR,GAIA,GAAA2J,GAAAF,EAAA5H,SAAA6H,GAAA5c,OACA8c,EAAAF,EAAA7H,SAAA4H,GAAA3c,MAEArG,MAAA+iB,KAAA9c,EAAA,WAEA,IAAA,GAAAxL,GAAA,EAAAA,EAAA0oB,EAAAxoB,OAAAF,IAEAuF,KAAAojB,SAAAnd,EAAAkd,EAAA1oB,GAAAiZ,EAGA,KAAA,GAAAjZ,GAAA,EAAAA,EAAAyoB,EAAAvoB,OAAAF,IAEAuF,KAAAyiB,YAAAxc,EAAAid,EAAAzoB,KAGAiZ,KAIAwF,OAAA,SAAAlX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,IAAA6C,KAAAif,aAAA/W,GAEAlI,KAAA+iB,KAAA9c,EAAA,WAEA,IAAA,GAAAxL,GAAA,EAAAA,EAAAyN,EAAAvN,OAAAF,IACA,CACA,GAAA8e,GAAA2F,EAAArL,WAAA3L,EAAAzN,GAEA8e,IAEAvZ,KAAAojB,SAAAnd,EAAAsT,UAKA,IAAApf,EAAA+N,GACA,CACA,GAAAqR,GAAA2F,EAAArL,WAAA3L,EAEAqR,IAEAvZ,KAAAojB,SAAAnd,EAAAsT,KAKAF,SAAA,SAAArX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,IAAA6C,KAAAif,aAAA/W,GAEAlI,KAAA+iB,KAAA9c,EAAA,WAEA,IAAA,GAAAxL,GAAA,EAAAA,EAAAyN,EAAAvN,OAAAF,IACA,CACA,GAAA8e,GAAA2F,EAAArL,WAAA3L,EAAAzN,GAEA8e,IAEAvZ,KAAAyiB,YAAAxc,EAAAsT,UAKA,IAAApf,EAAA+N,GACA,CACA,GAAAqR,GAAA2F,EAAArL,WAAA3L,EAEAqR,IAEAvZ,KAAAyiB,YAAAxc,EAAAsT,OAOA,KAAA,GAFAxR,GAAA9B,EAAA1B,OAAA8B,OAEA5L,EAAAsN,EAAApN,OAAA,EAAAF,GAAA,EAAAA,IAEAuF,KAAAyiB,YAAAxc,EAAA8B,EAAAtN,KAKA+e,UAAA,SAAAxX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,MACA6lB,EAAA/c,EAAA1B,MAEA,IAAAvE,KAAAif,aAAA/W,GACA,CACA,IAAA,GAAAzN,GAAA,EAAAA,EAAAyN,EAAAvN,OAAAF,IACA,CACA,GAAA8e,GAAA2F,EAAArL,WAAA3L,EAAAzN,GAEA,IAAA8e,IAAAyJ,EAAAhP,IAAAuF,EAAAhR,QAEA,OAAA,EAIA,MAAAL,GAAAvN,OAAA,EAEA,GAAAR,EAAA+N,GACA,CACA,GAAAqR,GAAA2F,EAAArL,WAAA3L,EAEA,OAAAqR,IAAAyJ,EAAAhP,IAAAuF,EAAAhR,QAGA,OAAA,GAGAzF,IAAA,SAAAd,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,OAAA8I,GAAA1B,OAAA8B,QAGA2M,OAAA,SAAAhR,EAAA2B,EAAAuW,GAEA,GAAAjU,GAAAjE,EAAAyW,WAAAzY,KAAA7C,MACA4iB,EAAA7F,EAAAla,KAAAkG,KAAAlG,KAAAiF,KAEAgB,IAAA8Z,IAEApc,EAAA3D,KAAA7C,MAAA6C,KAAA6f,eAAA5Z,EAAA1B,OAAA8B,OAAA0Z,KAIA4C,SAAA,SAAA3gB,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,IAAA8I,GAAAjG,KAAAoiB,YACA,CACAxgB,EAAAY,MAAAZ,EAAAa,OAAA2M,iBAAApP,KAAAgC,EAAAiE,GAEAA,EAAAqX,QAAA,EACArX,EAAAuc,aAAA,CAIA,KAAA,GAFAje,GAAA0B,EAAA1B,OAAA8B,OAEA5L,EAAA,EAAAA,EAAA8J,EAAA5J,OAAAF,IACA,CACA,GAAA8e,GAAAhV,EAAA9J,EAEA8e,GAAApD,eAEAoD,EAAAjR,MAAAtI,KAAAoiB,aAIAnc,EAAAqX,QAAA,EACArX,EAAAuc,aAAA,IAIAI,UAAA,SAAA5gB,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA8I,IAAAjG,KAAAmiB,gBAEAvgB,EAAAY,MAAAZ,EAAAa,OAAA0M,kBAAAnP,KAAAgC,EAAAiE,GAEAjG,KAAA+iB,KAAA9c,EAAA,WAIA,IAAA,GAFA1B,GAAA0B,EAAA1B,OAAA8B,OAEA5L,EAAA,EAAAA,EAAA8J,EAAA5J,OAAAF,IACA,CACA,GAAA8e,GAAAhV,EAAA9J,EAEA8e,GAAAK,QAAA5Z,KAAAmiB,oBAMAO,UAAA,SAAAzc,EAAAyN,GAEAzN,EAAAuc,aAAA9O,IAEA1T,KAAAiF,QAAArD,EAAAkc,MAAA3b,OAAAnC,KAAAkG,OAAAtE,EAAAwQ,KAAAjQ,SAEAP,EAAAY,MAAAZ,EAAAa,OAAAyM,kBAAAlP,KAAAiG,GAEAA,EAAArK,OAAA0M,UAKAua,iBAAA,SAAA5c,GAEA,MAAA,UAAAsT,EAAA7F,GAEAzN,EAAAuT,UAAAD,KAEA3X,EAAAY,MAAAZ,EAAAa,OAAAwM,kBAAAjP,KAAAiG,EAAAsT,GAEAvZ,KAAAojB,SAAAnd,EAAAsT,EAAA7F,MAKA8N,YAAA,SAAAvb,GAEA,MAAA,UAAAsT,GAEA,GAAAuF,GAAA7Y,EAAA6Y,QACA1a,EAAAmV,EAAAhR,MAEAnE,KAAA0a,KAEAld,EAAAY,MAAAZ,EAAAa,OAAAuM,wBAAAhP,KAAAiG,EAAAsT,GAEAvZ,KAAAojB,SAAAnd,EAAAsT,GAAA,SAEAuF,GAAA1a,MAKA0e,eAAA,SAAA7c,GAEA,MAAA,UAAAiZ,GAEA,GAAA3F,GAAA2F,EAAA3a,OAAAgX,OAAAtV,EAAAuT,WACAjV,EAAAgV,EAAAlT,MAEAzE,GAAAY,MAAAZ,EAAAa,OAAAsM,kBAAA/O,KAAAiG,EAAA1B,GAEAvE,KAAA+iB,KAAA9c,EAAA,WAEA,IAAA,GAAAxL,GAAA,EAAAA,EAAA8J,EAAA5J,OAAAF,IAEAuF,KAAAojB,SAAAnd,EAAA1B,EAAA9J,QAMA2oB,SAAA,SAAAnd,EAAAsT,EAAA7F,GAEA,GAAAlX,GAAAyJ,EAAA1B,OACAH,EAAAmV,EAAAhR,OACA4a,GAAA3mB,EAAAwX,IAAA5P,EAqBA,OAnBA+e,KAEAvhB,EAAAY,MAAAZ,EAAAa,OAAAqM,YAAA9O,KAAAiG,EAAAsT,GAEA/c,EAAAgM,IAAApE,EAAAmV,GAEAA,EAAAhY,IAAAlI,EAAA+I,OAAAuV,QAAA1R,EAAAkb,WACA5H,EAAAhY,IAAAlI,EAAA+I,OAAAmW,kBAAAtS,EAAAob,SAEArhB,KAAA4hB,iBAAA3b,EAAArK,OAAA2d,EAAA7F,GAEA1T,KAAA0U,KAAAzO,GAEAyN,GAEA1T,KAAA0iB,UAAAzc,IAIAkd,GAGAV,YAAA,SAAAxc,EAAAsT,EAAA8J,GAEA,GAAA7mB,GAAAyJ,EAAA1B,OACAua,EAAA7Y,EAAA6Y,QACA1a,EAAAmV,EAAAhR,MAEA/L,GAAAwX,IAAA5P,KAEAxC,EAAAY,MAAAZ,EAAAa,OAAAmM,eAAA5O,KAAAiG,EAAAsT,GAEA/c,EAAAkU,OAAAtM,GAEAmV,EAAA7X,KAAArI,EAAA+I,OAAAuV,QAAA1R,EAAAkb,WACA5H,EAAA7X,KAAArI,EAAA+I,OAAAmW,kBAAAtS,EAAAob,UAEAgC,GAAArjB,KAAAmiB,eAEA5I,EAAAK,QAAA5Z,KAAAmiB,eAGAniB,KAAA8hB,gBAAAvI,GACAvZ,KAAA0U,KAAAzO,GACAjG,KAAA0iB,UAAAzc,UAGA6Y,GAAA1a,IAGAke,eAAA,WAEA,GAAAP,GAAA/hB,KAAA+hB,QACA5C,EAAAnf,KAAAgC,MAAA7I,SAAAiL,GAEA,IAAA9K,EAAAyoB,GAEA,MAAAjoB,GAAAqlB,GAEA/kB,EAAA+kB,EAAA4C,MAAA,EAIA5C,IAAA4C,CAKA,IAAAjoB,EAAAqlB,GACA,CACA,IAAA,GAAA1kB,GAAA,EAAAA,EAAAsnB,EAAApnB,OAAAF,IAEA,GAAAL,EAAA+kB,EAAA4C,EAAAtnB,OAAA,EAEA,OAAA,CAGA,QAAA,EAIA,MAAAL,GAAA2nB,EAAA5C,MAAA,GAOAyC,iBAAA,SAAA5f,EAAAuX,EAAA7F,GAEA,GAAAqO,GAAA/hB,KAAA+hB,QACA5E,EAAAnb,EAAAoE,IAAAhC,GAEApE,MAAAuf,aAAAhG,EAAAwI,EAAA/f,EAAAmb,EAAAzJ,IAGAoO,gBAAA,SAAAvI,GAEA,GAAAvZ,KAAAqiB,SACA,CACA,GAAAN,GAAA/hB,KAAA+hB,OAEA/hB,MAAAof,YAAA7F,EAAAwI,KAIAf,iBAAA,SAAAhf,GAEA,GAAA+f,GAAA/hB,KAAA+hB,QACA5E,EAAAnb,EAAAoE,IAAAhC,GAEA,OAAA,UAAAmV,GAEA,MAAApe,GAAAoe,EAAAwI,EAAA/f,EAAAmb,KAIA0E,YAAA,SAAA5b,GAEAjG,KAAAL,WAEAsG,EAAArK,OAAAoE,KAAA7C,MAAA8I,EAAA1B,OAAA8B,SAIAqO,KAAA,SAAAzO,GAEA,GAAAsT,GAAAtT,EAAA1B,MAEA0B,GAAAsc,eAEAhJ,EAAAxE,SAAA/U,KAAA1F,cAEAsH,EAAAY,MAAAZ,EAAAa,OAAAoM,aAAA7O,KAAAiG,GAEAsT,EAAA7E,KAAA1U,KAAA1F,aAGA2L,EAAArK,OAAA+F,SAAAtI,EAAA+I,OAAAiW,gBAAArY,KAAAiG,QCtkBArE,EAAAgE,UAAA0d,eAAA9b,GAEAA,GAAArD,UAEAnC,MAAArJ,EACAsM,MAAArD,EAAAkc,MAAAvL,KACArM,KAAAtE,EAAAwQ,KAAAG,KACA0L,MAAA,EACAte,UAAA,EACA4jB,QAAA5qB,EACAwkB,MAAA,KACA4E,QAAA,KACAznB,WAAA,KACA+K,sBAAA,EACA8c,eAAA,EACAC,aAAA,EACAoB,oBAAA,GAGA7nB,EAAA,GAAAmK,IAAA0B,IAGA0W,YAAA,SAAApc,EAAAqc,EAAA1hB,GAEA,MAAA+K,IAAArD,UAGAya,cAAA,SAAA9c,EAAAqc,EAAA1hB,GAEA,GAAAyiB,GAAAlf,KAAAgC,MAAA7I,QAEA6G,MAAA+hB,QAAA/hB,KAAA+hB,SAAA7C,EAAA/hB,KAAA,IAAA+hB,EAAA9a,IACApE,KAAAmd,MAAAnd,KAAAmd,OAAArb,EAAA3E,KAAA,IAAA2E,EAAAsC,IACApE,KAAA1F,WAAA+E,EAAAW,KAAA1F,WAAA0F,KAAAqF,sBAEAnM,EAAAuD,EAAA8mB,SAMAvjB,KAAAyjB,WAAAhnB,EAAA8mB,SAJA3hB,EAAAkB,IAAArG,EAAA8mB,QAAAvjB,KAAAyjB,WAAAzjB,MAOA4B,EAAAY,MAAAZ,EAAAa,OAAA4M,iBAAArP,OAGAyjB,WAAA,SAAAF,GAEAvjB,KAAAujB,QAAAA,EAEAvjB,KAAA6e,wBAGAG,WAAA,SAAAhd,EAAA0R,GAEA,GAAAqN,GAAA/gB,KACAkf,EAAAlf,KAAAgC,MAAA7I,SACAuqB,EAAA1jB,KAAAujB,QAAApqB,SACAqgB,EAAAxZ,KAAAghB,iBAAAhf,GACAif,EAAAjf,EAAAhC,KAAA7C,MAEA8I,EAAAjE,EAAAyW,WAAAzY,KAAA7C,OAEAvB,OAAAoG,EACAwX,UAAAA,EACAyH,QAAAA,EACAnC,WACAva,OAAA,GAAAC,GACAmf,SAAA,GAAAnf,GACA8Y,QAAA,EACAiF,cAAA,EACAC,aAAA,EAEArB,UAAA,WAEAvf,EAAAY,MAAAZ,EAAAa,OAAA6M,yBAAAyR,EAAA/e,EAAAhC,KAAAiG,GAEA8a,EAAA0B,YAAAxc,EAAAjG,OAGAqhB,QAAA,WAEApb,EAAAqX,SAKA1b,EAAAY,MAAAZ,EAAAa,OAAA8M,uBAAAwR,EAAA/e,EAAAhC,KAAAiG,GAEA8a,EAAArM,KAAAzO,GACA8a,EAAA2B,UAAAzc,KAGA2d,iBAAA,WAEAhiB,EAAAY,MAAAZ,EAAAa,OAAA+M,8BAAAuR,EAAA/e,EAAAhC,KAAAiG,GAEA8a,EAAA8C,uBAAA5d,EAAAjG,OAMAgC,GAAAuG,OACAvG,EAAAT,IAAAlI,EAAA+I,OAAA4V,SAAAhY,KAAA2iB,SAAA3iB,MACAgC,EAAAT,IAAAlI,EAAA+I,OAAA6V,UAAAjY,KAAA4iB,UAAA5iB,MAGA0jB,EAAA3jB,GAAAgC,EAAAK,OAAAqG,WAAAzI,KAAA6iB,iBAAA5c,GAAAjG,KAGA,IAAAuZ,GAAAtT,EAAA1B,OAAA8B,MAuBA,IArBAkT,EAAAxW,IAAA,SAAAmF,GAEA6Y,EAAAhe,IAAAf,EAAAkG,IAGAqR,EAAAL,OAAA,SAAAhR,GAEA6Y,EAAA7H,OAAAlX,EAAAkG,IAGAqR,EAAAF,SAAA,SAAAnR,GAEA6Y,EAAA1H,SAAArX,EAAAkG,IAGAqR,EAAAC,UAAA,SAAAtR,GAEA,MAAA6Y,GAAAvH,UAAAxX,EAAAkG,IAIApO,EAAAmnB,GACA,CACArf,EAAAY,MAAAZ,EAAAa,OAAAgN,oBAAAzP,KAAAgC,EAAAiE,EAAAgb,EAEA,KAAA,GAAAxmB,GAAA,EAAAA,EAAAwmB,EAAAtmB,OAAAF,IACA,CACA,GAAAyN,GAAA+Y,EAAAxmB,GACA2J,EAAA8a,EAAA/V,kBAAAjB,EAEAjC,GAAA6Y,QAAA1a,IAAA,EACA8a,EAAAzL,UAAAvL,EAAAlI,KAAAwhB,YAAAvb,GAAAjG,KAAA0T,QAKA9R,GAAAY,MAAAZ,EAAAa,OAAAiN,2BAAA1P,KAAAgC,EAAAiE,GAEAyd,EAAAtQ,MAAApT,KAAA8iB,eAAA7c,GAAAjG,KAIAA,MAAA6hB,YAAA5b,IAGA8c,KAAA,SAAA9c,EAAApG,GAEAoG,EAAAsc,cAAA,EACAtc,EAAAuc,aAAA,EAEA3iB,EAAA5G,MAAA+G,MAEAiG,EAAAsc,cAAA,EACAtc,EAAAuc,aAAA,EAEAxiB,KAAA0U,KAAAzO,GACAjG,KAAA0iB,UAAAzc,IAGAlD,IAAA,SAAAf,EAAAkG,EAAAwL,GAEA,GAAAjV,EAAAyJ,GAEAlI,KAAAqZ,SAAArX,OAGA,CACA,GAAAkd,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,MACA6lB,EAAA/c,EAAA1B,OACA0e,EAAA,GAAAze,EAEA,IAAAxE,KAAAif,aAAA/W,GAEA,IAAA,GAAAzN,GAAA,EAAAA,EAAAyN,EAAAvN,OAAAF,IACA,CACA,GAAA8e,GAAA2F,EAAArL,WAAA3L,EAAAzN,GAAAiZ,EAEA6F,IAEA0J,EAAAza,IAAA+Q,EAAAhR,OAAAgR,OAKA,CACA,GAAAA,GAAA2F,EAAArL,WAAA3L,EAAAwL,EAEA6F,IAEA0J,EAAAza,IAAA+Q,EAAAhR,OAAAgR,GAIA,GAAA2J,GAAAF,EAAA5H,SAAA6H,GAAA5c,OACA8c,EAAAF,EAAA7H,SAAA4H,GAAA3c,MAEArG,MAAA+iB,KAAA9c,EAAA,WAEA,IAAA,GAAAxL,GAAA,EAAAA,EAAA0oB,EAAAxoB,OAAAF,IAEAuF,KAAAojB,SAAAnd,EAAAkd,EAAA1oB,GAAAiZ,EAGA,KAAA,GAAAjZ,GAAA,EAAAA,EAAAyoB,EAAAvoB,OAAAF,IAEAuF,KAAAyiB,YAAAxc,EAAAid,EAAAzoB,QAMAye,OAAA,SAAAlX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,IAAA6C,KAAAif,aAAA/W,GAEAlI,KAAA+iB,KAAA9c,EAAA,WAEA,IAAA,GAAAxL,GAAA,EAAAA,EAAAyN,EAAAvN,OAAAF,IACA,CACA,GAAA8e,GAAA2F,EAAArL,WAAA3L,EAAAzN,GAEA8e,IAEAvZ,KAAAojB,SAAAnd,EAAAsT,UAKA,IAAApf,EAAA+N,GACA,CACA,GAAAqR,GAAA2F,EAAArL,WAAA3L,EAEAqR,IAEAvZ,KAAAojB,SAAAnd,EAAAsT,KAKAF,SAAA,SAAArX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,IAAA6C,KAAAif,aAAA/W,GAEAlI,KAAA+iB,KAAA9c,EAAA,WAEA,IAAA,GAAAxL,GAAA,EAAAA,EAAAyN,EAAAvN,OAAAF,IACA,CACA,GAAA8e,GAAA2F,EAAArL,WAAA3L,EAAAzN,GAEA8e,IAEAvZ,KAAAyiB,YAAAxc,EAAAsT,UAKA,IAAApf,EAAA+N,GACA,CACA,GAAAqR,GAAA2F,EAAArL,WAAA3L,EAEAqR,IAEAvZ,KAAAyiB,YAAAxc,EAAAsT,OAOA,KAAA,GAFAxR,GAAA9B,EAAA1B,OAAA8B,OAEA5L,EAAAsN,EAAApN,OAAA,EAAAF,GAAA,EAAAA,IAEAuF,KAAAyiB,YAAAxc,EAAA8B,EAAAtN,KAKA+e,UAAA,SAAAxX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,MACA6lB,EAAA/c,EAAA1B,MAEA,IAAAvE,KAAAif,aAAA/W,GACA,CACA,IAAA,GAAAzN,GAAA,EAAAA,EAAAyN,EAAAvN,OAAAF,IACA,CACA,GAAA8e,GAAA2F,EAAArL,WAAA3L,EAAAzN,GAEA,IAAA8e,IAAAyJ,EAAAhP,IAAAuF,EAAAhR,QAEA,OAAA,EAIA,MAAAL,GAAAvN,OAAA,EAEA,GAAAR,EAAA+N,GACA,CACA,GAAAqR,GAAA2F,EAAArL,WAAA3L,EAEA,OAAAqR,IAAAyJ,EAAAhP,IAAAuF,EAAAhR,QAGA,OAAA,GAGAzF,IAAA,SAAAd,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,OAAA8I,GAAA1B,OAAA8B,QAGA2M,OAAA,SAAAhR,EAAA2B,EAAAuW,GAEA,GAAAjU,GAAAjE,EAAAyW,WAAAzY,KAAA7C,MACA4iB,EAAA7F,EAAAla,KAAAkG,KAAAlG,KAAAiF,KAEAgB,IAAA8Z,IAEApc,EAAA3D,KAAA7C,MAAA6C,KAAA6f,eAAA5Z,EAAA1B,OAAA8B,OAAA0Z,KAIA4C,SAAA,SAAA3gB,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,IAAA8I,GAAAjG,KAAAwjB,mBACA,CACA5hB,EAAAY,MAAAZ,EAAAa,OAAAqhB,oBAAA9jB,KAAAgC,EAAAiE,GAEAA,EAAAqX,QAAA,EACArX,EAAAuc,aAAA,CAIA,KAAA,GAFAje,GAAA0B,EAAA1B,OAAA8B,OAEA5L,EAAA,EAAAA,EAAA8J,EAAA5J,OAAAF,IACA,CACA,GAAA8e,GAAAhV,EAAA9J,EAEA8e,GAAApD,eAEAoD,EAAAjR,QAIArC,EAAAqX,QAAA,EACArX,EAAAuc,aAAA,IAIAI,UAAA,SAAA5gB,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA8I,IAAAjG,KAAAmiB,gBAEAvgB,EAAAY,MAAAZ,EAAAa,OAAAyN,sBAAAlQ,KAAAgC,EAAAiE,GAEAjG,KAAA+iB,KAAA9c,EAAA,WAIA,IAAA,GAFA1B,GAAA0B,EAAA0d,SAAAtd,OAEA5L,EAAA,EAAAA,EAAA8J,EAAA5J,OAAAF,IACA,CACA,GAAA8e,GAAAhV,EAAA9J,EAEA8e,GAAAK,eAMA8I,UAAA,SAAAzc,GAEAA,EAAAuc,cAEAxiB,KAAAiF,QAAArD,EAAAkc,MAAA3b,OAAAnC,KAAAkG,OAAAtE,EAAAwQ,KAAAjQ,SAEAP,EAAAY,MAAAZ,EAAAa,OAAAwN,sBAAAjQ,KAAAiG,GAEAA,EAAArK,OAAA0M,UAKAua,iBAAA,SAAA5c,GAEA,MAAA,UAAAsd,EAAA7P,GAEAzN,EAAAuT,UAAA+J,KAAAtd,EAAA0d,SAAA3P,IAAAuP,EAAAhb,UAEA3G,EAAAY,MAAAZ,EAAAa,OAAAuN,sBAAAhQ,KAAAiG,EAAAsd,GAEAvjB,KAAA+jB,oBAAA9d,EAAAsd,EAAA7P,MAKA8N,YAAA,SAAAvb,GAEA,MAAA,UAAAsT,GAEA,GAAAuF,GAAA7Y,EAAA6Y,QACAK,EAAA5F,EAAAhR,MAEA4W,KAAAL,KAEAld,EAAAY,MAAAZ,EAAAa,OAAAsN,4BAAA/P,KAAAiG,EAAAsT,GAEAvZ,KAAAojB,SAAAnd,EAAAsT,GAAA,SAEAuF,GAAAK,MAKA2D,eAAA,SAAA7c,GAEA,MAAA,UAAAyd,GAEA,GAAAM,GAAAN,EAAAnf,OACA0f,EAAAD,EAAAzI,OAAAtV,EAAAuT,WACAmK,EAAAM,EAAA5d,MAEA,KAAAsd,EAAAhpB,SAKAiH,EAAAY,MAAAZ,EAAAa,OAAAqN,sBAAA9P,KAAAiG,EAAA0d,GAEA3jB,KAAA+iB,KAAA9c,EAAA,WAEA,IAAA,GAAAxL,GAAA,EAAAA,EAAAkpB,EAAAhpB,OAAAF,IAEAuF,KAAA+jB,oBAAA9d,EAAA0d,EAAAlpB,SAMA2oB,SAAA,SAAAnd,EAAAsT,EAAA7F,GAEA,GAAAyP,GAAAnjB,KAAAkkB,eAAAje,EAAAsT,EAAA7F,EAOA,OALAyP,IAEAnjB,KAAAmkB,WAAAle,EAAAsT,EAAA7F,GAGAyP,GAGAgB,WAAA,SAAAle,EAAAsT,EAAA7F,GAEA,GAAAgQ,GAAA1jB,KAAAujB,QAAApqB,SACAirB,EAAApkB,KAAAqkB,iBAAApe,EAAAsT,EAEAmK,GAAAjQ,UAAA2Q,EAAApkB,KAAAskB,aAAAre,EAAAyN,GAAA1T,KAAA0T,IAGA4Q,aAAA,SAAAre,EAAAyN,GAEA,MAAA,UAAA6P,GAEAvjB,KAAAukB,iBAAAte,EAAAsd,EAAA7P,KAIAqQ,oBAAA,SAAA9d,EAAAsd,EAAA7P,GAEA,GAAAwL,GAAAlf,KAAAgC,MAAA7I,SACAgmB,EAAAD,EAAAhL,SAAAqP,EAAAvjB,KAAA+hB,QAEA7C,GAAAzL,UAAA0L,EAAAnf,KAAAwkB,sBAAAve,EAAAsd,EAAA7P,GAAA1T,KAAA0T,IAGA8Q,sBAAA,SAAAve,EAAAsd,EAAA7P,GAEA,MAAA,UAAA6F,GAEAA,IAEAvZ,KAAAukB,iBAAAte,EAAAsd,EAAA7P,GACA1T,KAAAkkB,eAAAje,EAAAsT,EAAA7F,MAKA6Q,iBAAA,SAAAte,EAAAsd,EAAA7P,GAEA,GAAAiQ,GAAA1d,EAAA0d,SACAS,EAAAb,EAAAhb,MAEAob,GAAA3P,IAAAoQ,KAEAxiB,EAAAY,MAAAZ,EAAAa,OAAA2N,qBAAApQ,KAAAiG,EAAAsd,GAEAI,EAAAnb,IAAA4b,EAAAb,GAEAA,EAAAhiB,IAAAlI,EAAA+I,OAAAuV,QAAA1R,EAAA2d,kBAEAlQ,GAEA6P,EAAAjb,MAAAtI,KAAAoiB,eAKA8B,eAAA,SAAAje,EAAAsT,EAAA7F,GAEA,GAAAoM,GAAA7Z,EAAA1B,OACA4a,EAAA5F,EAAAhR,OACA4a,GAAArD,EAAA9L,IAAAmL,EAmBA,OAjBAgE,KAEAvhB,EAAAY,MAAAZ,EAAAa,OAAAoN,gBAAA7P,KAAAiG,EAAAsT,GAEAuG,EAAAtX,IAAA2W,EAAA5F,GAEAA,EAAAhY,IAAAlI,EAAA+I,OAAAuV,QAAA1R,EAAAkb,WACA5H,EAAAhY,IAAAlI,EAAA+I,OAAAmW,kBAAAtS,EAAAob,SAEArhB,KAAA0U,KAAAzO,GAEAyN,GAEA1T,KAAA0iB,UAAAzc,IAIAkd,GAGAV,YAAA,SAAAxc,EAAAsT,EAAA8J,GAEA,GAAAlE,GAAA5F,EAAAhR,MAEAvI,MAAAykB,oBAAAxe,EAAAkZ,IAEAnf,KAAA0kB,cAAAze,EAAAsT,EAAA8J,IAIAqB,cAAA,SAAAze,EAAAsT,EAAA8J,GAEA,GAAAK,GAAA1jB,KAAAujB,QAAApqB,SACAwrB,EAAA3kB,KAAAqkB,iBAAApe,EAAAsT,GACAnV,EAAAsf,EAAApP,OAAAqQ,GACAhB,EAAA1d,EAAA0d,SACAJ,EAAAI,EAAA7gB,IAAAsB,EAEApE,MAAA4kB,oBAAA3e,EAAAsd,EAAAhK,GAAA,IAGAsK,uBAAA,SAAA5d,EAAAsd,GAEA,GAAArE,GAAAlf,KAAAgC,MAAA7I,SACAgmB,EAAAD,EAAAhL,SAAAqP,EAAAvjB,KAAA+hB,QAEA/hB,MAAA4kB,oBAAA3e,EAAAsd,IAEAvjB,KAAAykB,oBAAAxe,EAAAkZ,IAIAyF,oBAAA,SAAA3e,EAAAsd,EAAAhK,EAAAsL,GAEA,GAAA3B,KAAAK,CAEA,IAAAL,EACA,CACAthB,EAAAY,MAAAZ,EAAAa,OAAA4N,wBAAArQ,KAAAiG,EAAAsd,EAAAhK,EAEA,IAAAoK,GAAA1d,EAAA0d,SACAS,EAAAb,EAAAhb,MAEAgb,GAAA7hB,KAAArI,EAAA+I,OAAAuV,QAAA1R,EAAA2d,kBAEAiB,GAEAtB,EAAA3J,QAAA5Z,KAAAmiB,eAGAwB,EAAAjT,OAAA0T,GAGA,MAAAlB,IAGAuB,oBAAA,SAAAxe,EAAAkZ,GAEA,GAAAL,GAAA7Y,EAAA6Y,QACAgB,EAAA7Z,EAAA1B,OACAgV,EAAAuG,EAAAhd,IAAAqc,EAiBA,OAfA5F,KAEA3X,EAAAY,MAAAZ,EAAAa,OAAAkN,mBAAA3P,KAAAiG,EAAAsT,GAEAuG,EAAApP,OAAAyO,GAEA5F,EAAA7X,KAAArI,EAAA+I,OAAAuV,QAAA1R,EAAAkb,WACA5H,EAAA7X,KAAArI,EAAA+I,OAAAmW,kBAAAtS,EAAAob,SAEArhB,KAAA0U,KAAAzO,GACAjG,KAAA0iB,UAAAzc,UAGA6Y,GAAAK,GAEA5F,GAGAyH,iBAAA,SAAAhf,GAEA,GAAA+f,GAAA/f,EAAAoE,IAAAhC,IACA+Y,EAAAnd,KAAAmd,KAEA,OAAA,UAAAoG,GAEA,MAAApoB,GAAAooB,EAAApG,EAAAnb,EAAA+f,KAIAF,YAAA,SAAA5b,GAEAjG,KAAAL,WAEAsG,EAAArK,OAAAoE,KAAA7C,MAAA8I,EAAA1B,OAAA8B,SAIAqO,KAAA,SAAAzO,GAEA,GAAAsT,GAAAtT,EAAA1B,MAEA0B,GAAAsc,eAEAhJ,EAAAxE,SAAA/U,KAAA1F,cAEAsH,EAAAY,MAAAZ,EAAAa,OAAAmN,iBAAA5P,KAAAiG,GAEAsT,EAAA7E,KAAA1U,KAAA1F,aAGA2L,EAAArK,OAAA+F,SAAAtI,EAAA+I,OAAAiW,gBAAArY,KAAAiG,MAIAoe,iBAAA,SAAApe,EAAAsT,GASA,IAAA,GAPAvX,GAAAiE,EAAArK,OACAkpB,EAAA9iB,EAAAoE,IACA8Y,EAAAlf,KAAAgC,MAAA7I,SACAuqB,EAAA1jB,KAAAujB,QAAApqB,SACAirB,EAAAV,EAAAtf,IACAA,KAEA3J,EAAA,EAAAA,EAAA2pB,EAAAzpB,OAAAF,IACA,CACA,GAAAyB,GAAAkoB,EAAA3pB,EAEA,IAAAyB,IAAA8D,KAAA+hB,QAEA3d,EAAAlI,GAAAqd,EAAAhR,WAEA,IAAArM,IAAA8D,KAAAmd,MAEA/Y,EAAAlI,GAAA8F,EAAAuG,WAEA,IAAAzO,EAAAkG,KAAA+hB,SACA,CACA,GAAAgD,GAAA3qB,EAAA4F,KAAA+hB,QAAA7lB,GACA8oB,EAAA9F,EAAA9a,IAAA2gB,EAEA3gB,GAAAlI,GAAAqd,EAAAyL,OAEA,IAAAlrB,EAAAkG,KAAAmd,OACA,CACA,GAAA4H,GAAA3qB,EAAA4F,KAAAmd,MAAAjhB,GACA8oB,EAAAF,EAAA1gB,IAAA2gB,EAEA3gB,GAAAlI,GAAA8F,EAAAgjB,IAIA,MAAA5gB,MCvsBAxC,EAAAgE,UAAAqf,OAAAxd,GAEAA,GAAAtD,UAEAnC,MAAArJ,EACAsM,MAAArD,EAAAkc,MAAAvL,KACArM,KAAAtE,EAAAwQ,KAAAG,KACA0L,MAAA,EACAte,UAAA,EACAwd,MAAA,KACAvW,SAAA,GAGAjL,EAAA,GAAAmK,IAAA2B,IAGAyW,YAAA,SAAApc,EAAAqc,EAAA1hB,GAEA,MAAAgL,IAAAtD,UAGAya,cAAA,SAAA9c,EAAAqc,EAAA1hB,GAEA,GAAAyiB,GAAAlf,KAAAgC,MAAA7I,QAEA6G,MAAAmd,MAAAnd,KAAAmd,OAAA+B,EAAA/hB,KAAA,IAAA+hB,EAAA9a,IAEAxC,EAAAY,MAAAZ,EAAAa,OAAAuK,YAAAhN,MAEAA,KAAA6e,wBAGAG,WAAA,SAAAhd,EAAA0R,GAEA,GAAAqN,GAAA/gB,KACAwZ,EAAAxZ,KAAAghB,iBAAAhf,GACAkd,EAAAlf,KAAAgC,MAAA7I,SACA8nB,EAAAjf,EAAAhC,KAAA7C,MAEA8I,EAAAjE,EAAAyW,WAAAzY,KAAA7C,OAEAvB,OAAAoG,EACAif,QAAAA,EACAzH,UAAAA,EACAxX,MAAA,KACAkf,QAAA,EACAgE,OAAA,EACA5H,QAAA,EAEA6D,UAAA,WAEAvf,EAAAY,MAAAZ,EAAAa,OAAAwK,oBAAA8T,EAAA/e,EAAAiE,GAEAjG,KAAAohB,aAAAnb,GAAA,IAEAob,QAAA,WAEApb,EAAAqX,SAKA1b,EAAAY,MAAAZ,EAAAa,OAAAyK,kBAAA6T,EAAA/e,EAAAiE,GAEAuT,EAAAvT,EAAAjE,QAEAhC,KAAAohB,aAAAnb,KAKAjE,GAAAT,IAAAlI,EAAA+I,OAAA2V,QAAA/X,KAAAmlB,QAAAnlB,MACAgC,EAAAT,IAAAlI,EAAA+I,OAAA8V,WAAAlY,KAAAuhB,WAAAvhB,MAEAvB,EAAAwiB,IAAA/B,EAAA1K,UAAAxS,EAAAhC,KAAAmd,MAAAhjB,KAEA8mB,EAAArjB,EAAAoE,EAAAhC,KAAAmd,OAEAvb,EAAAY,MAAAZ,EAAAa,OAAA0K,sBAAAnN,KAAAgC,EAAAif,IAGAxiB,EAAAwiB,KAEArf,EAAAY,MAAAZ,EAAAa,OAAA2K,eAAApN,KAAAgC,EAAAif,GAEA/B,EAAAzL,UAAAwN,EAAAjhB,KAAAwhB,YAAAvb,GAAAjG,KAAA0T,KAIA3Q,IAAA,SAAAf,EAAAkG,EAAAwL,GAEA,GAAAjV,EAAAyJ,GAEAlI,KAAAqZ,SAAArX,OAGA,CACA,GAAAkd,GAAAlf,KAAAgC,MAAA7I,SACAogB,EAAA2F,EAAArL,WAAA3L,EAAAwL,GACAzN,EAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEAoc,KAAAtT,EAAAuT,UAAAD,KAEAvZ,KAAAyhB,WAAAxb,GACAjG,KAAA0hB,WAAAzb,EAAAsT,MAKAL,OAAA,SAAAlX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACAogB,EAAA2F,EAAArL,WAAA3L,GACAjC,EAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEAoc,IAEAtT,EAAAjE,QAAAuX,IAEAvZ,KAAAyhB,WAAAxb,GACAjG,KAAA0hB,WAAAzb,EAAAsT,KAKAF,SAAA,SAAArX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,MACAoc,EAAA2F,EAAArL,WAAA3L,EAEAqR,IAAAtT,EAAAjE,QAAAuX,GAEAvZ,KAAAohB,aAAAnb,IAIAuT,UAAA,SAAAxX,EAAAkG,GAEA,GAAAgX,GAAAlf,KAAAgC,MAAA7I,SACA8M,EAAAjE,EAAAyW,WAAAzY,KAAA7C,MACAoc,EAAA2F,EAAArL,WAAA3L,EAEA,OAAAqR,KAAAtT,EAAAjE,OAGAc,IAAA,SAAAd,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,OAAA8I,GAAAjE,OAGAgR,OAAA,SAAAhR,EAAA2B,EAAAuW,GAEA,GAAAjU,GAAAjE,EAAAyW,WAAAzY,KAAA7C,MACA4iB,EAAA7F,EAAAla,KAAAkG,KAAAlG,KAAAiF,KAEAgB,IAAA8Z,IAEApc,EAAA3D,KAAA7C,MAAA6C,KAAAigB,UAAAha,EAAAjE,MAAA+d,KAIAoF,QAAA,SAAAnjB,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA,IAAA8I,GAAAA,EAAAjE,MACA,CACA,GAAAuX,GAAAtT,EAAAjE,OAEAiE,EAAAuT,UAAAD,IAKAtT,EAAAif,OAAA3L,EAAApD,iBAEAvU,EAAAY,MAAAZ,EAAAa,OAAA8K,eAAAvN,KAAAgC,EAAAiE,GAEAA,EAAAqX,QAAA,EACA/D,EAAAjR,QACArC,EAAAqX,QAAA,EACArX,EAAAif,OAAA,KAKA3D,WAAA,SAAAvf,GAEA,GAAAiE,GAAAjE,EAAAyW,WAAAzY,KAAA7C,KAEA8I,IAEAjG,KAAA4G,UAEAhF,EAAAY,MAAAZ,EAAAa,OAAA+K,kBAAAxN,KAAAgC,EAAAiE,GAEAjG,KAAAyhB,WAAAxb,GAAA,EAAAjG,KAAA4G,WAKA8a,WAAA,SAAAzb,EAAAsT,GAEAvZ,KAAA2hB,SAAA1b,EAAAsT,GACAvZ,KAAA4hB,iBAAA3b,EAAArK,OAAA2d,GACAvZ,KAAA6hB,YAAA5b,IAGAmb,aAAA,SAAAnb,EAAAmf,GAEAplB,KAAAyhB,WAAAxb,EAAAmf,GACAplB,KAAA8hB,gBAAA7b,EAAArK,QACAoE,KAAA6hB,YAAA5b,IAGAwb,WAAA,SAAAxb,EAAAmf,EAAAxe,GAEA,GAAA2S,GAAAtT,EAAAjE,KAEAuX,KAEA3X,EAAAY,MAAAZ,EAAAa,OAAA4K,mBAAArN,KAAAiG,GAEAsT,EAAA7X,KAAArI,EAAA+I,OAAA0V,MAAA7R,EAAAob,SACA9H,EAAA7X,KAAArI,EAAA+I,OAAAuV,QAAA1R,EAAAkb,WAEAiE,GAEA7L,EAAAK,QAAAhT,GAGAX,EAAAjE,MAAA,KACAiE,EAAAif,OAAA,EACAjf,EAAAib,QAAA,IAIAS,SAAA,SAAA1b,EAAAsT,GAEAA,EAAAhY,IAAAlI,EAAA+I,OAAA0V,MAAA7R,EAAAob,QAAArhB,MACAuZ,EAAAhY,IAAAlI,EAAA+I,OAAAuV,QAAA1R,EAAAkb,UAAAnhB,MAEAiG,EAAAjE,MAAAuX,EACAtT,EAAAif,OAAA,EACAjf,EAAAib,QAAA,EAEAtf,EAAAY,MAAAZ,EAAAa,OAAA6K,iBAAAtN,KAAAiG,IAGAub,YAAA,SAAAvb,GAEA,MAAA,UAAAsT,GAEA3X,EAAAY,MAAAZ,EAAAa,OAAAkL,cAAA3N,KAAAiG,EAAArK,OAAAqK,EAAAsT,GAEAtT,EAAAib,UAAA,IAEA3H,GAEAvZ,KAAA2hB,SAAA1b,EAAAsT,GACAvZ,KAAA4hB,iBAAA3b,EAAArK,OAAA2d,IAIAvZ,KAAA8hB,gBAAA7b,EAAArK,QAGAqK,EAAAib,QAAA,EAEAlhB,KAAA6hB,YAAA5b,MAKA+a,iBAAA,SAAAhf,GAEA,GAAAkd,GAAAlf,KAAAgC,MAAA7I,SACAgkB,EAAAnd,KAAAmd,MACA4E,EAAA7C,EAAA9a,GAEA,OAAA,UAAAmV,GAEA,MAAApe,GAAA6G,EAAAmb,EAAA5D,EAAAwI,KAIAD,gBAAA,SAAA9f,GAEA,GAAAmb,GAAAnd,KAAAmd,KAEAvb,GAAAY,MAAAZ,EAAAa,OAAAgL,iBAAAzN,KAAAgC,EAAAmb,GAEAnd,KAAAof,YAAApd,EAAAmb,IAGAyE,iBAAA,SAAA5f,EAAAuX,GAEA,GAAA2F,GAAAlf,KAAAgC,MAAA7I,SACAgkB,EAAAnd,KAAAmd,MACA4E,EAAA7C,EAAA9a,GAEAxC,GAAAY,MAAAZ,EAAAa,OAAAiL,kBAAA1N,KAAAgC,EAAAmb,EAAA5D,EAAAwI,GAEA/hB,KAAAuf,aAAAvd,EAAAmb,EAAA5D,EAAAwI,IAGAF,YAAA,SAAA5b,GAEA,GAAAjG,KAAAL,SACA,CACA,GAAAqC,GAAAiE,EAAArK,OACA2d,EAAAtT,EAAAjE,KAEAA,GAAAhC,KAAA7C,QAAAoc,IAEAvX,EAAAhC,KAAA7C,MAAAoc,EAEAvX,EAAAL,SAAAtI,EAAA+I,OAAAiW,gBAAArY,KAAAiG,SWnUAvN,EAAAkJ,MAAAA,EAGAlJ,EAAAkJ,MAAAO,MAAA9I,EACAX,EAAAkJ,MAAAzI,SAAA4I,EACArJ,EAAAkJ,MAAAyjB,SAAAvf,GACApN,EAAAkJ,MAAA0jB,UAAA9e,EACA9N,EAAAkJ,MAAA2jB,IAAA/gB,EAGA9L,EAAAkJ,MAAA1I,QAAAA,EACAR,EAAAkJ,MAAA1G,KAAAA,EACAxC,EAAAkJ,MAAAxH,QAAAA,EACA1B,EAAAkJ,MAAAzG,WAAAA,EACAzC,EAAAkJ,MAAAjG,OAAAA,EACAjD,EAAAkJ,MAAA7F,SAAAA,EACArD,EAAAkJ,MAAAzF,KAAAA,EACAzD,EAAAkJ,MAAAtE,KAAAA,EACA5E,EAAAkJ,MAAAhE,KAAAA,EACAlF,EAAAkJ,MAAA/E,KAAAA,EACAnE,EAAAkJ,MAAAzD,KAAAA,EACAzF,EAAAkJ,MAAArD,OAAAA,EACA7F,EAAAkJ,MAAAnD,QAAAA,EACA/F,EAAAkJ,MAAA5C,QAAAA,EACAtG,EAAAkJ,MAAAlG,OAAAA,EACAhD,EAAAkJ,MAAApH,aAAAA,EACA9B,EAAAkJ,MAAAvC,iBAAAA,GAEA0R","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    var $init = model.prototype.$init;\n\n    model.prototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      applyEventListeners( this, modelEvents );\n    };\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      \n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br );\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$isDeleted() )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( encoded.$status === NeuroModel.Status.SavePending )\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroGetLocal' ), NeuroGetLocal,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroGetRemote' ), NeuroGetRemote,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveCache' ), NeuroRemoveCache,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( isEmpty( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live(\n    {\n      op:     NeuroDatabase.Live.Save,\n      model:  model.$publish,\n      key:    model.$key()\n    });\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n    \n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation, remoteData ), this, remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related, remoteData );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.model )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false\n};\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData )\n      {\n        through.$save( this.cascadeSave );\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    false\n};\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation, true );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this, remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation, false, this.cascade );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation, dontRemove)\n  {\n    this.clearModel( relation, dontRemove );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, dontRemove, cascade)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        related.$remove( cascade );\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.getModels();\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    return db.putRemoteData( input );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.getModel( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}