{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroSearch.js","NeuroSearchPaged.js","NeuroTransaction.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","NeuroShard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","find.js","get.js","grab.js","grabAll.js","methods.js","query.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","where.js","Neuro.debug.js","Neuro.rest.js","Neuro.store.js","Neuro.live.js","Neuro.offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","secret","defaultValue","option","valued","copy","$options","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","collapse","cleanFunctions","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","Events","Options","database","NeuroDatabase","Function","className","Model","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","keys","models","NeuroModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","init","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","db","$db","NeuroMap","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroSearch","NeuroSearchPaged","NeuroTransaction","cascade","operation","completed","operations","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","NeuroShard","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkNeuro","cached","Online","Offline","Cascade","None","Local","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","$save","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","find","firstWhere","grabModel","grabAll","ready","methods","q","sync","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","type","time","timestamps","timestampsAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","put","record","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReady","invoked","hasData","saving","checkModel","$isSaved","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","resort","clean","overwrite","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","transactNone","transact","txn","$remove","$exists","$cancel","$clone","f","cloneKey","relationName","preClone","clone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","$method","$results","$concurrent","$run","$encode","$handleSuccess","$handleFailure","$ready","$success","$failure","concurrentCount","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$first","$last","$prev","$next","response","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","page_size","$setPageSize","$getPageSize","page_index","$getPageOffset","$setTotal","$getTotal","transaction","RemoteSuccess","LocalSuccess","Any","handled","already","offs","createHandler","offline","isFinished","finish","then","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","pendingInitials","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","initials","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","Relation","Operation","Transaction","Search","SearchPaged","Map","Collection","ModelCollection","Query","RemoteQuery","Page","HasOne","BelongsTo","HasMany","HasManyThrough","HasRemote"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * @memberof Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * @memberof Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * @memberof Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * @memberof Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * @memberof Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      target[ prop ] = options[ prop ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\n/**\n * Returns an instance of {@link Neuro.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Neuro.collect(1, 2, 3, 4);\n * Neuro.collect([1, 2, 3, 4]); // same as above\n * Neuro.collect();\n * Neuro.collect([]); // same as above\n * ```\n *\n * @memberof Neuro\n * @param  {Any[]|...Any} a\n *         The initial values in the collection. You can pass an array of values\n *         or any number of arguments.\n * @return {Neuro.Collection} -\n *         A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * A string, a function, or an array of mixed values.\n * @typedef {String|Function|Array} ComparatorInput\n */\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Neuro\n * @param  {ComparatorInput} comparator\n *         The input which creates a comparison function.\n * @return {Boolean} -\n *         True if null values should be sorted first.\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger`\n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   *\n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   *\n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};\n","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the\n * constructor for creating instances of the Neuro object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  Neuro.trigger( Neuro.Events.Options, [options] );\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  if ( Neuro.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Neuro.unloaded.push( database );\n  }\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.autoload = false;\n\nNeuro.unloaded = [];\n\nNeuro.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Neuro.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Neuro.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n\nNeuro.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nNeuro.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuro.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, NeuroDatabase.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, NeuroDatabase.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","\n\nfunction NeuroDatabase(options)\n{\n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new NeuroModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Neuro.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Neuro.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Neuro.live( database );\n}\n\nNeuroDatabase.Events =\n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( NeuroModel.Events.RemoteGets, function()\n          {\n            if ( !grabbed )\n            {\n              grabbed = true;\n\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              callback.call( callbackContext, result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          grabbed = true;\n          callback.call( callbackContext, result );\n        }\n      }\n\n      return grabbed ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === NeuroModel.Status.RemovePending )\n      {\n        Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( NeuroRemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== NeuroModel.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( Neuro.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(models)\n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(models, status)\n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Neuro.debug( Neuro.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Neuro.transactNone( cascade, this, 'save' );\n    }\n\n    return Neuro.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Neuro.transactNone( cascade, this, 'remove' );\n    }\n\n    return Neuro.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );\n","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Neurosync.\n *\n * A collection of any type can be created via {@link Neuro.collect}.\n *\n * ```\n * var nc = new Neuro.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Neuro\n * @alias Collection\n * @see Neuro.collect\n */\nfunction NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\n/**\n * The events a collection can emit.\n *\n * {@link Neuro.Collection#event:add Add}\n * {@link Neuro.Collection#event:adds Adds}\n * {@link Neuro.Collection#event:sort Sort}\n * {@link Neuro.Collection#event:remove Remove}\n * {@link Neuro.Collection#event:removes Removes}\n * {@link Neuro.Collection#event:updates Updates}\n * {@link Neuro.Collection#event:reset Reset}\n * {@link Neuro.Collection#event:cleared Cleared}\n * {@link Neuro.Collection#event:changes Changes}\n *\n * @static\n */\nNeuroCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Neuro.Collection#add\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {T} value - The value added.\n   * @see Neuro.Collection#add\n   * @see Neuro.Collection#insertAt\n   * @see Neuro.ModelCollection#add\n   * @see Neuro.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Neuro.Collection#adds\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {T[]} value - The values added.\n   * @see Neuro.Collection#addAll\n   * @see Neuro.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is resorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Neuro.Collection#sort\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @see Neuro.Collection#resort\n   * @see Neuro.ModelCollection#resort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Neuro.Collection#remove\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {Any} removing - The element that was removed.\n   * @argument {Number} index - The index where the element was removed at.\n   * @see Neuro.Collection#remove\n   * @see Neuro.Collection#removeAt\n   * @see Neuro.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Neuro.Collection#removes\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {Any[]} removed - The array of elements removed from the collection.\n   * @see Neuro.Collection#removeAll\n   * @see Neuro.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Neuro.Collection#updates\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {Array} updated - The array of elements modified.\n   * @see Neuro.ModelCollection#update\n   * @see Neuro.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Neuro.Collection#reset\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @argument {Array} updated - The array of elements modified.\n   * @see Neuro.FilteredCollection#sync\n   * @see Neuro.ModelCollection#reset\n   * @see Neuro.Query#sync\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Neuro.Collection#cleared\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   * @see Neuro.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Neuro.Collection#changes\n   * @argument {Neuro.Collection} collection - The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, NeuroCollection,\n{\n\n  /**\n   * setComparator\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator\n   * @param {boolean} nullsFirst\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  /**\n   * addComparator\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator\n   * @param {boolean} nullsFirst\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  /**\n   * isSorted\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * RESORT\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator\n   * @param {boolean} nullsFirst\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );\n","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery,\n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  parse: function(models)\n  {\n    return models;\n  },\n\n  handleSuccess: function()\n  {\n    var models = this.parse.apply( this, arguments );\n\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n  }\n\n});\n","\nfunction NeuroSearch(database, options)\n{\n  this.$init( database, options );\n}\n\nNeuroSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Defaults =\n{\n  $method:     'create'\n};\n\nNeuroSearch.prototype =\n{\n\n  $init: function(database, options)\n  {\n    applyOptions( this, options, NeuroSearch.Defaults, true );\n\n    this.$db = database;\n    this.$results = new NeuroModelCollection( database );\n    this.$status = NeuroSearch.Status.Success;\n    this.$concurrent = 0;\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n\n    this.$status = NeuroSearch.Status.Pending;\n    this.$concurrent++;\n\n    var success = bind( this, this.$handleSuccess( this.$concurrent ) );\n    var failure = bind( this, this.$handleFailure( this.$concurrent ) );\n\n    switch (this.$method) {\n      case 'create':\n        this.$db.rest.create( this, encoded, success, failure );\n        break;\n      case 'update':\n        this.$db.rest.update( this, encoded, success, failure );\n        break;\n      case 'query':\n        this.$db.rest.query( encoded, success, failure );\n        break;\n      default:\n        throw 'Invalid search method: ' + this.$method;\n    }\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Success, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Failure, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(concurrentCount)\n  {\n    return function onSuccess()\n    {\n      if (this.$concurrent === concurrentCount)\n      {\n        var models = this.$decode.apply( this, arguments );\n\n        this.$concurrent = 0;\n        this.$status = NeuroSearch.Status.Success;\n        this.$results.reset( models, true );\n        this.$trigger( NeuroSearch.Events.Ready, [this] );\n        this.$trigger( NeuroSearch.Events.Success, [this] );\n      }\n    };\n  },\n\n  $handleFailure: function(concurrentCount)\n  {\n    return function onFailure()\n    {\n      if (this.$concurrent === concurrentCount)\n      {\n        this.$concurrent = 0;\n        this.$status = NeuroSearch.Status.Failure;\n        this.$trigger( NeuroSearch.Events.Ready, [this] );\n        this.$trigger( NeuroSearch.Events.Failure, [this] );\n      }\n    };\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions(copy(this));\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n};\n\neventize( NeuroSearch.prototype, true );\n","\nfunction NeuroSearchPaged(database, options)\n{\n  this.$init( database, options );\n}\n\nextend( NeuroSearch, NeuroSearchPaged,\n{\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nNeuro.transaction = null;\n\nNeuro.transact = function(cascade, model, operation, func)\n{\n  var transaction = Neuro.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Neuro.transaction = new NeuroTransaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Neuro.transaction = null;\n\n    return transaction;\n  }\n};\n\nNeuro.transactNone = function(cascade, model, operation)\n{\n  return new NeuroTransaction( cascade, model, operation );\n};\n\nfunction NeuroTransaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nNeuroTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\nNeuroTransaction.prototype =\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = NeuroTransaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = NeuroTransaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Neuro.Cascade.Rest )\n      {\n        this.status = NeuroTransaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Neuro.Cascade.Local )\n      {\n        this.status = NeuroTransaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = NeuroTransaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( NeuroTransaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n};\n\neventize( NeuroTransaction.prototype );\n","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype =\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetOffline, [model] );\n    }\n    else\n    {  \n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n    }\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n        \n        model.$trigger( NeuroModel.Events.RemoteRemoveOffline, [model] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    }\n    else\n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online)\n      {\n        Neuro.once( 'online', this.handleOnline, this );\n\n        model.$trigger( NeuroModel.Events.RemoteSaveOffline, [model] );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n\n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});\n","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuroRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.pendingInitials = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var initials = this.pendingInitials;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], initials[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    initials.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, initialValue, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingInitials.push( initialValue );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, initialValue, remoteData );\n    }\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};\n","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","\nNeuro.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new NeuroShard( database );\n\n    transfer( methods, shard );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction NeuroShard(database)\n{\n  this.database = database;\n}\n\nNeuroShard.prototype =\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( query, success, failure )\n  {\n    var shards = this.getShardsForQuery( query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || NeuroDatabase.Defaults.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db );\n\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( NeuroModel.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, NeuroDatabase.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    transfer( methods, model.prototype );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.search = function(options)\n  {\n    return new NeuroSearch( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.searchPaged = function(options)\n  {\n    return new NeuroSearchPaged( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Options, function(options)\n{\n  var shard = options.shard || NeuroDatabase.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Neuro.shard( shard );\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || NeuroDatabase.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || NeuroDatabase.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};\n","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Transaction = NeuroTransaction;\n  global.Neuro.Search = NeuroSearch;\n  global.Neuro.SearchPaged = NeuroSearchPaged;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Relationships */\n  global.Neuro.HasOne = NeuroHasOne;\n  global.Neuro.BelongsTo = NeuroBelongsTo;\n  global.Neuro.HasMany = NeuroHasMany;\n  global.Neuro.HasManyThrough = NeuroHasManyThrough;\n  global.Neuro.HasRemote = NeuroHasRemote;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n\n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n\n  global.Neuro.transfer = transfer;\n  global.Neuro.collapse = collapse;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}