{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","NeuroRelationCollection.js","all.js","boot.js","collect.js","create.js","fetch.js","get.js","methods.js","query.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","copyConstructor","func","F","extend","parent","child","override","transfer","factory","args","this","arguments","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyFunction","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","model","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","saveHaving","having","Havings","createHaving","eventize","secret","onListeners","$this","property","events","callback","context","on","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","fields","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","base","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Pending","onSuccess","handleSuccess","onFailure","handleFailure","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","NeuroRelationCollection","relator","Online","Offline","checkNeuro","cached","callbackContext","all","boot","input","putRemoteData","instantiate","$save","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","fetch","buildKeyFromInput","instance","buildObjectFromKey","$set","$refresh","grabModel","methods","q","sync","currentTime","currentDate","encode","decode","parse","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","addTimestampField","type","time","timestamps","timeAsDate","where","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","ready","persistent","onReadyRemove","onReady","invoked","checkModel","result","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","hasFields","exists","sort","revisionFunction","ar","br","resort","decoded","revisionCompare","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","refresh","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","Blocked","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","filtered","add","collection","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","first","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","Success","Failure","Ready","setQuery","skipSync","clearPending","cancel","that","error","next","finished","interrupts","run","finish","tryNext","setNext","insertNext","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","changes","saving","publish","clearLocal","markSynced","handleData","saveNow","publishing","Store","Key","Keys","auto","getDefaults","pendingLoads","pendingRemoteDatas","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","remotes","handleLoad","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","belongsTo","isRelatedFactory","initial","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleLazyLoad","bulk","existing","given","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n}\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copyFunction(x)\n{\n  return function() {\n    return x.apply( this, arguments );\n  };\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    var $init = model.prototype.$init;\n\n    model.prototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      applyEventListeners( this, modelEvents );\n    };\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      \n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br );\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      this.summarize = function(model)\n      {\n        return isValue( model ) ? model[ summarize ] : model;\n      };\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes reset'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, comparatorNullsFirst)\n  {\n    this.comparator = createComparator( comparator, comparatorNullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n\n\n\n\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    var arr = [];\n    arr.push.apply( arr, this );\n    return arr;\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd = copyFunction( this.handleAdd );\n  this.onAdds = copyFunction( this.handleAdds );\n  this.onRemove = copyFunction( this.handleRemove );\n  this.onRemoves = copyFunction( this.handleRemoves );\n  this.onReset = copyFunction( this.handleReset );\n  this.onUpdates = copyFunction( this.handleUpdates );\n  this.onCleared = copyFunction( this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd, this );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds, this );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove, this );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves, this );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset, this );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates, this );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear, this );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n\n  subtract: function(models, out)\n  {\n    var db = this.database;\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = db.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var db = this.database;\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = db.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var db = this.database;\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = db.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      var db = this.database;\n\n      this.map.reset();\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = db.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          this.map.put( parsed.$key(), parsed );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Reset, [this] );\n      this.resort();\n    }\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var db = this.database;\n    var key = db.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var db = this.database;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = db.buildKeyFromInput( inputs[ i ] );\n      var removing = this.map.get( key );\n\n      if ( removing )\n      {\n        this.map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var db = this.database;\n    var key = db.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  },\n\n});","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd = copyFunction( this.handleModelAdded );\n  this.onModelRemoved = copyFunction( this.handleModelRemoved );\n  this.onModelUpdated = copyFunction( this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd, this );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved, this );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated, this );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    this.map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Pending;\n\n  this.onSuccess = this.handleSuccess();\n  this.onFailure = this.handleFailure();\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:  0,\n  Success:  1,\n  Failure:  2\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function()\n  {\n    var that = this;\n\n    return function(models)\n    {\n      that.status = NeuroRemoteQuery.Status.Success;\n      that.reset( models, true );\n      that.trigger( NeuroRemoteQuery.Events.Success, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  },\n\n  handleFailure: function()\n  {\n    var that = this;\n\n    return function(models, error)\n    {\n      that.status = NeuroRemoteQuery.Status.Failure;\n      that.trigger( NeuroRemoteQuery.Events.Failure, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  }\n\n});","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( isEmpty( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live(\n    {\n      op:     NeuroDatabase.Live.Save,\n      model:  model.$publish,\n      key:    model.$key()\n    });\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  dynamic:    false\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated ); // TODO\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related ); // TODO\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  dynamic:    false,\n  local:      null,\n  cascade:    true\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation, remoteData ), this, remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.related;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.related, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var collection = new NeuroRelationCollection( relatedDatabase, model, this );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = new NeuroModelCollection( relatedDatabase );\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.related, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < related.length; i++)\n        {\n          this.addModel( relation, related[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n      related.resort( this.comparator );\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var collection = new NeuroRelationCollection( relatedDatabase, model, this );\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = new NeuroModelCollection( relatedDatabase );\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.related, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  dynamic:    false,\n  local:      null,\n  cascade:    true\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this, remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.related, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove();\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.init( database );\n  this.model = model;\n  this.relator = relator;\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    q.sync();\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n})(window);"],"sourceRoot":"/source/"}