{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroModelCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","NeuroRelationCollection.js","all.js","boot.js","bootCollection.js","create.js","fetch.js","get.js","methods.js","query.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","copyConstructor","func","F","extend","parent","child","override","transfer","factory","args","this","arguments","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyFunction","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","createNumberResolver","numbers","model","parseFloat","value","createPropertyResolver","delim","join","propsArray","propsResolver","createWhere","equality","createHaving","having","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","createComparator","parsed","eventize","secret","onListeners","$this","property","events","callback","context","on","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","Neuro","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","values","keys","indices","NeuroCollection","addAll","NeuroModelCollection","remoteData","NeuroQuery","whereProperties","whereValue","whereEquals","where","listen","sync","NeuroRemoteQuery","query","status","Status","Pending","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","NeuroRelationCollection","relator","Online","Offline","checkNeuro","cached","callbackContext","all","getModels","boot","input","putRemoteData","bootCollection","instantiate","$save","$key","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","fetch","buildKeyFromInput","instance","getModel","buildObjectFromKey","$set","$refresh","grabModel","methods","q","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","encode","data","decode","rawData","ready","persistent","onReadyRemove","onReady","invoked","checkModel","result","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","hasFields","exists","sort","revisionFunction","ar","br","comparatorFunction","decoded","revisionCompare","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","slice","RemovePending","Removed","SavePending","refresh","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","filter","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Reset","resort","add","delaySort","removing","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","first","lastWhere","last","aggregate","process","getResult","num","sum","avg","total","countWhere","met","count","pluck","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","rebuild","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","destroy","Success","Failure","Ready","clearPending","onSuccess","onFailure","that","error","next","finished","interrupts","run","finish","tryNext","setNext","insertNext","type","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","changes","saving","publish","clearLocal","markSynced","handleData","saveNow","publishing","Store","Key","Keys","auto","getDefaults","field","pendingLoads","pendingRemoteDatas","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","remotes","handleLoad","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","belongsTo","isRelatedFactory","initial","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","collection","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleLazyLoad","bulk","existing","given","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copyFunction(x)\n{\n  return function() {\n    return x.apply( this, arguments );\n  };\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isString( numbers ) )\n  {\n    return function resolveNumber(model)\n    {\n      if ( isNumber( model ) )\n      {\n        return model;\n      }\n      else if ( isValue( model ) )\n      {\n        return parseFloat( model[ numbers ] );\n      }\n    };\n  }\n  else if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isString( properties ) )\n  {\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperty(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolveProperty(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else\n  {\n    return function resolveProperty(model)\n    {\n      return model;\n    }\n  }\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  if ( isObject( properties ) )\n  {\n    return function where(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( isValue( value ) )\n    { \n      return function where(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function where(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function where(model)\n    {\n      return true;\n    };\n  }\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    return function has(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function has()\n    {\n      return true;\n    };\n  }\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    var $init = model.prototype.$init;\n\n    model.prototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      applyEventListeners( this, modelEvents );\n    };\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      \n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  // this.models = new NeuroModelCollection();\n  this.models = new NeuroMap();\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  summarize:            function(model) { return model.$key(); }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br );\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst ); // TODO remove\n    // this.models.setComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      this.summarize = function(model)\n      {\n        return isValue( model ) ? model[ summarize ] : model;\n      };\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n    // this.models.resort(); TODO add\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n    // return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      // db.models.clear();\n      db.models.reset();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys; // TODO ()\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values; // TOOD -.values\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Reset:          'reset',\n  Changes:        'add adds sort remote reset'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, comparatorNullsFirst)\n  {\n    this.comparator = createComparator( comparator, comparatorNullsFirst );\n    this.resort();\n  },\n\n  isSorted: function()\n  {\n    return isSorted( this.comparator, this );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, i, removing] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(property)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(numbers, process, getResult)\n  {\n    var resolver = createNumberResolver( numbers );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var num = resolver( this[ i ] );\n\n      if ( isNumber( num ) )\n      {\n        process( num );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( numbers, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( numbers, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue += reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    var arr = [];\n    arr.push.apply( arr, this );\n    return arr;\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.constructor.create();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.constructor.create();\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      this.map.reset();\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.database.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          this.map.put( parsed.$key(), parsed );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Reset, [this] );\n      this.resort();\n    }\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.database.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, input, removing] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      this[ i ].$set( props, value, remoteData );\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      this[ i ].$save();\n    }\n\n    this.resort();\n  }\n\n});","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.init( database );\n  this.where = createWhere( whereProperties, whereValue, whereEquals );\n  this.listen();\n  this.sync();\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  listen: function()\n  {\n    this.onModelAdd = copyFunction( this.handleModelAdded );\n    this.onModelRemoved = copyFunction( this.handleModelRemoved );\n    this.onModelUpdated = copyFunction( this.handleModelUpdated );\n\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd, this );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved, this );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated, this );\n  },\n\n  sync: function()\n  {\n    var models = this.database.getModels();\n\n    this.map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( this.where( model ) )\n      {\n        this.map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  },\n\n  destroy: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Pending;\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:  0,\n  Success:  1,\n  Failure:  2\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.off( NeuroRemoteQuery.Events.Ready );\n      this.off( NeuroRemoteQuery.Events.Success );\n      this.off( NeuroRemoteQuery.Events.Failure );\n    }\n\n    this.database.rest.query( this.query, this.onSuccess(), this.onFailure() );\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n  },\n\n  onSuccess: function()\n  {\n    var that = this;\n\n    return function(models)\n    {\n      that.status = NeuroRemoteQuery.Status.Success;\n      that.reset( models, true );\n      that.trigger( NeuroRemoteQuery.Events.Success, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  },\n\n  onFailure: function()\n  {\n    var that = this;\n\n    return function(models, error)\n    {\n      that.status = NeuroRemoteQuery.Status.Failure;\n      that.trigger( NeuroRemoteQuery.Events.Failure, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  }\n\n});","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( isEmpty( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live(\n    {\n      op:     NeuroDatabase.Live.Save,\n      model:  model.$publish,\n      key:    model.$key()\n    });\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n    \n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated ); // TODO\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related ); // TODO\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation, remoteData ), this, remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.model )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var collection = new NeuroRelationCollection( relatedDatabase, model, this );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: collection.map,\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated ); // TODO\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var collection = new NeuroRelationCollection( relatedDatabase, model, this );\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: collection.map,\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this, remoteData );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated ); // TODO\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this, remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.init( database );\n  this.model = model;\n  this.relator = relator;\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.getModels();\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    return db.putRemoteData( input );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.bootCollection = function( input )\n  {\n    return new NeuroModelCollection( db, input, true );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.getModel( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.getModel( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    q.sync();\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n\n  global.Neuro.createWhere = createWhere;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}