{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","evaluate","copy","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","charAt","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","localeCompare","createComparator","eventize","target","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","max","slice","trigger","e","$on","$once","$after","$off","$trigger","Neuro","options","database","NeuroDatabase","model","Function","className","init","debug","Events","CREATION","all","getModels","create","inst","$save","cache","name","models","NeuroMap","initialized","pendingRefresh","keySeparator","Defaults","localLoaded","remoteLoaded","remoteOperations","afterOnline","rest","store","live","handlePublish","setComparator","setRevision","revision","relations","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveLocal","reset","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","get","checkNeuro","neuro","callbackContext","cached","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_PRESAVE","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","method","data","success","failure","put","key","record","remove","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","checkModel","result","parseModel","fromStorage","buildKeyFromInput","has","putRemoteData","removeKey","buildKey","fields","buildKeys","join","$key","buildKeyFromArray","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","encoded","decoded","decode","revisionCompare","$saved","current","$toJSON","conflicts","conflicted","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","instantiate","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","loadRemote","refresh","onLocalError","autoRefresh","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","getModel","op","encode","rawData","save","UpdateAndSave","CreateAndSave","Removed","$pendingSave","Created","RemoteRemove","$init","$operation","$relations","$set","$reset","loadRelations","databaseRelations","$getRelation","def","defaults","defaultValue","evaluatedValue","set","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$callRelationFunction","$remove","$exists","functionName","OperationType","operation","queue","execute","forSaving","$keys","$isSaved","$isSavedLocally","$isNew","$getChanges","saved","index","removeAt","lastValue","pop","lastKey","size","filter","dest","out","v","reverse","half","ceil","rebuildIndex","partition","left","right","pivot","map","floor","j","qsort","l","next","finished","run","finish","tryNext","insertNext","onSuccess","arguments","onFailure","previousValue","finishRemove","handleOnline","saving","handleData","Store","None","Key","Keys","field","auto","discriminator","discriminators","discriminated","setNeuro","loadDiscriminators","onInitialized","preSave","postSave","preRemove","postRemove","clearFields","targetFields","changes","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","relatedDatabase","loadAllReady","total","belongsTo","that","initial","loaded","onRemoved","cascade","onSaved","hasForeignKey","handleLoad","clearModel","setRelated","clearForeignKey","setModel","updateForeignKey","setProperty","foreign","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","HASMANY_INIT","isRelatedFactory","pending","delaySorting","delaySaving","removeModel","checkSave","handleModelAdded","relationHandler","handleModel","handleLazyLoad","bulk","isModelArray","addModel","existing","skipCheck","adding","alreadyRemoved","relatedKey","hasManyThrough","through","setThrough","throughs","hasOne","dirty","dontRemove","Relation","Operation"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return x !== undefined && x !== null;\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === void 0)\n  {\n    return x;\n  }\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n  if (isFunction(x) || typeof x !== 'object' || x === null)\n  {\n    return x;\n  }\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n  if (isRegExp(x))\n  {\n    return x;\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' || !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' || !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        return compare( b[ comparator ], a[ comparator ] );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        return compare( a[ comparator ], b[ comparator ] );\n      };\n    }\n  }\n\n  return null;\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          callback[0].apply( callback[1], args );  \n        }\n      }\n      \n      if ( clear )\n      {\n        if ( eventListeners.length !== max )\n        {\n          listeners[ event ] = eventListeners.slice( max );  \n        }\n        else\n        {\n          delete listeners[ event ];  \n        }\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/*\nnew Neuro({\n  name: 'name',\n  api: 'http://api/name',\n  pubsub: 'http://url:port',\n  channel: 'houseid',\n  token: 'userid',\n  key: 'id',\n  fields: ['id', 'name', 'updated_at'],\n//  encode: function() {},\n//  decode: function() {}\n});\n*/\n\nfunction Neuro(options)\n{\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + options.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Events.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  model.all = function()\n  {\n    return database.getModels();\n  };\n\n  model.create = function(props)\n  {\n    var inst = new model( props );\n    inst.$save();\n    return inst;\n  };\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( 'initialized', [model] );\n\n  return model;\n}\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro(neuro)\n      {\n        if ( neuro.name === name || neuro.className === name )\n        {\n          callback.call( callbackContext, neuro );\n\n          Neuro.off( 'initialized', checkNeuro );\n        }\n      }\n\n      Neuro.on( 'initialized', checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  transfer( options, this );\n\n  this.models = new NeuroMap();\n\n  this.initialized = false;\n  this.pendingRefresh = false;\n\n  this.keySeparator = options.keySeparator || NeuroDatabase.Defaults.keySeparator;\n\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n\n  this.rest = Neuro.rest( this );\n  this.store = Neuro.store( this );\n  this.live = Neuro.live( this, this.handlePublish( this ) );\n\n  this.setComparator( this.comparator );\n  this.setRevision( this.revision );\n\n  this.relations = {};\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      this.relations[ name ] = relation;\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuroDatabase.Defaults = \n{\n  keySeparator: '/'\n};\n\nNeuroDatabase.prototype =\n{\n\n  //\n  toString: function(model) \n  {\n    return '';\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, true );\n\n      if ( result !== false )\n      {\n        callback.call( callbackContext, result );\n      }\n\n      return result;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n\n    if ( !isValue( input ) )\n    {\n      return db.remoteLoaded ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input, undefined, undefined, fromStorage );\n    }\n    else if ( db.remoteLoaded )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (a[ revision ] - b[ revision ]) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator)\n  {\n    this.comparatorFunction = createComparator( comparator );\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Events.SAVE_OLD_REVISION, db, model, encoded );\n\n        return;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( db.cache !== false )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      if ( db.cache !== false )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache !== false )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === false )\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote !== false && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === false )\n    {\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Events.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Events.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Events.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Events.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Events.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n    \n    db.rest( 'GET', undefined, undefined, onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n        var key = model.$key();\n\n        mapped[ key ] = model;\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Events.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Events.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Events.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Events.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Events.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Converts properties in data into their storable form\n  encode: function(data)\n  {\n    return data;\n  },\n\n  // Converts properties in rawData from their storable form to their desired\n  decode: function(rawData)\n  {\n    return rawData;\n  },\n\n  // Save the model\n  save: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    if ( db.cache === false )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal );\n    }\n  },\n\n  // Remove the model \n  remove: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    // TODO Add Debug here?\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    if ( db.cache === false )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value; \n      }\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue)\n  {\n    this.$set( setProperties, setValue );\n\n    this.$callRelationFunction( 'preSave' );\n\n    this.$db.save( this );\n\n    this.$callRelationFunction( 'postSave' );\n  },\n\n  $remove: function()\n  {\n    if ( this.$exists() )\n    {\n      this.$callRelationFunction( 'preRemove' );\n\n      this.$db.remove( this );\n\n      this.$callRelationFunction( 'postRemove' );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $callRelationFunction: function(functionName)\n  {\n    var databaseRelations = this.$db.relations;\n\n    for ( var name in databaseRelations )\n    {\n      databaseRelations[ name ][ functionName ]( this );\n    }\n  },\n\n  $addOperation: function(OperationType) \n  {\n    var operation = new OperationType( this );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function()\n  {\n    var saved = this.$saved;\n    var encoded = this.$toJSON( true );\n    var fields = this.$db.fields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model)\n  {\n    this.model = model;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model );\n    }\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroRemoveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Events.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL, model );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$pendingSave = false;\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( 'model-removed', [model] );\n      \n      db.updated();\n\n      model.$trigger('removed');\n    }\n\n    db.store.remove( key, this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest( 'DELETE', model, undefined, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_MISSING, this, key, model );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Events.REMOVE_ERROR, this, status, key, model );\n    } \n    else \n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Events.REMOVE_OFFLINE, this, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_REMOTE, this, key, model );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Events.REMOVE_PUBLISH, this, key, model );\n\n    db.live({\n      op: NeuroDatabase.Live.Remove,\n      key: key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_RESUME, this, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_LOCAL_DELETED, this, model );\n\n      return this.finish();\n    }\n\n    // Fill the key if need be\n    var key = model.$key();\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_LOCAL, this, model );\n\n    this.tryNext( NeuroSaveRemote );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_LOCAL_ERROR, this, model, e );\n\n    this.tryNext( NeuroSaveRemote );\n  }\n\n});\n","function NeuroSaveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n  }\n\n});","function NeuroSaveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var saving = this.saving = model.$getChanges( true );\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( saving ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    db.rest( model.$saved ? 'PUT' : 'POST', model, saving, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_REMOTE, this, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Events.SAVE_CONFLICT, this, data, model );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Events.SAVE_UPDATE_FAIL, this, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Events.SAVE_ERROR, this, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Events.SAVE_OFFLINE, this, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    for (var prop in data)\n    {\n      if ( !(prop in saving ) )\n      {\n        saving[ prop ] = data[ prop ];\n      }\n    }\n\n    Neuro.debug( Neuro.Events.SAVE_VALUES, this, saving, model );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( db.cache === false )\n      {\n        model.$saved = {};\n      }\n      else\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Events.SAVE_PUBLISH, this, saving, model );\n\n    db.live({\n      op: NeuroDatabase.Live.Save,\n      model: saving,\n      key: this.key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$pendingSave )\n    { \n      model.$pendingSave = false;\n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Events.SAVE_RESUME, this, model );\n    }\n  }\n\n});","function NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {\n\n};\n\nNeuro.Store = {\n  None: 0,\n  Model: 1,\n  Key: 2,\n  Keys: 3\n};\n\nNeuro.Save = {\n  None: 0,\n  Model: 4\n};\n\nNeuroRelation.prototype =\n{\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.store = options.store || Neuro.Store.None;\n    this.save = options.save || Neuro.Save.None;\n    this.auto = !!options.auto;\n    this.property = !!options.property;\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n\n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If serialize is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    \n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  preSave: function(model)\n  {\n\n  },\n\n  postSave: function(model)\n  {\n\n  },\n\n  preRemove: function(model)\n  {\n\n  },\n\n  postRemove: function(model)\n  {\n\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        } \n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.BELONGSTO_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade !== false )\n        {\n          model.$remove();\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !this.hasForeignKey( model, relation.model ) && this.cascade !== false )\n        {\n          model.$remove();\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !this.hasForeignKey( model, related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  hasForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return propsMatch( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = options.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( options.comparator );\n    this.cascadeRemove = !!options.cascadeRemove;\n    this.cascadeSave = !!options.cascadeSave;\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Events.HASMANY_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    var relationHandler = this;\n    \n    related.relate = function(input)\n    {\n      relationHandler.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      relationHandler.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return relationHandler.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      target.put( key, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      target.remove( key );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = options.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = options.local || ( database.name + '_' + database.key );\n\n    this.comparator = createComparator( options.comparator );\n    this.cascadeRemove = !!options.cascadeRemove;\n    this.cascadeSave = !!options.cascadeSave;\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Events.HASMANY_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n  },\n\n  // if initial is given, load related\n  // else, load through\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelated( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      var source = relatedDatabase.models;\n        \n      relatedDatabase.ready( this.handleLazyLoad( relation, source ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, source)\n  {\n    return function (relatedDatabase)\n    {\n      var map = source.filter( relation.isRelated );\n      var models = map.values;\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      target.put( key, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      target.remove( key );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      this.clearForeignKey( related );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    var foreign = this.foreign;\n\n    this.clearFields( related, foreign );\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  isRelated: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.HASONE_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearModel( relation, true );\n        this.clearForeignKey( model );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Events.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearModel( relation );\n          this.clearForeignKey( model );\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Events.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade !== false )\n      {\n        Neuro.debug( Neuro.Events.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, dontRemove)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.HASONE_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        relation.model.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.HASONE_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Events = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_PRESAVE: 68,       // NeuroModel, relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72         // NeuroModel, relation, [NeuroModel]\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  return function (method, model, data, success, failure)\n  {\n    // success ( data )\n    // failure ( data, status )\n    \n    failure( {}, 0 );\n  };\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      // implement\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      // implement\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      // implement\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Events.ONLINE );\n  Neuro.trigger('online');\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Events.OFFLINE );\n  Neuro.trigger('offline');\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( 'online', Neuro.setOnline, false );\n    window.addEventListener( 'offline', Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}