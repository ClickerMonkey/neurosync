{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","parsed","addDynamicProperty","modelPrototype","property","definition","get","set","Object","defineProperty","configurable","enumerable","$init","this","arguments","lastCalculatedValue","handleChange","current","$after","Events","Changes","parseEventListeners","events","callback","secret","out","map","on","once","after","listeners","when","invoke","context","eventType","subcallback","applyEventListeners","l","eventize","onListeners","$this","offListeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$off","$trigger","Neuro","cache","database","NeuroDatabase","model","Function","className","methods","dynamic","init","debug","Debugs","CREATION","all","getModels","create","Initialized","Defaults","key","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","remoteOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","databaseEvents","modelEvents","eventName","databaseEventString","modelEventString","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveCache","cascade","reset","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","checkNeuro","cached","callbackContext","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","encode","data","decode","rawData","$key","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","fromStorage","checkModel","result","parseModel","hasRemote","buildKeyFromInput","has","putRemoteData","instantiate","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","decoded","revisionCompare","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","refresh","onLocalError","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","getModel","op","$save","relationName","Cascade","UpdateAndSave","CreateAndSave","Local","Removed","$pendingSave","Created","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$operation","$relations","$set","$reset","databaseRelations","$getRelation","def","evaluatedValue","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","filter","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Rest","Remote","next","finished","canCascade","run","finish","tryNext","insertNext","onSuccess","onFailure","previousValue","finishRemove","handleOnline","changes","saving","publishing","handleData","Store","Key","Keys","auto","getDefaults","field","pendingLoads","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","handleLoad","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","total","belongsTo","that","isRelatedFactory","onKeyUpdate","handleKeyUpdate","initial","loaded","onRemoved","clearRelated","onSaved","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleModelAdded","handleLazyLoad","bulk","existing","given","removing","adding","addModel","skipCheck","alreadyRemoved","hasManyThrough","through","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","callSave","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","cascde","dontRemove","Relation","Operation","Map"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  model.all = function()\n  {\n    return database.getModels();\n  };\n\n  model.create = function( props )\n  {\n    return database.create( props );\n  };\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Event Listeners\n  this.databaseEvents = [];\n  this.modelEvents = [];\n\n  if ( isObject( this.events ) )\n  {\n    for ( var eventType in this.events )\n    {\n      var callback = this.events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, this.databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, this.modelEvents );\n      }\n    }\n  }\n\n  applyEventListeners( this, this.databaseEvents );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  dynamic:              false,\n  methods:              false,\n  events:               false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, fromStorage)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, fromStorage !== false );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      if ( fromStorage )\n      { \n        return db.putRemoteData( input, undefined, undefined, true ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (compare( a[ revision ], b[ revision ] )) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          // TODO\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Create the model\n  create: function(props)\n  {\n    var db = this;\n\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n    var key = model.$key();\n    var cascade = isValue( cascade ) ? cascade : Neuro.Cascade.All;\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    // If we're not supposed to cascade this anywhere, stop!\n    if ( !cascade )\n    {\n      return;\n    }\n\n    // If we're not storing locally OR we're not cascading locally, jump directly to remote.\n    // TODO ensure cascade rest, otherwise call live.\n    if ( db.cache === Neuro.Cache.None || !(cascade & Neuro.Cascade.Local) )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote, cascade );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal, cascade );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n    var key = model.$key();\n    var cascade = isValue( cascade ) ? cascade : Neuro.Cascade.All;\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    // If we're not supposed to cascade this anywhere, stop!\n    if ( !cascade )\n    {\n      return;\n    }\n\n    // If we're not storing locally OR we're not cascading locally, jump directly to remote.\n    // TODO ensure cascade rest, otherwise call live.\n    if ( db.cache === Neuro.Cache.None || !(cascade & Neuro.Cascade.Local) )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote, cascade );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal, cascade );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n\n    // Load Global Model Event Listeners\n    applyEventListeners( this, this.$db.modelEvents );\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ] );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 && isNumber( cascade ) ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ? setProperties : Neuro.Cascade.All ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isValue( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(type)\n  {\n    return !!(this.cascade & type);\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveCache' ), NeuroRemoveCache,\n{\n\n  run: function(db, model)\n  {\n    model.$pendingSave = false;\n\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Rest )  )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$deleted = true;\n    model.$pendingSave = false;\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      \n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live({\n        op: NeuroDatabase.Live.Remove,\n        key: key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote, this.cascade );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Fill the key if need be\n    var key = model.$key();\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n\n      if ( model.$saved )\n      {\n        model.$local.$saved = model.$saved;\n      }\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      this.tryNext( NeuroSaveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) )\n    {\n      this.tryNext( NeuroSaveRemote, this.cascade );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var encoded = this.encoded = model.$toJSON( true );\n    var changes = this.changes = model.$getChanges( encoded );\n    var saving = this.saving = db.fullSave ? encoded : changes;\n    var publishing = this.publishing = db.fullPublish ? encoded : changes;\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( changes ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    if ( model.$saved )\n    {\n      db.rest.update( model, saving, this.success(), this.failure() );\n    }\n    else\n    {\n      db.rest.create( model, saving, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n    var publishing = this.publishing;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    if ( !isEmpty( data ) )\n    {\n      transfer( data, saving );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( model.$local )\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n      else\n      {\n        model.$saved = {};\n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n      db.live({\n        op: NeuroDatabase.Live.Save,\n        model: publishing,\n        key: this.key\n      });\n    }\n\n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$pendingSave )\n    { \n      model.$pendingSave = false;\n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ] );\n    }\n\n    pending.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n    }\n    else\n    {\n      this.handleLoad( model );\n    }\n  },\n\n  handleLoad: function(model)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    Neuro.Cascade.All\n};\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var onKeyUpdate = this.handleKeyUpdate();\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onKeyUpdate: onKeyUpdate,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n\n      model.$off( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  handleKeyUpdate: function()\n  {\n    return function onKeyUpdate(model, related, modelFields, relatedFields)\n    {\n      if ( this.local === modelFields )\n      {\n        var relation = model.$relations[ this.name ];\n\n        if ( relation && related !== relation.model )\n        {\n          this.clearModel( relation );\n          this.setModel( relation, related );\n          this.setProperty( relation );\n        }        \n      }\n    };\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.All,\n  cascadeSave:          Neuro.Cascade.All\n};\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.All,\n  cascadeSave:          Neuro.Cascade.None\n};\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n  \n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var adding = this.finishAddModel( relation, related, skipCheck );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation ), this, false );\n  },\n\n  onAddThrough: function(relation)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, true );\n    };\n  },\n\n  addModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through ), this );\n  },\n\n  onAddModelFromThrough: function(relation, through)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through );\n        this.finishAddModel( relation, related );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, callSave)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callSave )\n      {\n        through.$save( this.cascadeSave );\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, skipCheck)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    Neuro.Cascade.None\n};\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation, true );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation, false, this.cascde );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation, dontRemove)\n  {\n    this.clearModel( relation, dontRemove );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, dontRemove, cascade)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        related.$remove( cascade );\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [], 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {}, 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {}, 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {}, 200 );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}