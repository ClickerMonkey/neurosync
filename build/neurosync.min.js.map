{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","files.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroSearch.js","NeuroSearchPaged.js","NeuroTransaction.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","NeuroShard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","find.js","get.js","grab.js","grabAll.js","methods.js","query.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","where.js","Neuro.debug.js","Neuro.rest.js","Neuro.store.js","Neuro.live.js","Neuro.offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","equals","equality","Neuro","testProp","expectedProp","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","secret","defaultValue","option","valued","copy","$options","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","collapse","cleanFunctions","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","value","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","Events","Options","database","NeuroDatabase","Function","className","Model","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","input","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","forSaving","cached","save","store","fileProperties","RemoteSave","$addOperation","NeuroSaveLocal","Cascade","Local","Defaults","key","unshift","keys","models","NeuroModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","createRest","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","init","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","NeuroMap","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroSearch","NeuroSearchPaged","NeuroTransaction","cascade","operation","completed","operations","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","NeuroShard","AP","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkNeuro","Online","Offline","None","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","files","fieldOption","type","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","methods","text","dataURL","base64","resource","capacity","size","types","fileToValue","find","firstWhere","grabModel","grabAll","ready","q","sync","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","put","record","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","resolveModel","resolveModels","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","clean","overwrite","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","transactNone","transact","txn","$remove","$exists","$cancel","$clone","f","cloneKey","relationName","preClone","clone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","$method","$results","$concurrent","$run","$encode","$handleSuccess","$handleFailure","$ready","$success","$failure","concurrentCount","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","page_size","$setPageSize","$getPageSize","page_index","$getPageOffset","$setTotal","$getTotal","transaction","RemoteSuccess","LocalSuccess","Any","handled","already","offs","createHandler","offline","isFinished","finish","then","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","changes","end","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","pendingInitials","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","initials","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","Relation","Operation","Transaction","Search","SearchPaged","Map","Collection","ModelCollection","Query","RemoteQuery","Page","HasOne","BelongsTo","HasMany","HasManyThrough","HasRemote"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Neuro.createWhere\n * @see Neuro.saveWhere\n */\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Neuro.equals\n * @see Neuro.equalsStrict\n * @see Neuro.equalsCompare\n */\n\n/**\n * A function for comparing two values to determine if one is greater or lesser\n * than the other or if they're equal.\n *\n * ```javascript\n * comparisonCallback( a, b ) < 0 // a < b\n * comparisonCallback( a, b ) > 0 // a > b\n * comparisonCallback( a, b ) == 0 // a == b\n * ```\n *\n * @callback comparisonCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Number} -\n *    0 if the two values are considered equal, a negative value if `a` is\n *    considered less than `b`, and a positive value if `a` is considered\n *    greater than `b`.\n * @see Neuro.compare\n * @see Neuro.compareNumbers\n */\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Neuro.createPropertyResolver\n */\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n var AP = Array.prototype;\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Neuro.isDefined(); // false\n * Neuro.isDefined(0); // true\n * Neuro.isDefined(true); // true\n * Neuro.isDefined(void 0); // false\n * Neuro.isDefined(undefined); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Neuro.isFunction(); // false\n * Neuro.isFunction(parseInt); // true\n * Neuro.isFunction(2); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n *\n * ```javascript\n * var Task = Neuro({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Neuro.isNeuro( Task ); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Neuro.isString(); // false\n * Neuro.isString('x'): // true\n * Neuro.isString(1); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Neuro.isNumber(); // false\n * Neuro.isNumber('x'): // false\n * Neuro.isNumber(1); // true\n * Neuro.isNumber(NaN); // false\n * Neuro.isNumber(Infinity); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Neuro.isBoolean(); // false\n * Neuro.isBoolean('x'): // false\n * Neuro.isBoolean(1); // false\n * Neuro.isBoolean(true); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Neuro.isDate(); // false\n * Neuro.isDate('x'): // false\n * Neuro.isDate(1); // false\n * Neuro.isDate(true); // false\n * Neuro.isDate(new Date()); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Neuro.isRegExp(); // false\n * Neuro.isRegExp('x'): // false\n * Neuro.isRegExp(1); // false\n * Neuro.isRegExp(true); // false\n * Neuro.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Neuro.isArray(); // false\n * Neuro.isArray('x'): // false\n * Neuro.isArray(1); // false\n * Neuro.isArray([]); // true\n * Neuro.isArray(Neuro.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Neuro.isObject(); // false\n * Neuro.isObject('x'): // false\n * Neuro.isObject(1); // false\n * Neuro.isObject([]); // true\n * Neuro.isObject({}); // true\n * Neuro.isObject(null); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Neuro.toArray([1, 2, 3]); // [1, 2, 3]\n * Neuro.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Neuro\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Neuro.isValue(); // false\n * Neuro.isValue('x'): // true\n * Neuro.isValue(1); // true\n * Neuro.isValue([]); // true\n * Neuro.isValue({}); // true\n * Neuro.isValue(null); // false\n * Neuro.isValue(void 0); // false\n * Neuro.isValue(undefined); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Neuro.indexOf([1, 2, 3], 1); // 0\n * Neuro.indexOf([1, 2, 3], 4); // false\n * Neuro.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Neuro\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Neuro.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Neuro\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Neuro\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Neuro\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Neuro.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      target[ prop ] = options[ prop ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\n/**\n * Returns an instance of {@link Neuro.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Neuro.collect(1, 2, 3, 4);\n * Neuro.collect([1, 2, 3, 4]); // same as above\n * Neuro.collect();\n * Neuro.collect([]); // same as above\n * ```\n *\n * @memberof Neuro\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Neuro.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Neuro\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in Neuro.NumberResolvers )\n  {\n    return Neuro.NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Neuro\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model[ properties ];\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nNeuro.Wheres = {};\n\n/**\n * Saves a function created with {@link Neuro.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Neuro.saveWhere('whereName', 'field', true);\n * Neuro.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Neuro\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Neuro.createWhere}\n * @param {Any} [value] -\n *    See {@link Neuro.createWhere}\n * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n *    See {@link Neuro.createWhere}\n * @see Neuro.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Neuro.createWhere('field', true);  // when an object has property where field=true\n * Neuro.createWhere('field'); // when an object has the property named field\n * Neuro.createWhere(function(){}); // a function can be given which is immediately returned\n * Neuro.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Neuro.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Neuro.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Neuro.createWhere(); // always returns true\n * ```\n *\n * @memberof Neuro\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Neuro.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger`\n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   *\n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   *\n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};\n","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the\n * constructor for creating instances of the Neuro object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  Neuro.trigger( Neuro.Events.Options, [options] );\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  if ( Neuro.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Neuro.unloaded.push( database );\n  }\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.autoload = false;\n\nNeuro.unloaded = [];\n\nNeuro.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Neuro.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Neuro.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n\nNeuro.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nNeuro.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuro.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, NeuroDatabase.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, NeuroDatabase.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || NeuroDatabase.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Neuro.trigger( Neuro.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nNeuro.fileProcessors = {};\n\nNeuro.Events.FilesNotSupported = 'files-not-supported';\nNeuro.Events.FileTooLarge = 'file-too-large';\nNeuro.Events.FileWrongType = 'file-wrong-type';\nNeuro.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nNeuro.addFileProcessor = function(name, methods)\n{\n  Neuro.fileProcessors[ name ] = methods;\n};\n\nNeuro.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Neuro.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Neuro.trigger( Neuro.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Neuro.trigger( Neuro.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Neuro.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Neuro.trigger( Neuro.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Neuro.trigger( Neuro.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Neuro.trigger( Neuro.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Neuro.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( NeuroModel.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( NeuroSaveLocal, Neuro.Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","\n\nfunction NeuroDatabase(options)\n{\n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new NeuroModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Neuro.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Neuro.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Neuro.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nNeuroDatabase.Events =\n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( NeuroModel.Events.RemoteGets, function()\n          {\n            if ( !grabbed )\n            {\n              grabbed = true;\n\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              callback.call( callbackContext, result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          grabbed = true;\n          callback.call( callbackContext, result );\n        }\n      }\n\n      return grabbed ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === NeuroModel.Status.RemovePending )\n      {\n        Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( NeuroRemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== NeuroModel.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( Neuro.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(models, status)\n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Neuro.debug( Neuro.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Neuro.transactNone( cascade, this, 'save' );\n    }\n\n    return Neuro.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Neuro.transactNone( cascade, this, 'remove' );\n    }\n\n    return Neuro.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );\n","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Neurosync.\n *\n * A collection of any type can be created via {@link Neuro.collect}.\n *\n * ```\n * var nc = new Neuro.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Neuro\n * @alias Collection\n * @extends Array\n * @see Neuro.collect\n */\nfunction NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\n/**\n * The events a collection can emit.\n *\n * {@link Neuro.Collection#event:add Add}\n * {@link Neuro.Collection#event:adds Adds}\n * {@link Neuro.Collection#event:sort Sort}\n * {@link Neuro.Collection#event:remove Remove}\n * {@link Neuro.Collection#event:removes Removes}\n * {@link Neuro.Collection#event:updates Updates}\n * {@link Neuro.Collection#event:reset Reset}\n * {@link Neuro.Collection#event:cleared Cleared}\n * {@link Neuro.Collection#event:changes Changes}\n *\n * @static\n */\nNeuroCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Neuro.Collection#add\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Neuro.Collection#add\n   * @see Neuro.Collection#insertAt\n   * @see Neuro.ModelCollection#add\n   * @see Neuro.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Neuro.Collection#adds\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Neuro.Collection#addAll\n   * @see Neuro.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Neuro.Collection#sort\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Neuro.Collection#sort\n   * @see Neuro.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Neuro.Collection#remove\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Neuro.Collection#remove\n   * @see Neuro.Collection#removeAt\n   * @see Neuro.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Neuro.Collection#removes\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Neuro.Collection#removeAll\n   * @see Neuro.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Neuro.Collection#updates\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Neuro.ModelCollection#update\n   * @see Neuro.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Neuro.Collection#reset\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Neuro.FilteredCollection#sync\n   * @see Neuro.ModelCollection#reset\n   * @see Neuro.Query#sync\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Neuro.Collection#cleared\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Neuro.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Neuro.Collection#changes\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, NeuroCollection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Neuro.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   */\n  sort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Neuro.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Neuro.createWhere}.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {String|Object|Array|whereCallback} [whereProperties] -\n   *    See {@link Neuro.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Neuro.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Neuro.createWhere}\n   * @return {Neuro.Collection} -\n   *    The newly created live filtered view of this collection.\n   * @see Neuro.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Neuro.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Neuro.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {String|Object|Array|whereCallback} [whereProperties] -\n   *    See {@link Neuro.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Neuro.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Neuro.createWhere}\n   * @param {Array} [out=new this.constructor()] -\n   *    The array to place the elements that match.\n   * @return {Neuro.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Neuro.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * var b = Neuro.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=new this.constructor()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || new this.constructor();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * var b = Neuro.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=new this.constructor()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || new this.constructor();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * var b = Neuro.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=new this.constructor()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || new this.constructor();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#add\n   * @emits Neuro.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any...} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Neuro.Collection#add\n   * @emits Neuro.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any...} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Neuro.Collection#add\n   * @emits Neuro.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#adds\n   * @emits Neuro.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#add\n   * @emits Neuro.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Neuro.Collection#remove\n   * @emits Neuro.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( NeuroCollection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Neuro.Collection#remove\n   * @emits Neuro.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( NeuroCollection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Neuro.Collection#remove\n   * @emits Neuro.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Neuro.Collection#remove\n   * @emits Neuro.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Neuro.Collection#removes\n   * @emits Neuro.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Neuro.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Neuro.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Neuro.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Neuro.createWhere}\n   * @param {Array} [out=new this.constructor()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#removes\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || new this.constructor();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {Any...} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Neuro.Collection#removes\n   * @emits Neuro.Collection#adds\n   * @emits Neuro.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.splice.call( arguments, 0, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( NeuroCollection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      var n = this.length;\n      var half = Math.floor( n / 2 );\n\n      for (var i = 0; i < half; i++)\n      {\n        var k = n - i - 1;\n        var a = this[ i ];\n        this[ i ] = this[ k ];\n        this[ k ] = a;\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Neuro.equals\n   * @see Neuro.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Neuro.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Neuro.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Neuro.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Neuro.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Neuro.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Neuro.createPropertyResolver\n   * @see Neuro.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Neuro.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Neuro.createPropertyResolver\n   * @see Neuro.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Neuro.createWhere\n   */\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Neuro.createPropertyResolver\n   * @see Neuro.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Neuro.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Neuro.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Neuro.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Neuro.createPropertyResolver\n    * @see Neuro.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Neuro.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Neuro.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Neuro.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Neuro.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Neuro.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Neuro.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Neuro.createWhere}.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Neuro.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Neuro.createPropertyResolver\n   * @see Neuro.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Neuro.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Neuro.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Neuro.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Neuro.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Neuro.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Neuro.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroCollection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Neuro.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Neuro.Collection#event:changes\n */\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );\n","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});\n","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection,\n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.sort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.sort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  }\n\n});\n","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery,\n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  parse: function(models)\n  {\n    return models;\n  },\n\n  handleSuccess: function()\n  {\n    var models = this.parse.apply( this, arguments );\n\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n  }\n\n});\n","\nfunction NeuroSearch(database, options)\n{\n  this.$init( database, options );\n}\n\nNeuroSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Defaults =\n{\n  $method:     'create'\n};\n\nNeuroSearch.prototype =\n{\n\n  $init: function(database, options)\n  {\n    applyOptions( this, options, NeuroSearch.Defaults, true );\n\n    this.$db = database;\n    this.$results = new NeuroModelCollection( database );\n    this.$status = NeuroSearch.Status.Success;\n    this.$concurrent = 0;\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n\n    this.$status = NeuroSearch.Status.Pending;\n    this.$concurrent++;\n\n    var success = bind( this, this.$handleSuccess( this.$concurrent ) );\n    var failure = bind( this, this.$handleFailure( this.$concurrent ) );\n\n    switch (this.$method) {\n      case 'create':\n        this.$db.rest.create( this, encoded, success, failure );\n        break;\n      case 'update':\n        this.$db.rest.update( this, encoded, success, failure );\n        break;\n      case 'query':\n        this.$db.rest.query( encoded, success, failure );\n        break;\n      default:\n        throw 'Invalid search method: ' + this.$method;\n    }\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Success, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Failure, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(concurrentCount)\n  {\n    return function onSuccess()\n    {\n      if (this.$concurrent === concurrentCount)\n      {\n        var models = this.$decode.apply( this, arguments );\n\n        this.$concurrent = 0;\n        this.$status = NeuroSearch.Status.Success;\n        this.$results.reset( models, true );\n        this.$trigger( NeuroSearch.Events.Ready, [this] );\n        this.$trigger( NeuroSearch.Events.Success, [this] );\n      }\n    };\n  },\n\n  $handleFailure: function(concurrentCount)\n  {\n    return function onFailure()\n    {\n      if (this.$concurrent === concurrentCount)\n      {\n        this.$concurrent = 0;\n        this.$status = NeuroSearch.Status.Failure;\n        this.$trigger( NeuroSearch.Events.Ready, [this] );\n        this.$trigger( NeuroSearch.Events.Failure, [this] );\n      }\n    };\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions(copy(this));\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n};\n\neventize( NeuroSearch.prototype, true );\n","\nfunction NeuroSearchPaged(database, options)\n{\n  this.$init( database, options );\n}\n\nextend( NeuroSearch, NeuroSearchPaged,\n{\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nNeuro.transaction = null;\n\nNeuro.transact = function(cascade, model, operation, func)\n{\n  var transaction = Neuro.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Neuro.transaction = new NeuroTransaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Neuro.transaction = null;\n\n    return transaction;\n  }\n};\n\nNeuro.transactNone = function(cascade, model, operation)\n{\n  return new NeuroTransaction( cascade, model, operation );\n};\n\nfunction NeuroTransaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nNeuroTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\nNeuroTransaction.prototype =\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = NeuroTransaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = NeuroTransaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Neuro.Cascade.Rest )\n      {\n        this.status = NeuroTransaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Neuro.Cascade.Local )\n      {\n        this.status = NeuroTransaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = NeuroTransaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( NeuroTransaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n};\n\neventize( NeuroTransaction.prototype );\n","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );\n","\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype =\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetOffline, [model] );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n    }\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n        \n        model.$trigger( NeuroModel.Events.RemoteRemoveOffline, [model] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    }\n    else\n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online)\n      {\n        Neuro.once( 'online', this.handleOnline, this );\n\n        model.$trigger( NeuroModel.Events.RemoteSaveOffline, [model] );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n\n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});\n","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuroRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.pendingInitials = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var initials = this.pendingInitials;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], initials[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    initials.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, initialValue, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingInitials.push( initialValue );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, initialValue, remoteData );\n    }\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};\n","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","\nNeuro.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new NeuroShard( database );\n\n    transfer( methods, shard );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction NeuroShard(database)\n{\n  this.database = database;\n}\n\nNeuroShard.prototype =\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( query, success, failure )\n  {\n    var shards = this.getShardsForQuery( query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || NeuroDatabase.Defaults.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db );\n\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( NeuroModel.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, NeuroDatabase.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    transfer( methods, model.prototype );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.search = function(options)\n  {\n    return new NeuroSearch( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.searchPaged = function(options)\n  {\n    return new NeuroSearchPaged( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Options, function(options)\n{\n  var shard = options.shard || NeuroDatabase.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Neuro.shard( shard );\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || NeuroDatabase.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || NeuroDatabase.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};\n","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Transaction = NeuroTransaction;\n  global.Neuro.Search = NeuroSearch;\n  global.Neuro.SearchPaged = NeuroSearchPaged;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Relationships */\n  global.Neuro.HasOne = NeuroHasOne;\n  global.Neuro.BelongsTo = NeuroBelongsTo;\n  global.Neuro.HasMany = NeuroHasMany;\n  global.Neuro.HasManyThrough = NeuroHasManyThrough;\n  global.Neuro.HasRemote = NeuroHasRemote;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n\n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n\n  global.Neuro.transfer = transfer;\n  global.Neuro.collapse = collapse;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}