{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","get.js","methods.js","query.js","ready.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","parse","expr","base","valid","parseInt","format","template","createFormatter","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","Online","Offline","checkNeuro","cached","callbackContext","all","boot","putRemoteData","instance","instantiate","$save","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","$refresh","fetchAll","onFinish","refresh","grabModel","methods","q","sync","ready","persistent","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","ignoredFields","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","success","failure","encoded","update","remove","put","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReadyRemove","onReady","invoked","hasData","saving","checkModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","updated","sort","revisionFunction","ar","br","resort","overwrite","decoded","revisionRejected","missingModel","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","preSave","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSave","RemoteSaveFailure","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGets","SavedRemoteUpdate","Blocked","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","def","evaluatedValue","$get","$isDependentsSaved","callbackOnSaved","contextOnSaved","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","Cascade","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","Local","Rest","NoLive","NoRest","Remote","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","run","finish","previousValue","finishRemove","$saving","$publish","liveRemove","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","liveSave","handleData","saveNow","Store","Key","Keys","auto","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","loaded","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","postSave","preRemove","handleLazyLoad","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note, \n * Arrays are considered objects.\n * \n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a \n * string it is split based on the delimiter given. If the variable is an \n * array then it is returned. If the variable is any other type it may result \n * in an error.\n * \n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n * \n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom \n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n * \n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n * \n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n * \n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n * \n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid() \n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n  \n  expr.replace( parse.REGEX, function(prop) \n  {\n    if (!valid) \n    {\n      return;\n    }\n\n    if ( isArray( base ) ) \n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i)) \n      {\n        base = base[ i ];\n      }\n      else \n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) ) \n    {\n      if (prop in base) \n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      } \n      else \n      {\n        valid = false;\n      }\n    } \n    else \n    {\n      valid = false;\n    }\n  });\n  \n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the \n * constructor for creating instances of the Neuro object defined.\n * \n * @namespace \n * @param {Object} options\n *        The options of \n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };  \n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n      \n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(onFinish)\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  preSave: function(model)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    return this.saveToModels( model );\n  },\n\n  // Save the model\n  save: function(model, cascade, existing)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( !existing )\n    {\n      db.models.put( key, model ); \n      db.updated();\n    }\n\n    return existing;\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\n/**\n * An instance\n * \n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaves:          'remote-save remote-save-failure',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoves:        'remote-remove remote-remove-failure',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGets:           'remote-get remote-get-failure',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, remoteData ); \n        }\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        dependent.$once( NeuroModel.Events.RemoteSaves, callbackOnSaved, contextOnSaved );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade : \n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue : \n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    var existing = this.$db.preSave( this );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade, existing );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$db.getKey( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function(models)\n  {\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function() \n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live(\n      {\n        op:   NeuroDatabase.Live.Remove,\n        key:  key\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = \n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = \n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle, \n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n    \n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            this.executeQuery( model );\n          }\n          else\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n      \n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related, cascade)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign, false, cascade );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove && this.cascadeRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( model ), this );\n    }\n\n    // Execute query!\n    this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(model)\n  {\n    return function handleRefresh()\n    {\n      this.executeQuery( model );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related)\n  {\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var instance = db.instantiate();\n\n      instance.$save();\n\n      return instance;\n    }\n\n    var fields = grab( props, db.fields );\n    var instance = db.instantiate( fields );\n    var key = instance.$key();\n    var relations = {};\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    instance.$save( relations );\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(onFinish)\n  {\n    db.refresh( onFinish );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 108,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);"],"sourceRoot":"/source/"}