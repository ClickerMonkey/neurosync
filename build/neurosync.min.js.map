{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroDiscriminatedModelCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroDiscriminatedRelationCollection.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","NeuroRelationCollection.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","get.js","methods.js","query.js","ready.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","func","F","extend","parent","child","override","transfer","factory","args","this","arguments","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyFunction","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","addEventFunction","functionName","events","secret","on","off","callback","context","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","base","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroDiscriminatedModelCollection","discriminator","discriminatorsToModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroDiscriminatedRelationCollection","relator","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","NeuroRelationCollection","Online","Offline","checkNeuro","cached","callbackContext","all","boot","input","putRemoteData","instantiate","$save","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildKeyFromInput","instance","buildObjectFromKey","$set","$refresh","fetchAll","onFinish","refresh","grabModel","methods","q","sync","ready","persistent","currentTime","currentDate","encode","decode","parse","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","ignoredFields","addTimestampField","type","time","timestamps","timeAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReadyRemove","onReady","invoked","hasData","saving","checkModel","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","sort","revisionFunction","ar","br","resort","decoded","revisionRejected","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","RemoteSave","RemoteSaveFailure","LocalRemove","LocalRemoveFailure","RemoteRemove","RemoteRemoveFailure","SavedRemoteUpdate","Blocked","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","discriminatedValue","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","finished","interrupts","run","finish","tryNext","setNext","insertNext","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","publish","clearLocal","markSynced","handleData","saveNow","publishing","Store","Key","Keys","auto","discriminators","discriminatorToModel","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","belongsTo","that","isRelatedFactory","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleLazyLoad","bulk","existing","given","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n}\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copyFunction(x)\n{\n  return function() {\n    return x.apply( this, arguments );\n  };\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      this.summarize = function(model)\n      {\n        return isValue( model ) ? model[ summarize ] : model;\n      };\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(onFinish)\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd = copyFunction( this.handleAdd );\n  this.onAdds = copyFunction( this.handleAdds );\n  this.onRemove = copyFunction( this.handleRemove );\n  this.onRemoves = copyFunction( this.handleRemoves );\n  this.onReset = copyFunction( this.handleReset );\n  this.onUpdates = copyFunction( this.handleUpdates );\n  this.onCleared = copyFunction( this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd, this );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds, this );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove, this );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves, this );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset, this );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates, this );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear, this );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      this.map.reset();\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          this.map.put( parsed.$key(), parsed );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Reset, [this] );\n      this.resort();\n    }\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = this.map.get( key );\n\n      if ( removing )\n      {\n        this.map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","function NeuroDiscriminatedModelCollection(discriminator, discriminatorsToModel, models, remoteData)\n{\n  this.discriminator = discriminator;\n  this.discriminatorsToModel = discriminatorsToModel;\n\n  this.init( null, models, remoteData );\n}\n\nextendArray( NeuroModelCollection, NeuroDiscriminatedModelCollection, \n{\n\n  buildKeyFromInput: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  }\n\n});","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd = copyFunction( this.handleModelAdded );\n  this.onModelRemoved = copyFunction( this.handleModelRemoved );\n  this.onModelUpdated = copyFunction( this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd, this );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved, this );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated, this );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    this.map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = this.handleSuccess();\n  this.onFailure = this.handleFailure();\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function()\n  {\n    var query = this;\n\n    return function(models)\n    {\n      query.status = NeuroRemoteQuery.Status.Success;\n      query.reset( models, true );\n      query.trigger( NeuroRemoteQuery.Events.Success, [query] );\n      query.trigger( NeuroRemoteQuery.Events.Ready, [query] );\n    };\n  },\n\n  handleFailure: function()\n  {\n    var query = this;\n\n    return function(models, error)\n    {\n      query.status = NeuroRemoteQuery.Status.Failure;\n      query.trigger( NeuroRemoteQuery.Events.Failure, [query] );\n      query.trigger( NeuroRemoteQuery.Events.Ready, [query] );\n    };\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = copyFunction( this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges, this );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) )\n    {\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    if ( db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","\nfunction NeuroDiscriminatedRelationCollection(model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init();\n}\n\nextendArray( NeuroDiscriminatedModelCollection, NeuroDiscriminatedRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var collection = this.createRelationCollection( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < related.length; i++)\n        {\n          this.addModel( relation, related[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n      related.resort( this.comparator );\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var collection = this.createRelationCollection( model );\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var related = this.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var related = this.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove();\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(onFinish)\n  {\n    db.refresh( onFinish );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroDiscriminatedRelationCollection( model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroDiscriminatedModelCollection( this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.copyFunction = copyFunction;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n})(this);"],"sourceRoot":"/source/"}