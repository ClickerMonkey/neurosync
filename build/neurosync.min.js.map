{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","ClassNameReplacer","match","toUpperCase","charAt","toClassName","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","parsed","eventize","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","Neuro","cache","database","NeuroDatabase","model","Function","className","init","debug","Debugs","CREATION","all","getModels","create","inst","$save","Events","Initialized","Defaults","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","remoteOperations","afterOnline","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","relations","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveCache","reset","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","get","checkNeuro","cached","callbackContext","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","put","key","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","keySeparator","fields","loadRelations","loadRemote","autoRefresh","cachePending","fullSave","fullPublish","encode","data","decode","rawData","$key","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","fromStorage","checkModel","result","parseModel","hasRemote","buildKeyFromInput","has","putRemoteData","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","decoded","revisionCompare","$saved","current","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","instantiate","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","refresh","onLocalError","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","getModel","op","save","UpdateAndSave","CreateAndSave","Removed","$pendingSave","Created","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","$init","$operation","$relations","$set","$reset","databaseRelations","$getRelation","def","evaluatedValue","set","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$callRelationFunction","$remove","$exists","functionName","OperationType","operation","queue","execute","forSaving","$keys","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","filter","dest","out","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","map","floor","j","qsort","l","next","finished","run","finish","tryNext","insertNext","onSuccess","arguments","onFailure","previousValue","finishRemove","handleOnline","changes","saving","publishing","handleData","Store","None","Key","Keys","auto","getDefaults","field","pendingLoads","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","handleLoad","preSave","postSave","preRemove","postRemove","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","relatedDatabase","loadAllReady","total","belongsTo","cascade","that","isRelatedFactory","onKeyUpdate","handleKeyUpdate","initial","loaded","onRemoved","onSaved","handleModel","clearModel","setRelated","clearForeignKey","setModel","updateForeignKey","setProperty","foreign","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","handleModelAdded","handleLazyLoad","bulk","isModelArray","addModel","existing","skipCheck","adding","alreadyRemoved","relatedKey","hasManyThrough","through","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","callSave","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","removing","modelDatabase","keyIndex","keyProp","hasOne","dirty","dontRemove","Relation","Operation","Map"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction ClassNameReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toClassName(name)\n{\n  return name.replace( /(^.|_.)/g, ClassNameReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  model.all = function()\n  {\n    return database.getModels();\n  };\n\n  model.create = function(props)\n  {\n    var inst = new model( props );\n    inst.$save();\n    return inst;\n  };\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || toClassName( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Relations\n  this.relations = {};\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      this.relations[ name ] = relation;\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined, // required\n  className:            null, // defaults to name\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               undefined, // required\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                true,\n  cachePending:         false,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, fromStorage)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, fromStorage !== false );\n\n      if ( result !== false )\n      {\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input, undefined, undefined, fromStorage );\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (compare( a[ revision ], b[ revision ] )) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( db.cache )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      if ( db.cache )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( !db.cache )\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( !db.cache )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Save the model\n  save: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    if ( !db.cache )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal );\n    }\n  },\n\n  // Remove the model \n  remove: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    if ( !db.cache )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ] );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value; \n      }\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue)\n  {\n    this.$set( setProperties, setValue );\n\n    this.$callRelationFunction( 'preSave' );\n\n    this.$db.save( this );\n\n    this.$callRelationFunction( 'postSave' );\n  },\n\n  $remove: function()\n  {\n    if ( this.$exists() )\n    {\n      this.$callRelationFunction( 'preRemove' );\n\n      this.$db.remove( this );\n\n      this.$callRelationFunction( 'postRemove' );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $callRelationFunction: function(functionName)\n  {\n    var databaseRelations = this.$db.relations;\n\n    for ( var name in databaseRelations )\n    {\n      databaseRelations[ name ][ functionName ]( this );\n    }\n  },\n\n  $addOperation: function(OperationType) \n  {\n    var operation = new OperationType( this );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.fields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model)\n  {\n    this.model = model;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model );\n    }\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroRemoveCache(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveCache' ), NeuroRemoveCache,\n{\n\n  run: function(db, model)\n  {\n    model.$pendingSave = false;\n\n    db.store.remove( model.$key(), this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$deleted = true;\n    model.$pendingSave = false;\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      \n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    db.store.remove( key, this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else \n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live({\n      op: NeuroDatabase.Live.Remove,\n      key: key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Fill the key if need be\n    var key = model.$key();\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( key, model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    this.tryNext( NeuroSaveRemote );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    this.tryNext( NeuroSaveRemote );\n  }\n\n});\n","function NeuroSaveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cachePending && db.cache )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroSaveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var encoded = this.encoded = model.$toJSON( true );\n    var changes = this.changes = model.$getChanges( encoded );\n    var saving = this.saving = db.fullSave ? encoded : changes;\n    var publishing = this.publishing = db.fullPublish ? encoded : changes;\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( changes ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    if ( model.$saved )\n    {\n      db.rest.update( model, saving, this.success(), this.failure() );\n    }\n    else\n    {\n      db.rest.create( model, saving, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n    var publishing = this.publishing;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    if ( !isEmpty( data ) )\n    {\n      transfer( data, saving );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( !db.cache )\n      {\n        model.$saved = {};\n      }\n      else\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live({\n      op: NeuroDatabase.Live.Save,\n      model: publishing,\n      key: this.key\n    });\n\n    if ( db.cachePending && db.cache )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$pendingSave )\n    { \n      model.$pendingSave = false;\n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None: 0,\n  Model: 1,\n  Key: 2,\n  Keys: 3\n};\n\nNeuro.Save = {\n  None: 0,\n  Model: 4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ] );\n    }\n\n    pending.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n    }\n    else\n    {\n      this.handleLoad( model );\n    }\n  },\n\n  handleLoad: function(model)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  preSave: function(model)\n  {\n\n  },\n\n  postSave: function(model)\n  {\n\n  },\n\n  preRemove: function(model)\n  {\n\n  },\n\n  postRemove: function(model)\n  {\n\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        } \n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var onKeyUpdate = this.handleKeyUpdate();\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onKeyUpdate: onKeyUpdate,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove();\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) && this.cascade !== false )\n        {\n          model.$remove();\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n\n      model.$off( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( NeuroModel.Events.Saved, relation.onSaved );\n      relation.model.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  handleKeyUpdate: function()\n  {\n    return function onKeyUpdate(model, related)\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.model )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    };\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  // TODO set\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          false\n};\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through)\n    {\n      if ( relation.isRelated( through ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var adding = this.finishAddModel( relation, related, skipCheck );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation ), this, false );\n  },\n\n  onAddThrough: function(relation)\n  {\n    var throughs = relation.throughs;\n\n    return function(through)\n    {\n      this.finishAddThrough( relation, through, true );\n    };\n  },\n\n  addModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through ), this );\n  },\n\n  onAddModelFromThrough: function(relation, through)\n  {\n    return function(related)\n    {\n      this.finishAddThrough( relation, through );\n      this.finishAddModel( relation, related );\n    };\n  },\n\n  finishAddThrough: function(relation, through, callSave)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, skipCheck)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    false\n};\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearModel( relation, true );\n        this.clearForeignKey( model );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearModel( relation );\n          this.clearForeignKey( model );\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, dontRemove)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( NeuroModel.Events.Saved, relation.onSaved );\n      relation.model.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        relation.model.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [], 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {}, 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {}, 200 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {}, 200 );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}