{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","all.js","boot.js","create.js","fetch.js","methods.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","extend","parent","child","override","transfer","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","nullsFirst","av","bv","localeCompare","createComparator","parsed","eventize","secret","onListeners","$this","property","events","callback","context","on","this","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","off","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","Neuro","cache","database","NeuroDatabase","model","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","arguments","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","fields","unshift","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","remoteOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setToString","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","Online","Offline","checkNeuro","cached","callbackContext","all","getModels","boot","input","instance","$local","$toJSON","$saved","$addOperation","create","instantiate","$save","$key","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","fetch","buildKeyFromInput","getModel","buildObjectFromKey","$set","$refresh","methods","source","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","Pending","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","encode","data","decode","rawData","ready","persistent","onReadyRemove","onReady","invoked","grabModel","fromStorage","checkModel","result","parseModel","hasRemote","has","putRemoteData","removeKey","buildKey","buildKeys","join","buildKeyFromArray","getKey","getKeys","hasFields","exists","sort","revisionFunction","ar","br","comparatorFunction","isSorted","decoded","revisionCompare","conflicts","conflicted","notReallySaved","currentValue","savedValue","PartialUpdate","FullUpdate","RemoteUpdate","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$isDeleted","$status","Status","SavePending","refresh","onLocalError","onOnline","onRemoteRest","onModels","mapped","onLoadError","status","onRefreshOnline","op","saveToModels","UpdateAndSave","CreateAndSave","removeFromModels","RemovePending","Removed","refreshModel","Created","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","Synced","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","value","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","filter","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","next","finished","run","finish","tryNext","setNext","insertNext","onSuccess","onFailure","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","changes","saving","publish","clearLocal","markSynced","handleData","saveNow","clearPending","publishing","Store","Key","Keys","auto","getDefaults","field","pendingLoads","discriminator","discriminators","discriminated","setNeuro","neuro","loadDiscriminators","onInitialized","finishInitialization","pending","handleLoad","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","getStored","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","forModel","grabDiscriminated","getDiscriminatorByType","callack","loadAllRelated","loadAllDiscriminated","loadAllReady","total","belongsTo","that","isRelatedFactory","onKeyUpdate","handleKeyUpdate","initial","loaded","onRemoved","clearRelated","onSaved","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","setProperty","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleModelAdded","handleLazyLoad","bulk","existing","given","removing","adding","addModel","skipCheck","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","throughsRelated","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","callSave","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","callRemove","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","dontRemove","Relation","Operation","Map"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(parent, child, override)\n{\n  transfer( override, child.prototype = parent );\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n};\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, exists) { this.$init( props, exists ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    var $init = model.prototype.$init;\n\n    model.prototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      applyEventListeners( this, modelEvents );\n    };\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n      \n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroMap();\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.remoteOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setToString( this.toString );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encode:               function(data) { return data; },\n  decode:               function(rawData) { return rawData; },\n  toString:             function(model) { return model.$key() }\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, fromStorage)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, fromStorage !== false );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        db.putRemoteData( input, key, model, fromStorage );\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( fromStorage )\n      { \n        return db.putRemoteData( input, undefined, undefined, true ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br );\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparatorFunction = createComparator( comparator, nullsFirst );\n  },\n\n  setToString: function(toString)\n  {\n    if ( isFunction( toString ) )\n    {\n      this.toString = toString;\n    }\n    else if ( isString( toString ) )\n    {\n      this.toString = function(model)\n      {\n        return isValue( model ) ? model[ toString ] : model;\n      };\n    }\n    else\n    {\n      this.toString = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ] );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$isDeleted() )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( encoded.$status === NeuroModel.Status.SavePending )\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.remoteOperations === 0 )\n    {\n      this.onRemoteRest();\n    }\n  },\n\n  onRemoteRest: function()\n  {\n    var db = this;\n\n    if ( db.autoRefresh && db.remoteLoaded )\n    {\n      if ( db.afterOnline )\n      {\n        db.afterOnline = false;\n        \n        Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n        db.refresh();\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.Model( data, fromStorage );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ] );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return this.$db.hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.remoteOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.remoteOperations--;\n\n      if ( this.db.remoteOperations === 0 )\n      {\n        this.db.onRemoteRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroGetLocal' ), NeuroGetLocal,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroGetRemote' ), NeuroGetRemote,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveCache' ), NeuroRemoveCache,\n{\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( isEmpty( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n    db.live(\n    {\n      op:     NeuroDatabase.Live.Save,\n      model:  model.$publish,\n      key:    model.$key()\n    });\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4\n};\n\nNeuroRelation.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.initialized = false;\n\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n    \n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ] );\n    }\n\n    pending.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n    }\n    else\n    {\n      this.handleLoad( model );\n    }\n  },\n\n  handleLoad: function(model)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabModel: function(isRelated, forModel, input, callback)\n  {\n    if ( this.discriminated )\n    {\n      if ( this.grabDiscriminated( input, callback ) )\n      {\n        return true;\n      }\n      else\n      {\n        var discriminator = this.getDiscriminatorByType( forModel );\n\n        \n      }\n    }\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n\n        return true;\n      }\n    }\n\n    return true;\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    true\n};\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var onKeyUpdate = this.handleKeyUpdate();\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n\n      onKeyUpdate: onKeyUpdate,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n\n      model.$off( NeuroModel.Events.KeyUpdate, relation.onKeyUpdate );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  handleKeyUpdate: function()\n  {\n    return function onKeyUpdate(model, related, modelFields, relatedFields)\n    {\n      if ( this.local === modelFields )\n      {\n        var relation = model.$relations[ this.name ];\n\n        if ( relation && related !== relation.model )\n        {\n          this.clearModel( relation );\n          this.setModel( relation, related );\n          this.setProperty( relation );\n        }        \n      }\n    };\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true\n};\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n    \n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      relatedDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n      var models = related.values;\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, models );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                undefined,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false\n};\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // Add convenience methods to the underlying array\n    var related = relation.models.values;\n    \n    related.set = function(input)\n    {\n      that.set( model, input );\n    };\n\n    related.relate = function(input)\n    {\n      that.relate( model, input );\n    };\n    \n    related.unrelate = function(input)\n    {\n      that.unrelate( model, input );\n    };\n    \n    related.isRelated = function(input)\n    {\n      return that.isRelated( model, input );\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n  \n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var relation = model.$relations[ this.name ];\n      var existing = relation.models;\n      var given = new NeuroMap();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            given.put( related.$key(), related );\n          }\n        }\n      }\n      else\n      {\n        var related = relatedDatabase.parseModel( input );\n\n        if ( related )\n        {\n          given.put( related.$key(), related );\n        }\n      }\n\n      var removing = existing.subtract( given ).values;\n      var adding = given.subtract( existing ).values;\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ] );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n      });\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var existing = relation.models;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = relatedDatabase.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughsRelated = throughsAll.filter( relation.isRelated );\n      var throughs = throughsRelated.values;\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var adding = this.finishAddModel( relation, related, skipCheck );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation ), this, false );\n  },\n\n  onAddThrough: function(relation)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, true );\n    };\n  },\n\n  addModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through ), this );\n  },\n\n  onAddModelFromThrough: function(relation, through)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through );\n        this.finishAddModel( relation, related );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, callSave)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callSave )\n      {\n        through.$save( this.cascadeSave );\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, skipCheck)\n  {\n    var relateds = relation.models;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove( this.cascadeRemove );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.models;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:      undefined,\n  store:      Neuro.Store.None,\n  save:       Neuro.Save.None,\n  auto:       true,\n  property:   true,\n  local:      null,\n  cascade:    false\n};\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation, true );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.model ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleModel( relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    return related === relation.model;\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !relation.isRelated( related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation, false, this.cascade );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( relation.parent, related );\n    this.setProperty( relation );\n  },\n\n  clearRelated: function(relation, dontRemove)\n  {\n    this.clearModel( relation, dontRemove );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, dontRemove, cascade)\n  {\n    var related = relation.model;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        related.$remove( cascade );\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.model = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, foreign );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var related = relation.model;\n\n      if ( model[ this.name ] !== related )\n      {\n        model[ this.name ] = related;\n        \n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.getModels();\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    var instance = new model( input );\n\n    instance.$local = instance.$toJSON( false );\n    instance.$local.$saved = instance.$saved = instance.$toJSON( true );\n    instance.$addOperation( NeuroSaveNow );\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.getModel( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Map = NeuroMap;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}