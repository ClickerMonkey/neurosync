{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroDiscriminatedModelCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroDiscriminatedRelationCollection.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","NeuroRelationCollection.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","get.js","methods.js","query.js","ready.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","S4","Math","random","toString","substring","uuid","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","func","F","extend","parent","child","override","transfer","factory","args","this","arguments","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","defaultValue","option","copy","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","copyFunction","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","saveHaving","having","Havings","createHaving","addEventFunction","functionName","events","secret","on","off","callback","context","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","once","after","offListeners","listeners","event","eventListeners","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","init","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","Defaults","key","unshift","models","NeuroModelCollection","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","rest","store","live","handlePublish","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","keys","indices","addAll","NeuroFilteredCollection","base","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroDiscriminatedModelCollection","discriminator","discriminatorsToModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Pending","onSuccess","handleSuccess","onFailure","handleFailure","NeuroPage","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","cascade","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroDiscriminatedRelationCollection","relator","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","NeuroRelationCollection","Online","Offline","checkNeuro","cached","callbackContext","all","boot","input","putRemoteData","instantiate","$save","put","ModelAdded","updated","relationName","dynamic","modelEvents","databaseEvents","eventName","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildKeyFromInput","instance","buildObjectFromKey","$set","$refresh","fetchAll","onFinish","refresh","grabModel","methods","q","sync","ready","persistent","currentTime","currentDate","encode","decode","parse","addTimestamp","field","currentTimestamp","timestampsAsDate","addCreatedAt","addUpdatedAt","ignoredFields","addTimestampField","type","time","timestamps","timeAsDate","where","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","success","failure","encoded","update","remove","record","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","Cache","None","All","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReadyRemove","onReady","invoked","hasData","saving","checkModel","parseModel","hasRemote","saveToModels","has","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","getKeys","sort","revisionFunction","ar","br","resort","decoded","revisionRejected","$saved","missingModel","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","$status","Synced","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","RemovePending","Removed","SavePending","onLocalError","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","op","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","RemoteRemove","SavedRemoteUpdate","Blocked","$operation","$relations","$reset","databaseRelations","$getRelation","def","evaluatedValue","$get","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","load","setProperties","setValue","$remove","$exists","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","forSaving","$change","$keys","$hasKey","$isSaved","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Removes","Updates","Reset","Cleared","page","filtered","add","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","reduce","reducer","initialValue","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","modelKey","inputs","rebuild","callRemove","updateWhere","discriminatedValue","Success","Failure","Ready","setQuery","skipSync","clearPending","cancel","that","error","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","finished","interrupts","run","finish","tryNext","setNext","insertNext","previousValue","finishRemove","$saving","$publish","handleOnline","markSaving","local","remote","publish","clearLocal","markSynced","handleData","saveNow","publishing","Store","Key","Keys","auto","discriminators","discriminatorToModel","getDefaults","pendingLoads","pendingRemoteDatas","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","belongsTo","isRelatedFactory","loaded","onRemoved","clearRelated","onSaved","onKeyUpdate","postRemove","handleModel","clearModel","setRelated","setModel","updateForeignKey","clearForeignKey","foreign","modelFields","relatedFields","hasMany","cascadeRemove","cascadeSave","clearKey","ownsForeignKey","delaySorting","delaySaving","removeModel","checkSave","postSave","preRemove","handleLazyLoad","bulk","existing","given","adding","addModel","alreadyRemoved","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","throughsAll","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","finishRemoveRelated","removeThrough","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","hasOne","dirty","preSave","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","getDiscriminator","Relation","Operation","Map","Collection","ModelCollection","Query","RemoteQuery","Page","isFunctio"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","function isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction noop()\n{\n\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++) \n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to \n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults )\n{\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n\n    if ( !option && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( isValue( option ) )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  target.options = options;\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase(); \n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( /(^.|_.)/g, camelCaseReplacer );\n}\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copyFunction(x)\n{\n  return function() {\n    return x.apply( this, arguments );\n  };\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b) \n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( bv, av, !nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b; \n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  } \n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    { \n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener() \n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this, 0 ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n\n  function after(events, callback, context)\n  {\n    onListeners( this, '$$after', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n     \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n      \n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  database.init();\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.Events = \n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n\n          Neuro.off( Neuro.Events.Initialized, checkNeuro );\n        }\n      }\n\n      Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.dynamic ) )\n  {\n    for ( var property in options.dynamic )\n    {\n      var definition = options.dynamic[ property ];\n\n      addDynamicProperty( model.prototype, property, definition );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition : \n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property, \n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = options.events;\n\n  if ( isObject( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}","\n\nfunction NeuroDatabase(options)\n{  \n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.models = new NeuroModelCollection( this );\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this, this.handlePublish( this ) );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuro.Cache = \n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuroDatabase.Defaults = \n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      db.saveToModels( input );\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      var model = db.models.get( key );\n      \n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      { \n        return db.putRemoteData( input ); \n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      this.summarize = function(model)\n      {\n        return isValue( model ) ? model[ summarize ] : model;\n      };\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var missingModel = !db.models.has( key );\n\n      if ( missingModel )\n      {\n        db.models.put( key, model );\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow ); \n\n      if ( missingModel )\n      {\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, true );\n\n      model.$status = NeuroModel.Status.Synced;\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( 'online', db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      db.models.clear();\n\n      records = Array.prototype.slice.call( records );\n      keys = Array.prototype.slice.call( keys );\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status === NeuroModel.Status.RemovePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else if ( model.$status === NeuroModel.Status.Removed )\n        {\n          // nothing\n        }\n        else if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          db.models.put( key, model, true );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n\n          db.models.put( key, model, true );\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote )\n      {\n        if ( db.pendingOperations === 0 )\n        {\n          db.refresh();\n        }\n        else\n        {\n          db.firstRefresh = true;\n        }\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n      \n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(onFinish)\n  {\n    var db = this;\n\n    db.rest.all( onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model; \n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( onFinish )\n      {\n        onFinish( db.models );\n      }\n    }\n  \n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh(); \n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.models.get( this.buildKeyFromInput( key ) );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Debugs.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    // If the model is deleted, return immediately!\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    this.saveToModels( model );\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  saveToModels: function(model, remoteData)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model, remoteData] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n  },\n\n  // Remove the model \n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PreSave:          'pre-save',\n  PostSave:         'post-save',\n  PreRemove:        'pre-remove',\n  PostRemove:       'post-remove',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  Change:           'change',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  KeyUpdate:        'key-update',\n  RelationUpdate:   'relation-update',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed',\n  SavedRemoteUpdate:'saved remote-update',\n  Changes:          'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked = \n{\n  toString: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( remoteData )\n    {\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name, remoteData );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, remoteData );\n      \n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );      \n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade = \n      (arguments.length === 3 ? cascade !== false : \n        (arguments.length === 2 && isObject( setProperties ) ? setValue !== false : \n          (arguments.length === 1 ? setProperties !== false : true ) ) );\n\n    this.$set( setProperties, setValue );\n\n    this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n    this.$db.save( this, cascade );\n\n    this.$trigger( NeuroModel.Events.PostSave, [this] );\n  },\n\n  $remove: function(cascade)\n  {\n    if ( this.$exists() )\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    }\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }  \n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade) \n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection, \n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n      \n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n      \n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      callback.call( context, this[ i ], i );\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );        \n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd = copyFunction( this.handleAdd );\n  this.onAdds = copyFunction( this.handleAdds );\n  this.onRemove = copyFunction( this.handleRemove );\n  this.onRemoves = copyFunction( this.handleRemoves );\n  this.onReset = copyFunction( this.handleReset );\n  this.onUpdates = copyFunction( this.handleUpdates );\n  this.onCleared = copyFunction( this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd, this );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds, this );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove, this );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves, this );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset, this );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates, this );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear, this );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      this.map.reset();\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          this.map.put( parsed.$key(), parsed );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Reset, [this] );\n      this.resort();\n    }\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = this.map.get( key );\n\n      if ( removing )\n      {\n        this.map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","function NeuroDiscriminatedModelCollection(discriminator, discriminatorsToModel, models, remoteData)\n{\n  this.discriminator = discriminator;\n  this.discriminatorsToModel = discriminatorsToModel;\n\n  this.init( null, models, remoteData );\n}\n\nextendArray( NeuroModelCollection, NeuroDiscriminatedModelCollection, \n{\n\n  buildKeyFromInput: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  }\n\n});","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd = copyFunction( this.handleModelAdded );\n  this.onModelRemoved = copyFunction( this.handleModelRemoved );\n  this.onModelUpdated = copyFunction( this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd, this );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved, this );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated, this );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    this.map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Pending;\n\n  this.onSuccess = this.handleSuccess();\n  this.onFailure = this.handleFailure();\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:  0,\n  Success:  1,\n  Failure:  2\n};\n\nNeuroRemoteQuery.Events = \n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery, \n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n    \n    return this;\n  },\n\n  handleSuccess: function()\n  {\n    var that = this;\n\n    return function(models)\n    {\n      that.status = NeuroRemoteQuery.Status.Success;\n      that.reset( models, true );\n      that.trigger( NeuroRemoteQuery.Events.Success, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  },\n\n  handleFailure: function()\n  {\n    var that = this;\n\n    return function(models, error)\n    {\n      that.status = NeuroRemoteQuery.Status.Failure;\n      that.trigger( NeuroRemoteQuery.Events.Failure, [that] );\n      that.trigger( NeuroRemoteQuery.Events.Ready, [that] );\n    };\n  }\n\n});","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = copyFunction( this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges, this );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\n/* Removing?\nNeuro.Cascade = {\n  None:     0,\n  Local:    1,\n  Rest:     2,\n  Live:     4,\n  Remote:   6,\n  All:      7\n};\n*/\n\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = cascade !== false;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType, cascade)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType, cascade)\n  {\n    var op = new OperationType( this.model, cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else if ( this.cascade )\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    if ( this.cascade && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    if ( this.cascade && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      model.$set( data, void 0, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status )\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved && this.cascade )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.rest.remove( model, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n    db.live(\n    {\n      op:   NeuroDatabase.Live.Remove,\n      key:  key\n    });\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None )\n    {\n      if ( this.cascade )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) )\n    {\n      this.markSynced( model, true );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n      }\n      else\n      {\n        this.markSynced( model, true );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n    var publishing = model.$publish;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {}; \n    }\n\n    transfer( saving, model.$saved );\n    \n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }    \n\n\n    if ( db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, publishing );\n\n      db.live(\n      {\n        op:     NeuroDatabase.Live.Save,\n        model:  model.$publish,\n        key:    model.$key()\n      });\n    }\n\n    this.markSynced( model, false );\n    \n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow ); \n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    { \n      model.$addOperation( NeuroSaveRemote );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  }\n\n});","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuro.Store = {\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save = {\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nNeuroRelation.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n    \n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, remoteData );\n    }\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );        \n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        }\n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroBelongsTo, \n{\n\n  type: 'belongsTo',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade )\n        {\n          model.$remove( this.cascade );\n        }\n        else\n        {\n          this.clearRelated( relation );\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          if ( this.cascade )\n          {\n            model.$remove( this.cascade ); \n          }\n          else\n          {\n            this.clearRelated( relation );\n          }\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation, remoteData ), remoteData );\n    }\n  },\n\n  // same as HasOne\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  // same as HasOne\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  // same as HasOne\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleModel: function(relation, remoteData)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( relation.parent, related, remoteData );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }        \n    }\n  }\n\n});","\nfunction NeuroDiscriminatedRelationCollection(model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init();\n}\n\nextendArray( NeuroDiscriminatedModelCollection, NeuroDiscriminatedRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasMany, \n{\n\n  type: 'hasMany',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n    this.clearKey = this.ownsForeignKey();\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var collection = this.createRelationCollection( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, that, model, this, relation );\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.models.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < related.length; i++)\n        {\n          this.addModel( relation, related[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.clearForeignKey( related );\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  ownsForeignKey: function()\n  {\n    var foreign = this.foreign;\n    var relatedKey = this.model.Database.key;\n\n    if ( isString( foreign ) )\n    {\n      if ( isArray( relatedKey ) )\n      {\n        return indexOf( relatedKey, foreign ) === false;\n      }\n      else        \n      {\n        return relatedKey !== foreign;\n      }\n    }\n    else // if ( isArray( ))\n    {\n      if ( isArray( relatedKey ) )\n      {\n        for (var i = 0; i < foreign.length; i++)\n        {\n          if ( indexOf( relatedKey, foreign[ i ] ) !== false )\n          {\n            return false;\n          }\n        }\n        return true;\n      }\n      else\n      {\n        return indexOf( foreign, relatedKey ) === false;\n      }\n    }\n\n    return true;\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  clearForeignKey: function(related)\n  {\n    if ( this.clearKey )\n    {\n      var foreign = this.foreign;\n\n      this.clearFields( related, foreign );\n    }\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_SORT, this, relation );\n\n      related.resort( this.comparator );\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        true,\n  cascadeSave:          true,\n  cascadeSaveRelated:   false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasManyThrough, \n{\n\n  type: 'hasManyThrough',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n    var collection = this.createRelationCollection( model );\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      related: collection,\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initial );\n\n      this.grabModels( initial, this.handleModel( relation ), remoteData );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i] );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ] );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.throughs;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_AUTO_SAVE, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var relatedKey = related.$key();\n\n      if ( relatedKey in pending )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED, this, relation, related );\n\n        this.addModel( relation, related, true );\n\n        delete pending[ relatedKey ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughsAll = throughDatabase.models;\n      var throughs = throughsAll.filter( relation.isRelated );\n\n      if ( throughs.length === 0 )\n      {\n        return;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < throughs.length; i++)\n        {\n          this.addModelFromThrough( relation, throughs[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n    \n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        through.$save();\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var relatedKey = related.$key();\n\n    if ( this.finishRemoveRelated( relation, relatedKey ) )\n    {\n      this.removeThrough( relation, related, alreadyRemoved );\n    }\n  },\n\n  removeThrough: function(relation, related, alreadyRemoved)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    this.finishRemoveThrough( relation, through, related, true );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n    \n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove)\n  {\n    var removing = !!through;\n\n    if ( removing )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_SORT, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults = \n{\n  model:                null,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              true,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelation, NeuroHasOne, \n{\n\n  type: 'hasOne',\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASONE_INIT, this );\n    \n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var that = this;\n    var isRelated = this.isRelatedFactory( model );\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      parent: model,\n      initial: initial,\n      isRelated: isRelated,\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearRelated( relation );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !isRelated( relation.related ) )\n        {\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initial ) )\n    {\n      initial = this.grabInitial( model, this.local );\n      \n      if ( initial )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initial );        \n      }\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initial );\n\n      this.grabModel( initial, this.handleModel( relation ), remoteData );      \n    }\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var related = this.parseModel( input, remoteData );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var related = this.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;  \n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  setRelated: function(relation, related)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related );\n      this.setProperty( relation ); \n    }\n  },\n\n  clearRelated: function(relation)\n  {\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation) // remoteData?\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_CLEAR_MODEL, this, relation );\n\n      related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove();\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Debugs.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleModel: function(relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Debugs.HASONE_LOADED, this, relation.parent, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related && !related.$isDeleted() ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( relation.parent, related );\n        }\n        else\n        {\n          this.clearForeignKey( relation.parent );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Debugs.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( Neuro.Debugs.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    if ( !isObject( props ) )\n    {\n      var model = db.instantiate();\n\n      model.$save();\n\n      return model;\n    }\n\n    var fields = grab( props, db.fields );\n    var model = db.instantiate( fields );\n    var key = model.$key();\n    var relations = {};\n\n    db.models.put( key, model );\n    db.trigger( NeuroDatabase.Events.ModelAdded, [model, false] );\n    db.updated();\n\n    for (var i = 0; i < db.relationNames.length; i++)\n    {\n      var relationName = db.relationNames[ i ];\n\n      if ( relationName in props )\n      {\n        relations[ relationName ] = props[ relationName ];\n      }\n    }\n\n    model.$save( relations );\n\n    return model;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db, db.handlePublish( db ) );\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(onFinish)\n  {\n    db.refresh( onFinish );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  if ( isObject( options.methods ) )\n  {\n    transfer( options.methods, model.prototype );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps;\n  var timeAsDate = options.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( options.timestampsAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68       // relation, NeuroModel, NeuroModel\n\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key, record );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroDiscriminatedRelationCollection( model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroDiscriminatedModelCollection( this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunctio;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n  \n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  \n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.copyFunction = copyFunction;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n})(this);"],"sourceRoot":"/source/"}