{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroOperation.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroBelongsTo.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasOne.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isModelConstructor","prototype","NeuroModel","isNeuro","Model","Database","isString","isNumber","isNaN","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","S4","Math","random","toString","substring","uuid","extend","parent","child","override","prop","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","transfer","from","to","swap","a","k","t","evaluate","copy","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","push","clean","charAt","copyHidden","c","getTime","source","match","diff","curr","old","d","sizeof","properties","isEmpty","b","at","bt","aa","ba","compareNumbers","compare","localeCompare","createComparator","eventize","target","secret","onListeners","$this","property","events","callback","context","on","this","once","offListeners","listeners","event","eventListeners","splice","deleteProperty","off","$$on","$$once","triggerListeners","args","clear","max","slice","trigger","e","$on","$once","$off","$trigger","Neuro","options","database","NeuroDatabase","model","Function","className","init","debug","Events","CREATION","cache","name","models","NeuroMap","initialized","pendingRefresh","localLoaded","remoteLoaded","rest","store","live","handlePublish","setComparator","setRevision","revision","relations","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","db","$db","values","keys","indices","NeuroOperation","interrupts","type","NeuroRemoveLocal","reset","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroBelongsTo","NeuroHasMany","NeuroHasManyThrough","NeuroHasOne","get","checkNeuro","neuro","callbackContext","cached","REST","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_NINJA_SAVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_PRESAVE","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","method","data","success","failure","put","key","record","remove","all","onPublish","message","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","Live","Save","Remove","ready","persistent","onReadyRemove","onReady","invoked","grabModel","input","checkModel","result","parseModel","fromStorage","buildKeyFromInput","has","putRemoteData","removeKey","buildKey","fields","buildKeys","join","keySeparator","$key","buildKeyFromArray","ks","getKey","getKeys","hasFields","exists","updated","sort","revisionFunction","comparatorFunction","isSorted","encoded","decoded","decode","revisionCompare","$saved","current","$toJSON","conflicts","conflicted","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","instantiate","Saved","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","onLocalLoad","records","$deleted","loadRemote","refresh","onLocalError","onModels","mapped","onLoadError","status","getModels","getModel","op","encode","rawData","save","UpdateAndSave","CreateAndSave","Removed","$pendingSave","Created","RemoteRemove","$init","$operation","$relations","$set","$reset","loadRelations","databaseRelations","$getRelation","def","defaults","defaultValue","evaluatedValue","set","value","$get","$relate","relate","$unrelate","unrelated","unrelate","load","$save","setProperties","setValue","$callRelationFunction","$remove","$exists","functionName","OperationType","operation","queue","execute","forSaving","$keys","$isSaved","$isSavedLocally","$isNew","$getChanges","saved","index","removeAt","lastValue","pop","lastKey","size","filter","dest","out","v","reverse","half","ceil","rebuildIndex","partition","left","right","pivot","map","floor","j","qsort","l","next","finished","run","finish","tryNext","insertNext","onSuccess","arguments","onFailure","previousValue","finishRemove","saving","handleData","Store","None","Key","Keys","field","auto","discriminator","discriminators","discriminated","setNeuro","loadDiscriminators","onInitialized","preSave","postSave","preRemove","postRemove","clearFields","targetFields","changes","targetField","updateFields","sourceFields","targetValue","sourveValue","sourceField","sourceValue","getStoredArray","relateds","mode","stored","related","getStored","local","setDiscriminated","getDiscriminator","getDiscriminatorDatabase","parseDiscriminated","grabDiscriminated","callack","getDiscriminatorByType","loadAllRelated","isRelated","loadAllDiscriminated","relatedDatabase","loadAllReady","total","belongsTo","that","initial","loaded","onRemoved","cascade","onSaved","hasForeignKey","handleLoad","clearModel","setRelated","clearForeignKey","setModel","updateForeignKey","setProperty","foreign","hasMany","cascadeRemove","cascadeSave","HASMANY_INIT","pending","delaySorting","delaySaving","removeModel","checkSave","handleModelAdded","handleModel","handleLazyLoad","bulk","isModelArray","addModel","skipCheck","adding","alreadyRemoved","relatedKey","hasManyThrough","through","setThrough","throughs","hasOne","dirty","dontRemove","Relation","Operation"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isModelConstructor(x)\n{\n  return isFunction( x ) && x.prototype instanceof NeuroModel;\n}\n\nfunction isNeuro(x)\n{\n  return !!(x && x.Model && x.Database);\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction toArray(x, split)\n{\n  return x instanceof Array ? x : x.split( split );\n}\n\nfunction isTruthy(x)\n{\n  return !!x;\n}\n\nfunction isValue(x)\n{\n  return x !== undefined && x !== null;\n}\n\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction extend(parent, child, override)\n{\n  child.prototype = parent;\n\n  for (var prop in override)\n  {\n    child.prototype[ prop ] = override[ prop ];\n  }\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x.Model();\n  }\n  if ( isModelConstructor( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++) \n  {\n    var p = props[ i ];\n\n    if ( p in obj ) \n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++) \n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === void 0)\n  {\n    return x;\n  }\n  if (isArray(x)) \n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++) \n    {\n      c.push( copy(x[i]) );\n    }\n    return x;\n  }\n  if (isFunction(x) || typeof x !== 'object' || x === null)\n  {\n    return x;\n  }\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n  if (isRegExp(x))\n  {\n    return new RegExp( x.source, x.toString().match(/[^\\/]*$/)[0] );\n  }\n\n  var c = {};\n\n  for (var prop in x) \n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop] );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  \n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0) \n  {\n    return true;\n  }\n  if (isArray(x) || isString(x)) \n  {\n    return x.length === 0;\n  }\n  if (isDate(x)) \n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x)) \n  {\n    for (var prop in x) \n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' || !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' || !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b) \n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b)\n{\n  if (a == b) \n  {\n    return 0;\n  }\n  if (isDate(a)) \n  {\n    a = a.getTime();\n  }\n  if (isDate(b)) \n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b)) \n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b)) \n  {\n    return compareNumbers(a.length, b.length);\n  }\n  \n  return (a + '').localeCompare(b + '');\n}\n\nfunction createComparator(comparator)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator.charAt(0) === '-' )\n    {\n      comparator = comparator.substring( 1 );\n\n      return function compareObjects(a, b)\n      {\n        return compare( b[ comparator ], a[ comparator ] );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        return compare( a[ comparator ], b[ comparator ] );\n      };\n    }\n  }\n\n  return null;\n}","\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nfunction eventize(target, secret)\n{\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   * \n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return;\n    }\n\n    var events = toArray( events, ' ' );\n    \n    if ( !isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    onListeners( this, '$$on', events, callback, context );\n\n    return this;\n  }\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    onListeners( this, '$$once', events, callback, context );\n\n    return this;\n  }\n  \n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          callback[0].apply( callback[1], args );  \n        }\n      }\n      \n      if ( clear )\n      {\n        if ( eventListeners.length !== max )\n        {\n          listeners[ event ] = eventListeners.slice( max );  \n        }\n        else\n        {\n          delete listeners[ event ];  \n        }\n      }\n    }\n  }\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};","\n/*\nnew Neuro({\n  name: 'name',\n  api: 'http://api/name',\n  pubsub: 'http://url:port',\n  channel: 'houseid',\n  token: 'userid',\n  key: 'id',\n  fields: ['id', 'name', 'updated_at'],\n//  encode: function() {},\n//  decode: function() {}\n});\n*/\n\nfunction Neuro(options)\n{\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + options.className + '(props, exists) { this.$init( props, exists ) }')();\n\n  model.prototype = new NeuroModel( database );\n\n  database.model = model;\n  database.init();\n\n  Neuro.debug( Neuro.Events.CREATION, database, options );\n\n  model.Database = database;\n  model.Model = model;\n\n  Neuro.cache[ options.name ] = model;\n  Neuro.cache[ options.className ] = model;\n\n  Neuro.trigger( 'initialized', [model] );\n\n  return model;\n}\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro(neuro)\n      {\n        if ( neuro.name === name || neuro.className === name )\n        {\n          callback.call( callbackContext, neuro );\n\n          Neuro.off( 'initialized', checkNeuro );\n        }\n      }\n\n      Neuro.on( 'initialized', checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n","\n\nfunction NeuroDatabase(options)\n{  \n  transfer( options, this );\n\n  this.models = new NeuroMap();\n\n  this.initialized = false;\n  this.pendingRefresh = false;\n\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n\n  this.rest = Neuro.rest( this );\n  this.store = Neuro.store( this );\n  this.live = Neuro.live( this, this.handlePublish( this ) );\n\n  this.setComparator( this.comparator );\n  this.setRevision( this.revision );\n\n  this.relations = {};\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      this.relations[ name ] = relation;\n    }\n  }\n}\n\nNeuroDatabase.Events = \n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load'\n};\n\nNeuroDatabase.Live = \n{\n  Save:         'SAVE',\n  Remove:       'REMOVE'\n};\n\nNeuroDatabase.prototype =\n{\n\n  //\n  toString: function(model) \n  {\n    return '';\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n      invoked = true;\n    }\n    else\n    {\n      function onReadyRemove()\n      {\n        db.off( NeuroDatabase.Events.Loads, onReady );\n      }\n\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          onReadyRemove();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            onReadyRemove();\n          }\n          invoked = true;\n        }\n      }\n\n      db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, true );\n\n      if ( result !== false )\n      {\n        callback.call( callbackContext, result );\n      }\n\n      return result;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  // \n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  // \n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  // \n  parseModel: function(input, fromStorage)\n  {\n    var db = this;\n\n    if ( !isValue( input ) )\n    {\n      return db.remoteLoaded ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input.Model();\n    }\n    else if ( isModelConstructor( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.model )\n    {\n      if ( !db.models.has( key ) )\n      {\n        // trigger? save?\n        db.models.put( key, input );\n      }\n\n      return input;\n    }\n    else if ( db.models.has( key ) )\n    {\n      return db.models.get( key );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input, undefined, undefined, fromStorage );\n    }\n    else if ( db.remoteLoaded )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++) \n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator || '/' );\n    }\n    \n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {      \n      key = [];\n      \n      for (var i = 0; i < fields.length; i++) \n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    var ks = this.keySeparator || '/';\n    var key = '';\n\n    for (var i = 0; i < arr.length; i++)\n    {\n      if (i > 0)\n      {\n        key += ks;\n      }\n\n      key += arr[ i ];\n    }\n\n    return key;\n  },\n\n  // Gets the key from the given model\n  getKey: function(model)\n  {\n    return this.buildKey( model, this.key );\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  // Determines whether the given model has the given fields\n  hasFields: function(model, fields, exists)\n  {\n    if ( isArray( fields ) )\n    {\n      for (var i = 0; i < fields.length; i++) \n      {\n        if ( !exists( model[ fields[ i ] ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    else // isString( fields )\n    {\n      return exists( model[ fields ] );\n    }\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort();\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return (revision in a && revision in b) ? (a[ revision ] - b[ revision ]) : false;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator)\n  {\n    this.comparatorFunction = createComparator( comparator );\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    if ( !this.isSorted() )\n    {\n      this.models.sort( this.comparatorFunction );\n    }\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted( this.comparatorFunction );\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, fromStorage)\n  {\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.models.get( key );\n    var decoded = db.decode( copy( encoded ) );\n\n    if ( model )\n    {\n      var revisionCompare = this.revisionFunction( model, encoded );\n\n      if ( revisionCompare !== false && revisionCompare > 0 )\n      {\n        Neuro.debug( Neuro.Events.SAVE_OLD_REVISION, db, model, encoded );\n\n        return;\n      }\n    }\n\n    if ( model && model.$saved )\n    {\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( db.cache !== false )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      if ( db.cache !== false )\n      {\n        model.$addOperation( NeuroSaveNow ); \n      }\n    }\n    else\n    {\n      model = db.instantiate( decoded, fromStorage );\n\n      if ( db.cache !== false )\n      {\n        model.$local = encoded;\n        model.$saved = model.$local.$saved = copy( encoded );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = clean( encoded );\n      }\n    }\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n\n      if ( !fromStorage )\n      {\n        model.$trigger( NeuroModel.Events.Saved ); \n      }\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n     \n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue) \n        {\n          Neuro.debug( Neuro.Events.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.models.get( key );\n\n    if ( db.cache === false )\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n  },\n\n  // Initialize the database by loading local values and on success load\n  // remove values.\n  init: function()\n  {\n    var db = this;\n\n    if ( db.cache === false )\n    {\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      return;\n    }\n\n    db.store.all( onLocalLoad, onLocalError );    \n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Events.LOCAL_LOAD, db, records );\n\n      db.models.reset();\n\n      for (var i = 0; i < records.length; i++) \n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n\n        if ( encoded.$deleted )\n        {\n          Neuro.debug( Neuro.Events.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        }\n        else\n        {\n          if ( !encoded.$saved )\n          {\n            Neuro.debug( Neuro.Events.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( NeuroSaveRemote );\n          }\n          else\n          {\n            Neuro.debug( Neuro.Events.LOCAL_LOAD_SAVED, db, model );\n\n            model.$local.$saved = model.$saved;\n          }\n\n          // TODO investigate why sometimes the key is removed from the model then saved\n          if ( key === model.$key() )\n          {\n            db.models.put( key, model );            \n          }\n          else\n          {\n            db.store.remove( key );\n          }\n        }\n      }\n      \n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      db.updated();\n\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n    }\n\n    function onLocalError()\n    {\n      db.initialized = true;\n\n      if ( db.loadRemote !== false )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function()\n  {\n    var db = this;\n    \n    db.rest( 'GET', undefined, undefined, onModels, onLoadError );\n    \n    function onModels(models) \n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n        var key = model.$key();\n\n        mapped[ key ] = model;\n      }\n\n      var keys = db.models.keys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Events.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Events.REMOTE_LOAD, db, models );\n    }\n\n    function onLoadError(models, status) \n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once('online', function()\n          {\n            Neuro.debug( Neuro.Events.REMOTE_LOAD_RESUME, db );\n\n            if ( db.pendingRefresh )\n            {\n              db.pendingRefresh = false;\n\n              db.refresh(); \n            }\n          })\n        }\n\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Events.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n    }\n  \n  },\n\n  // The reference to all of the models in the database\n  getModels: function()\n  {\n    return this.models.values;\n  }, \n\n  // Returns a model\n  getModel: function(key)\n  {\n    if ( isArray( key ) )\n    {\n      key = this.buildKeyFromArray( key );\n    }\n\n    return this.models.get( key );\n  },\n\n  // Crates a function for handling real-time changes\n  handlePublish: function(db)\n  {\n    return function(message)\n    {\n      var key = message.key;\n      var encoded = message.model;\n\n      switch (message.op) \n      {\n      case NeuroDatabase.Live.Save:\n\n        db.putRemoteData( encoded, key );\n        db.updated();\n\n        Neuro.debug( Neuro.Events.REALTIME_SAVE, db, message.model, key );\n        break;\n\n      case NeuroDatabase.Live.Remove:\n\n        if ( db.destroyLocalModel( key ) )\n        {\n          db.updated(); \n        }\n\n        Neuro.debug( Neuro.Events.REALTIME_REMOVE, db, key );\n        break;\n      }\n    };\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, fromStorage)\n  {\n    return new this.model( data, fromStorage );\n  },\n\n  // Converts properties in data into their storable form\n  encode: function(data)\n  {\n    return data;\n  },\n\n  // Converts properties in rawData from their storable form to their desired\n  decode: function(rawData)\n  {\n    return rawData;\n  },\n\n  // Save the model\n  save: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    // Place the model and trigger a database update.\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n    else\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n\n    if ( db.cache === false )\n    {\n      // Save remotely\n      model.$addOperation( NeuroSaveRemote );\n    }\n    else\n    {\n      // Start by saving locally.\n      model.$addOperation( NeuroSaveLocal );\n    }\n  },\n\n  // Remove the model \n  remove: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    // If we have it in the models, remove it!\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n\n    // Mark as deleted right away\n    model.$deleted = true;\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    // TODO Add Debug here?\n    if ( model.$pendingSave )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_CANCEL_SAVE, db, model );\n\n      model.$pendingSave = false; \n    }\n\n    if ( db.cache === false )\n    {\n      // Remove remotely\n      model.$addOperation( NeuroRemoveRemote );\n    }\n    else\n    { \n      // Start by removing locally.\n      model.$addOperation( NeuroRemoveLocal );\n    }\n  }\n\n};\n\neventize( NeuroDatabase.prototype );","\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n  \n  /**\n   * @property {Boolean} [$deleted]\n   *           A flag placed on a model once it's requested to be deleted. A  \n   *           model with this flag isn't present on any arrays - it's stored\n   *           locally until its successfully removed remotely - then it's \n   *           removed locally.\n   */\n  \n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n  \n  /**\n   * @property {Boolean} $pendingSave\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events = \n{\n  Created:          'created',\n  Saved:            'saved',\n  PartialUpdate:    'partial-update',\n  FullUpdate:       'full-update',\n  Updated:          'updated',\n  Detach:           'detach',\n  CreateAndSave:    'created saved',\n  UpdateAndSave:    'updated saved',\n  Removed:          'removed',\n  RemoteUpdate:     'remote-update',\n  RemoteRemove:     'remote-remove',\n  RemoteAndRemove:  'remote-remove removed'\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, exists)\n  {\n    this.$pendingSave = false;\n    this.$operation = null;\n    this.$relations = {};\n\n    if ( exists )\n    {\n      this.$set( props );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    // Load relations after initialization?\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    this.$set( props );\n  },\n\n  $set: function(props, value)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n      \n      if ( relation )\n      {\n        relation.set( this, value );\n      }\n      else\n      {\n        this[ props ] = value; \n      }\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $getRelation: function(prop)\n  {\n    var databaseRelations = this.$db.relations;\n\n    if ( prop in databaseRelations )\n    {\n      var relation = databaseRelations[ prop ];\n\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue)\n  {\n    this.$set( setProperties, setValue );\n\n    this.$callRelationFunction( 'preSave' );\n\n    this.$db.save( this );\n\n    this.$callRelationFunction( 'postSave' );\n  },\n\n  $remove: function()\n  {\n    if ( this.$exists() )\n    {\n      this.$callRelationFunction( 'preRemove' );\n\n      this.$db.remove( this );\n\n      this.$callRelationFunction( 'postRemove' );\n    }\n  },\n\n  $exists: function()\n  {\n    return !this.$deleted && this.$db.models.has( this.$key() );\n  },\n\n  $callRelationFunction: function(functionName)\n  {\n    var databaseRelations = this.$db.relations;\n\n    for ( var name in databaseRelations )\n    {\n      databaseRelations[ name ][ functionName ]( this );\n    }\n  },\n\n  $addOperation: function(OperationType) \n  {\n    var operation = new OperationType( this );\n\n    if ( !this.$operation ) \n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    } \n    else \n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $key: function()\n  {\n    return this.$db.getKey( this );\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function()\n  {\n    var saved = this.$saved;\n    var encoded = this.$toJSON( true );\n    var fields = this.$db.fields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved) \n    {\n      return true;\n    }\n\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded) \n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( !equals( currentValue, savedValue ) ) \n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n};\n\neventize( NeuroModel.prototype, true );","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {NeuroMap} [dest]     [description]\n   * @return {[type]}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {NeuroMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {[type]}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    if ( !comparator )\n    {\n      return true;\n    }\n\n    var models = this.values;\n\n    for (var i = 0, n = models.length - 1; i < n; i++)\n    {\n      if ( comparator( models[ i ], models[ i + 1 ] ) > 0 )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\nfunction NeuroOperation(interrupts, type)\n{\n  this.interrupts = interrupts;\n  this.type = type;\n}\n\nNeuroOperation.prototype = \n{\n  reset: function(model)\n  {\n    this.model = model;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  execute: function()\n  {\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n    }\n\n    return this;\n  },\n\n  tryNext: function(OperationType)\n  {\n    if ( !this.next )\n    {\n      this.next = new OperationType( this.model );\n    }\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  success: function()\n  {\n    var op = this;\n\n    return function handleSuccess() \n    {\n      op.onSuccess.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    var op = this;\n\n    return function handleFailure() \n    {\n      op.onFailure.apply( op, arguments );\n      op.finish();\n    };\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n\n/**\n\n$operation;\n\n$addOperation: function(OperationType) {\n  var operation = new OperationType( this );\n  if ( !this.$operation ) {\n    this.$operation = operation;\n    this.$operation.execute();\n  } else {\n    this.$operation.queue( operation );\n  }\n}\n\n */","function NeuroRemoveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveLocal' ), NeuroRemoveLocal, \n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    // If there is no local there's nothing to remove from anywhere!\n    if ( !model.$local )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_LOCAL_NONE, model );\n\n      return this.finish();\n    }\n\n    // If this model hasn't been saved we only need to remove it from local storage.\n    if ( model.$saved )\n    {\n      // Mark local copy as deleted in the event we're not online\n      model.$local.$deleted = true;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Events.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL, model );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_LOCAL_ERROR, model, e );\n\n    if ( model.$saved )\n    {\n      model.$addOperation( NeuroRemoveRemote );\n    }\n  }\n\n});","function NeuroRemoveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveNow' ), NeuroRemoveNow,\n{\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( 'model-removed', [model] );\n      \n      db.updated();\n\n      model.$trigger('removed');\n    }\n\n    db.store.remove( key, this.success(), this.failure() );\n  }\n\n});","function NeuroRemoveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( true, 'NeuroRemoveRemote' ), NeuroRemoveRemote,\n{\n\n  run: function(db, model)\n  {\n    // Cancel any pending saves\n    model.$pendingSave = false;\n    model.$deleted = true;\n\n    // Grab key & encode to JSON\n    this.key = model.$key();\n\n    // Make the REST call to remove the model\n    db.rest( 'DELETE', model, undefined, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var key = this.key;\n    var model = this.model;\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Events.REMOVE_MISSING, this, key, model );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Events.REMOVE_ERROR, this, status, key, model );\n    } \n    else \n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once('online', function() \n        {\n          Neuro.debug( Neuro.Events.REMOVE_RESUME, operation, model );\n\n          model.$addOperation( NeuroRemoveRemote );\n        });\n      }\n\n      Neuro.debug( Neuro.Events.REMOVE_OFFLINE, this, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var key = this.key;\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.REMOVE_REMOTE, this, key, model );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Publish REMOVE\n    Neuro.debug( Neuro.Events.REMOVE_PUBLISH, this, key, model );\n\n    db.live({\n      op: NeuroDatabase.Live.Remove,\n      key: key\n    });\n  }\n\n});\n\nNeuroRemoveRemote.prototype = new NeuroOperation( true, 'NeuroRemoveRemote' );\n\n","function NeuroSaveLocal(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveLocal' ), NeuroSaveLocal,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_LOCAL_DELETED, this, model );\n\n      return this.finish();\n    }\n\n    var encoded = model.$toJSON( false );\n\n    // If this model doesn't have a local copy yet - create it.\n    if ( !model.$local ) \n    {\n      model.$local = encoded;\n    } \n    else \n    {\n      // Copy to the local copy\n      transfer( encoded, model.$local );\n    }\n\n    db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_LOCAL, this, model );\n\n    this.tryNext( NeuroSaveRemote );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_LOCAL_ERROR, this, model, e );\n\n    this.tryNext( NeuroSaveRemote );\n  }\n\n});\n","function NeuroSaveNow(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveNow' ), NeuroSaveNow,\n{\n\n  run: function(db, model)\n  {\n    db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n  }\n\n});","function NeuroSaveRemote(model)\n{\n  this.reset( model );\n}\n\nextend( new NeuroOperation( false, 'NeuroSaveRemote' ), NeuroSaveRemote,\n{\n\n  run: function(db, model)\n  {\n    // If the model is deleted, return immediately!\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model );\n\n      return this.finish();\n    }\n\n    // Grab key & encode to JSON\n    var key = this.key = model.$key();\n\n    // The fields that have changed since last save\n    var saving = this.saving = model.$getChanges( true );\n\n    // If there's nothing to save, don't bother!\n    if ( isEmpty( saving ) )\n    {\n      return this.finish();\n    }\n\n    // Make the REST call to save the model\n    db.rest( model.$saved ? 'PUT' : 'POST', model, saving, this.success(), this.failure() );\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Events.SAVE_REMOTE, this, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Events.SAVE_CONFLICT, this, data, model );\n\n      // Update the model with the data saved and returned\n      this.handleData( data, model, this.db );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Events.SAVE_UPDATE_FAIL, this, model );\n\n      this.insertNext( NeuroRemoveNow );\n    }\n    else if ( status !== 0 ) \n    {          \n      Neuro.debug( Neuro.Events.SAVE_ERROR, this, model, status );\n    } \n    else \n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online) \n      {\n        model.$pendingSave = true;\n\n        Neuro.once('online', function() \n        {\n          if ( model.$pendingSave )\n          { \n            model.$pendingSave = false;\n            model.$addOperation( NeuroSaveRemote );\n\n            Neuro.debug( Neuro.Events.SAVE_RESUME, operation, model );\n          }\n        });\n      }\n\n      Neuro.debug( Neuro.Events.SAVE_OFFLINE, this, model );\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = this.saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$deleted )\n    {\n      Neuro.debug( Neuro.Events.SAVE_REMOTE_DELETED, this, model, data );\n\n      return;\n    }\n\n    // If data was returned, place it in saving to update the model and publish\n    for (var prop in data)\n    {\n      if ( !(prop in saving ) )\n      {\n        saving[ prop ] = data[ prop ];\n      }\n    }\n\n    Neuro.debug( Neuro.Events.SAVE_VALUES, this, saving, model );\n\n    // If the model hasn't been saved before - create the record where the \n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      if ( db.cache === false )\n      {\n        model.$saved = {};\n      }\n      else\n      {\n        model.$saved = model.$local.$saved = {}; \n      }\n    }\n    \n    // Update the model with the return data\n    db.putRemoteData( saving, this.key, model );\n\n    // Publish saved data to everyone else\n    Neuro.debug( Neuro.Events.SAVE_PUBLISH, this, saving, model );\n\n    db.live({\n      op: NeuroDatabase.Live.Save,\n      model: saving,\n      key: this.key\n    });\n  }\n\n});","function NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {\n\n};\n\nNeuro.Store = {\n  None: 0,\n  Model: 1,\n  Key: 2,\n  Keys: 3\n};\n\nNeuro.Save = {\n  None: 0,\n  Model: 4\n};\n\nNeuroRelation.prototype =\n{\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} field    [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  init: function(database, field, options)\n  {\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.store = options.store || Neuro.Store.None;\n    this.save = options.save || Neuro.Save.None;\n    this.auto = !!options.auto;\n    this.property = !!options.property;\n    this.discriminator = options.discriminator || 'discriminator';\n    this.discriminators = options.discriminators || {};\n    this.discriminated = !!options.discriminators;\n\n    var setNeuro = this.setNeuro( database, field, options );\n\n    if ( !isNeuro( options.model ) )\n    {\n      Neuro.get( options.model, setNeuro, this );\n    }\n    else\n    {\n      setNeuro.call( this, options.model );\n    }\n  },\n\n  /**\n   * \n   * @param {[type]} neuro [description]\n   */\n  setNeuro: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      if ( !this.property )\n      {\n        this.property = indexOf( database.fields, this.name ) !== false;        \n      }\n\n      if ( this.discriminated )\n      {\n        this.loadDiscriminators();\n      }\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   * \n   * @param  {[type]} database [description]\n   * @param  {[type]} fields   [description]\n   * @param  {[type]} options  [description]\n   * @return {[type]}          [description]\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set, \n   * relate, and unrelate models. If serialize is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't \n   * actually related\n   * \n   * @param  {[type]} model [description]\n   * @return {[type]}       [description]\n   */\n  load: function(model)\n  {\n    \n  },\n\n  relate: function(model, input)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  get: function(model)\n  {\n\n  },\n\n  set: function(model, input)\n  {\n    this.unrelate( model );\n    this.relate( model, input );\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    \n  },\n\n  preSave: function(model)\n  {\n\n  },\n\n  postSave: function(model)\n  {\n\n  },\n\n  preRemove: function(model)\n  {\n\n  },\n\n  postRemove: function(model)\n  {\n\n  },\n\n  clearFields: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    source.$key();\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourveValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourveValue ) )\n      {\n        target[ targetFields ] = sourveValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    if ( changes && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode) \n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local ) \n        {\n          return related.$local;\n        } \n        else \n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved ) \n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  },\n\n  /* Polymorphic Relationships */\n\n  loadDiscriminators: function()\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var name = this.discriminators[ discriminator ];\n\n      Neuro.get( name, this.setDiscriminated, this );\n    }\n  },\n\n  setDiscriminated: function(discriminator)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ discriminator ] = neuro;\n    };\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n\n    if ( discriminator in this.discriminators )\n    {\n      var model = this.discriminators[ discriminator ];\n\n      return model.Database;\n    }\n\n    return false;\n  },\n\n  parseDiscriminated: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      return db.parseModel( input );\n    }\n\n    return false;\n  },\n\n  grabDiscriminated: function(input, callback)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callack, this );\n      }\n    }\n  },\n\n  getDiscriminatorByType: function(model)\n  {\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n\n      if ( model instanceof type )\n      {\n        return discriminator;\n      }\n    }\n\n    return false;\n  },\n\n  loadAllRelated: function(isRelated, callback)\n  {\n    if ( this.discriminated )\n    {\n      this.loadAllDiscriminated( isRelated, callback );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n\n      relatedDatabase.ready( this.loadAllReady( isRelated, callback ), this );\n    }\n  },\n\n  loadAllReady: function(isRelated, callback)\n  {\n    return function(db)\n    {\n      var related = db.models.filter( isRelated );\n\n      callback.call( this, related );\n    };\n  },\n\n  loadAllDiscriminated: function(isRelated, callback)\n  {\n    var related = new NeuroMap();\n    var callbackContext = this;\n    var total = sizeof( this.discriminators );\n    var current = 0;\n\n    for (var discriminator in this.discriminators)\n    {\n      var type = this.discriminators[ discriminator ];\n      var db = type.Database;\n\n      db.ready(function(db)\n      {\n        db.models.filter( isRelated, related );\n\n        if ( ++current === total )\n        {\n          callback.call( callbackContext, related );\n        }\n      });\n    }\n  }\n\n};","function NeuroBelongsTo()\n{\n  this.type = 'belongsTo';\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nextend( new NeuroRelation(), NeuroBelongsTo, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.BELONGSTO_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      model: null,\n      loaded: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_REMOVE, that, model, relation );\n\n        if ( this.cascade !== false )\n        {\n          model.$remove();\n        }\n      },\n      onSaved: function() \n      {\n        Neuro.debug( Neuro.Events.BELONGSTO_NINJA_SAVE, that, model, relation );\n\n        if ( !this.hasForeignKey( model, relation.model ) && this.cascade !== false )\n        {\n          model.$remove();\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  // same as HasOne\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !this.hasForeignKey( model, related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  // same as HasOne\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  // same as HasOne\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  // same as HasOne\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  // same as HasOne\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      relation.model = null;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_SET_MODEL, this, relation );\n  },\n\n  // same as HasOne\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.BELONGSTO_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  // same as HasOne\n  hasForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return propsMatch( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  // same as HasOne\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.BELONGSTO_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  // same as HasOne\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","function NeuroHasMany()\n{\n  this.type = 'hasMany';\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nextend( new NeuroRelation(), NeuroHasMany, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = options.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( options.comparator );\n    this.cascadeRemove = !!options.cascadeRemove;\n    this.cascadeSave = !!options.cascadeSave;\n\n    Neuro.debug( Neuro.Events.HASMANY_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelated( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      this.loadAllRelated( isRelated, this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (related)\n    {\n      var models = related.values;\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      target.put( key, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      target.remove( key );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      this.clearForeignKey( related );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    var foreign = this.foreign;\n\n    this.clearFields( related, foreign );\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  isRelated: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  }\n\n});","function NeuroHasManyThrough()\n{\n  this.type = 'hasManyThrough';\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nextend( new NeuroRelation(), NeuroHasManyThrough, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.foreign = options.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    this.local = options.local || ( database.name + '_' + database.key );\n\n    this.comparator = createComparator( options.comparator );\n    this.cascadeRemove = !!options.cascadeRemove;\n    this.cascadeSave = !!options.cascadeSave;\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Events.HASMANY_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n  },\n\n  // if initial is given, load related\n  // else, load through\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var isRelated = this.isRelated( model );\n    var initial = model[ this.name ];\n \n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: isRelated,\n      initial: initial,\n      pending: {},\n      models: new NeuroMap(),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        that.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( !isRelated( this ) )\n        {\n          that.removeModel( relation, this );\n        }\n        else\n        {\n          that.sort( relation );\n          that.checkSave( relation );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // When models are added to the related database, check if it's related to this model\n    relatedDatabase.on( 'model-added', this.handleModelAdded( relation ), this );\n    \n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initial ) )\n    {\n      for (var i = 0; i < initial.length; i++)\n      {\n        var input = initial[ i ];\n        var key = relatedDatabase.buildKeyFromInput( input );\n\n        relation.pending[ key ] = true;\n        relatedDatabase.grabModel( input, this.handleModel( relation ), this );\n      }\n    } \n    else\n    {\n      var source = relatedDatabase.models;\n        \n      relatedDatabase.ready( this.handleLazyLoad( relation, source ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  bulk: function(relation, callback)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation );\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.addModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.addModel( relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = relatedDatabase.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = relatedDatabase.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related );\n      }\n    }\n    else\n    {\n      var all = relation.models.values;\n\n      for (var i = all.length - 1; i >= 0; i--)\n      {\n        this.removeModel( relation, all[ i ] );\n      }\n    }\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    return relation.models.values;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStoredArray( relation.models.values, mode );\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.models.values;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( related.$hasChanges() )\n        {\n          related.$save();\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      this.bulk( relation, function()\n      {\n        var models = relation.models.values;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          related.$remove();\n        }\n      });\n    }\n  },\n\n  checkSave: function(relation)\n  {\n    if ( !relation.delaySaving )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        this.addModel( relation, related );\n      }\n    };\n  },\n\n  handleModel: function(relation)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        this.addModel( relation, related, true );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, source)\n  {\n    return function (relatedDatabase)\n    {\n      var map = source.filter( relation.isRelated );\n      var models = map.values;\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < models.length; i++)\n        {\n          this.addModel( relation, models[ i ] );\n        }\n      });\n    };\n  },\n\n  addModel: function(relation, related, skipCheck)\n  {\n    var target = relation.models;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      target.put( key, related );\n\n      related.$on( 'removed', relation.onRemoved );\n      related.$on( 'saved remote-update', relation.onSaved );\n\n      this.updateForeignKey( relation.parent, related );\n\n      this.sort( relation );\n\n      if ( !skipCheck )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, alreadyRemoved)\n  {\n    var target = relation.models;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      target.remove( key );\n\n      related.$off( 'removed', relation.onRemoved );\n      related.$off( 'saved remote-update', relation.onSaved );\n\n      this.clearForeignKey( related );\n\n      if ( !alreadyRemoved && this.cascadeRemove )\n      {\n        related.$remove();\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local );\n  },\n\n  clearForeignKey: function(related)\n  {\n    var foreign = this.foreign;\n\n    this.clearFields( related, foreign );\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return false;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return false;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  isRelated: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      relation.parent[ this.name ] = relation.models.values;\n    }\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.models;\n    \n    if ( !relation.delaySorting )\n    {\n      if ( !related.isSorted( this.comparator ) )\n      {\n        related.sort( this.comparator );\n      }\n\n      relation.parent.$trigger( 'relation-update', [this, relation] );\n    }\n  }\n\n});","function NeuroHasOne()\n{\n  this.type = 'hasOne';\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nextend( new NeuroRelation(), NeuroHasOne, \n{\n\n  onInitialized: function(database, field, options)\n  {\n    var relatedDatabase = this.model.Database;\n\n    this.local = options.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n\n    Neuro.debug( Neuro.Events.HASONE_INIT, this );\n  },\n\n  load: function(model)\n  {\n    var that = this;\n    var relatedDatabase = this.model.Database;\n    var initial = model[ this.name ];\n\n    var relation = model.$relations[ this.name ] = \n    {\n      initial: initial,\n      model: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function() \n      {\n        Neuro.debug( Neuro.Events.HASONE_NINJA_REMOVE, that, model, relation );\n\n        this.clearModel( relation, true );\n        this.clearForeignKey( model );\n      },\n      onSaved: function() \n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Events.HASONE_NINJA_SAVE, that, model, relation );\n\n        if ( !this.hasForeignKey( model, relation.model ) )\n        {\n          this.clearModel( relation );\n          this.clearForeignKey( model );\n        }\n      }\n    };\n\n    if ( isEmpty( initial ) && relatedDatabase.hasFields( model, this.local, isValue ) )\n    {\n      initial = pull( model, this.local );\n\n      Neuro.debug( Neuro.Events.HASONE_INITIAL_PULLED, this, model, initial );\n    }\n\n    if ( !isEmpty( initial ) )\n    {\n      Neuro.debug( Neuro.Events.HASONE_INITIAL, this, model, initial );\n\n      relatedDatabase.grabModel( initial, this.handleLoad( model, relation ), this );      \n    }\n  },\n\n  set: function(model, input)\n  {\n    if ( !isValue( input ) )\n    {\n      this.unrelate( model );\n    }\n    else\n    {\n      var relatedDatabase = this.model.Database;\n      var related = relatedDatabase.parseModel( input );\n      var relation = model.$relations[ this.name ];\n\n      if ( related && !this.hasForeignKey( model, related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  relate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var related = relatedDatabase.parseModel( input );\n    var relation = model.$relations[ this.name ];\n    \n    if ( related )\n    {\n      if ( relation.model !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( model, relation, related );\n      }\n    }\n  },\n\n  unrelate: function(model, input)\n  {\n    var relatedDatabase = this.model.Database;\n    var relation = model.$relations[ this.name ];\n    var related = relatedDatabase.parseModel( input );\n\n    if ( !related || relation.model === related )\n    {\n      this.clearModel( relation );\n      this.clearForeignKey( model );\n    }\n  },\n\n  setRelated: function(model, relation, related)\n  {\n    this.setModel( relation, related );\n    this.updateForeignKey( model, related );\n    this.setProperty( model, relation );\n  },\n\n  get: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n    \n    return relation.model;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      out[ this.name ] = this.getStored( relation.model, mode );\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.model )\n    {\n      var related = relation.model;  \n\n      if ( !this.hasForeignKey( model, related ) )\n      {\n        // this.set( model, model[ this.local ] ) ?\n      }\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Events.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        related.$save();\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade !== false )\n      {\n        Neuro.debug( Neuro.Events.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, dontRemove)\n  {\n    if ( relation.model )\n    {\n      Neuro.debug( Neuro.Events.HASONE_CLEAR_MODEL, this, relation );\n\n      relation.model.$off( 'saved', relation.onSaved );\n      relation.model.$off( 'removed', relation.onRemoved );\n\n      if ( !dontRemove )\n      {\n        relation.model.$remove();\n      }\n\n      relation.model = null;\n      relation.dirty = true;\n      relation.loaded = true;\n    }\n  },\n\n  setModel: function(relation, model)\n  {\n    model.$on( 'saved', relation.onSaved, this );\n    model.$on( 'removed', relation.onRemoved, this );\n\n    relation.model = model;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    Neuro.debug( Neuro.Events.HASONE_SET_MODEL, this, relation );\n  },\n\n  handleLoad: function(model, relation)\n  {\n    return function(related) \n    {\n      Neuro.debug( Neuro.Events.HASONE_LOADED, this, model, relation, related );\n\n      if ( relation.loaded === false ) \n      {\n        if ( related ) \n        {\n          this.setModel( relation, related );\n          this.updateForeignKey( model, related );\n        }\n        else\n        {\n          this.clearForeignKey( model );\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( model, relation );\n      }\n    };\n  },\n\n  hasForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    return propsMatch( model, local, related, foreign );\n  },\n\n  clearForeignKey: function(model)\n  {\n    var local = this.local;\n\n    Neuro.debug( Neuro.Events.HASONE_CLEAR_KEY, this, model, local );\n\n    this.clearFields( model, local );\n  },\n\n  updateForeignKey: function(model, related)\n  {\n    var relatedDatabase = this.model.Database;\n    var local = this.local;\n    var foreign = relatedDatabase.key;\n\n    Neuro.debug( Neuro.Events.HASONE_UPDATE_KEY, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign );\n  },\n\n  setProperty: function(model, relation)\n  {\n    if ( this.property )\n    {\n      if ( model[ this.name ] !== relation.model )\n      {\n        model[ this.name ] = relation.model;\n        \n        model.$trigger( 'relation-update', [this, relation] );\n      }\n    }\n  }\n\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Events = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_NINJA_SAVE: 50,      // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_PRESAVE: 68,       // NeuroModel, relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 71         // NeuroModel, relation, [NeuroModel]\n\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  return function (method, model, data, success, failure)\n  {\n    // success ( data )\n    // failure ( data, status )\n    \n    failure( {}, 0 );\n  };\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      // implement\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {[type]} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {[type]} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      // implement\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      // implement\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @param  {function} onPublish\n *         The function which receives live operations.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database, onPublish)\n{\n  return function publish(message)\n  {\n    // ignore the message.\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Events.ONLINE );\n  Neuro.trigger('online');\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Events.OFFLINE );\n  Neuro.trigger('offline');\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( 'online', Neuro.setOnline, false );\n    window.addEventListener( 'offline', Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n\n  /* Utility Functions */\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.extend = extend;\n  global.Neuro.transfer = transfer;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.diff = diff;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.createComparator = createComparator;\n\n})(window);"],"sourceRoot":"/source/"}