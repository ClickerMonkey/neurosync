{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","Neuro_transaction.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroSearch.js","NeuroSearchPaged.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","find.js","get.js","grab.js","grabAll.js","methods.js","query.js","ready.js","refresh.js","search.js","searchPaged.js","timestamps.js","where.js","Neuro_debug.js","Neuro_rest.js","Neuro_store.js","Neuro_live.js","Neuro_offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","testProp","expectedProp","equals","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","secret","defaultValue","option","valued","copy","$options","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","collapse","cleanFunctions","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Neuro","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","parseFloat","value","savePropertyResolver","delim","PropertyResolvers","createPropertyResolver","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","equality","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","database","NeuroDatabase","Function","className","Model","Events","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","NeuroTransaction","cascade","operation","status","completed","operations","Defaults","key","unshift","keys","models","NeuroModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","store","live","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","init","save","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","db","$db","NeuroMap","indices","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","buildKeyFromInput","input","discriminatedValue","parseModel","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","Status","Success","onSuccess","handleSuccess","onFailure","handleFailure","NeuroSearch","NeuroSearchPaged","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveLocal","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkNeuro","cached","Online","Offline","Cascade","None","Local","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","$save","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","find","firstWhere","grabModel","grabAll","ready","methods","q","sync","persistent","search","searchPaged","currentTime","currentDate","encode","decode","addTimestamp","field","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","type","time","timestamps","timestampsAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","put","record","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","transaction","transact","add","transactNone","RemoteSuccess","LocalSuccess","Blocked","Error","Any","handled","already","offs","RemoteSave","createHandler","RemoteSaveFailure","RemoteSaveOffline","LocalSave","LocalSaveFailure","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","LocalRemove","LocalRemoveFailure","offline","isFinished","finish","then","ignore","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","resort","clean","overwrite","decoded","revisionRejected","keyFields","mk","dk","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","$addOperation","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSaves","RemoteSaves","LocalRemoves","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$isSaved","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","txn","$remove","$exists","$cancel","$clone","f","cloneKey","relationName","preClone","clone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","forSaving","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","intersect","complement","delaySort","removing","removeAll","removed","removeWhere","insertAt","minModel","min","maxModel","resolver","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","inputs","rebuild","callRemove","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","cancel","error","$method","$results","$concurrent","$run","$encode","$handleSuccess","$handleFailure","$ready","$success","$failure","concurrentCount","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$first","$last","$prev","$next","response","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","page_size","$setPageSize","$getPageSize","page_index","$getPageOffset","$setTotal","$getTotal","setPageSize","setPageIndex","actualIndex","next","prev","jump","forceApply","changes","start","end","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","pendingLoads","pendingRemoteDatas","pendingInitials","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","pending","initials","remotes","handleLoad","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","adding","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","Relation","Operation","Transaction","Search","SearchPaged","Map","Collection","ModelCollection","Query","RemoteQuery","Page","HasOne","BelongsTo","HasMany","HasManyThrough","HasRemote"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n\n/**\n * Determines whether the given variable is defined.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * @memberOf Neuro\n * @param  {Any} x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * @memberOf Neuro\n * @param  {String|String[]} x\n *         The variable to convert to an Array.\n * @param  {String} [delimiter]\n *         The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *         The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * @memberOf Neuro\n * @param  {Any}  x\n *         The variable to test.\n * @return {Boolean} -\n *         True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * @memberOf Neuro\n * @param  {Array} arr\n *         The array to search through.\n * @param  {Any} x\n *         The variable to search for.\n * @param  {Function} [comparator]\n *         The function to use which compares two values and returns a truthy\n *         value if they are considered equivalent. If a comparator is not given\n *         then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *         The index in the array the variable exists at, otherwise false if\n *         the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberOf Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * @memberOf Neuro\n * @param  {Object} context\n *         The value of `this` for the given function.\n * @param  {Function}\n *         The function to invoke with the given context.\n * @return {Function} -\n *         A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberOf Neuro\n * @return {String} -\n *         The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction propsMatch(test, testFields, expected, expectedFields)\n{\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return test[ testFields ] === expected[ expectedFields ];\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equals( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      target[ prop ] = options[ prop ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  if ( isFunction( numbers ) )\n  {\n    return numbers;\n  }\n  else if ( isString( numbers ) )\n  {\n    if ( numbers in Neuro.NumberResolvers )\n    {\n      return Neuro.NumberResolvers[ numbers ];\n    }\n\n    return function resolveNumber(model)\n    {\n      return isValue( model ) ? parseFloat( model[ numbers ] ) : undefined;\n    };\n  }\n  else\n  {\n    return function resolveNumber(value)\n    {\n      return parseFloat( value );\n    };\n  }\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    return function resolveProperty(model)\n    {\n      return model[ properties ];\n    };\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\nNeuro.Wheres = {};\n\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( model[ properties ], value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( model[ properties ] );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger`\n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   *\n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   *\n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};\n","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the\n * constructor for creating instances of the Neuro object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  if ( Neuro.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Neuro.unloaded.push( database );\n  }\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.autoload = false;\n\nNeuro.unloaded = [];\n\nNeuro.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Neuro.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Neuro.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\neventize( Neuro );\n\nNeuro.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nNeuro.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuro.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, NeuroDatabase.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, NeuroDatabase.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","\nNeuro.transaction = null;\n\nNeuro.transact = function(cascade, model, operation, func)\n{\n  var transaction = Neuro.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Neuro.transaction = new NeuroTransaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Neuro.transaction = null;\n\n    return transaction;\n  }\n};\n\nNeuro.transactNone = function(cascade, model, operation)\n{\n  return new NeuroTransaction( cascade, model, operation );\n};\n\nfunction NeuroTransaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nNeuroTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\nNeuroTransaction.prototype =\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = NeuroTransaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = NeuroTransaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Neuro.Cascade.Rest )\n      {\n        this.status = NeuroTransaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Neuro.Cascade.Local )\n      {\n        this.status = NeuroTransaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = NeuroTransaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( NeuroTransaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n};\n\neventize( NeuroTransaction.prototype );\n","\n\nfunction NeuroDatabase(options)\n{\n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new NeuroModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = Neuro.rest( this );\n  this.store  = Neuro.store( this );\n  this.live   = Neuro.live( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(data)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ] );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ] );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nNeuroDatabase.Events =\n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  summarize:            defaultSummarize\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        grabbed = true;\n        callback.call( callbackContext, result );\n      }\n\n      return result === null ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.resort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw 'Model keys cannot be changed.';\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === NeuroModel.Status.RemovePending )\n      {\n        Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( NeuroRemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== NeuroModel.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( Neuro.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(models)\n    {\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(models, status)\n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( 'online', db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Neuro.debug( Neuro.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberOf Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Neuro.transactNone( cascade, this, 'save' );\n    }\n\n    return Neuro.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Neuro.transactNone( cascade, this, 'remove' );\n    }\n\n    return Neuro.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( grab( this, fields || this.$db.fields, true ) );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( grab( this, this.$db.fields, true ) );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );\n","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a \n   * truthy value then the key and value are placed in the destination map.\n   * \n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * \n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","function NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\nNeuroCollection.Events =\n{\n  Add:            'add',\n  Adds:           'adds',\n  Sort:           'sort',\n  Remove:         'remove',\n  Removes:        'removes',\n  Updates:        'updates',\n  Reset:          'reset',\n  Cleared:        'cleared',\n  Changes:        'add adds sort remove removes updates reset cleared'\n};\n\nextendArray( Array, NeuroCollection,\n{\n\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.resort();\n\n    return this;\n  },\n\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  resort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  filter: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  subtract: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equals( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(collection, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equals( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n  },\n\n  add: function(value, delaySort)\n  {\n    this.push( value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      this.push.apply( this, values );\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAt: function(i, delaySort)\n  {\n    if (i >= 0 && i < this.length)\n    {\n      var removing = this[ i ];\n\n      this.splice( i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  remove: function(value)\n  {\n    var i = this.indexOf( value );\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i );\n    }\n  },\n\n  removeAll: function(values, equals, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      var removed = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          this.splice( k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n\n      return removed;\n    }\n  },\n\n  removeWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        this.splice( i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  insertAt: function(i, value, delaySort)\n  {\n    this.splice( i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  minModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  maxModel: function(comparator)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  min: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  max: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = undefined;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  firstWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n  },\n\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  where: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var result = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        result.push( model );\n      }\n    }\n\n    return result;\n  },\n\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = new this.constructor();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = new this.constructor();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.resort();\n\n    return groupings;\n  }\n\n});\n\neventize( NeuroCollection.prototype );\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );\n","function NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.resort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  }\n\n});","function NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroCollection, NeuroModelCollection, \n{\n\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n  },\n\n  resort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  subtract: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  intersect: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  complement: function(models, out)\n  {\n    var target = out || new this.constructor();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.resort();\n  },\n\n  add: function(model, delaySort)\n  {\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n  },\n\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.resort();\n      }\n    }\n  },\n\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.resort();\n    }\n\n    return removed;\n  },\n\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  reverse: function()\n  {\n    this.map.reverse();\n  },\n\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.resort();\n\n    return removed;\n  },\n\n  update: function(props, value, remoteData)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n      model.$save();\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.resort();\n\n    return this;\n  },\n\n  updateWhere: function(where, props, value, remoteData)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n        model.$save();   \n\n        updated.push( model );     \n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.resort();\n\n    return updated;\n  }\n\n});","\nfunction NeuroRelationCollection(database, model, relator)\n{\n  this.model = model;\n  this.relator = relator;\n  \n  this.init( database );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n  \n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n  \n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n  \n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  }\n\n});","function NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n    \n    return input;\n  };\n\n  collection.parseModel = function(input, remoteData)\n  {\n    var discriminatedValue = input[ this.discriminator ];\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  return collection;\n}","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n\n  this.onSuccess = bind( this, this.handleSuccess );\n  this.onFailure = bind( this, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery,\n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.onSuccess, this.onFailure );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  parse: function(models)\n  {\n    return models;\n  },\n\n  handleSuccess: function()\n  {\n    var models = this.parse.apply( this, arguments );\n\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this] );\n  },\n\n  handleFailure: function(models, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this] );\n  }\n\n});\n","\nfunction NeuroSearch(database, options)\n{\n  this.$init( database, options );\n}\n\nNeuroSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Defaults =\n{\n  $method:     'create'\n};\n\nNeuroSearch.prototype =\n{\n\n  $init: function(database, options)\n  {\n    applyOptions( this, options, NeuroSearch.Defaults, true );\n\n    this.$db = database;\n    this.$results = new NeuroModelCollection( database );\n    this.$status = NeuroSearch.Status.Success;\n    this.$concurrent = 0;\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n\n    this.$status = NeuroSearch.Status.Pending;\n    this.$concurrent++;\n\n    var success = bind( this, this.$handleSuccess( this.$concurrent ) );\n    var failure = bind( this, this.$handleFailure( this.$concurrent ) );\n\n    switch (this.$method) {\n      case 'create':\n        this.$db.rest.create( this, encoded, success, failure );\n        break;\n      case 'update':\n        this.$db.rest.update( this, encoded, success, failure );\n        break;\n      case 'query':\n        this.$db.rest.query( encoded, success, failure );\n        break;\n      default:\n        throw 'Invalid search method: ' + this.$method;\n    }\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Success, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Failure, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(concurrentCount)\n  {\n    return function onSuccess()\n    {\n      if (this.$concurrent === concurrentCount)\n      {\n        var models = this.$decode.apply( this, arguments );\n\n        this.$concurrent = 0;\n        this.$status = NeuroSearch.Status.Success;\n        this.$results.reset( models, true );\n        this.$trigger( NeuroSearch.Events.Ready, [this] );\n        this.$trigger( NeuroSearch.Events.Success, [this] );\n      }\n    };\n  },\n\n  $handleFailure: function(concurrentCount)\n  {\n    return function onFailure()\n    {\n      if (this.$concurrent === concurrentCount)\n      {\n        this.$concurrent = 0;\n        this.$status = NeuroSearch.Status.Failure;\n        this.$trigger( NeuroSearch.Events.Ready, [this] );\n        this.$trigger( NeuroSearch.Events.Failure, [this] );\n      }\n    };\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions(copy(this));\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n};\n\neventize( NeuroSearch.prototype, true );\n","\nfunction NeuroSearchPaged(database, options)\n{\n  this.$init( database, options );\n}\n\nextend( NeuroSearch, NeuroSearchPaged,\n{\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events = \n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage, \n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  next: function()\n  {\n    this.setPageIndex( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.setPageIndex( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.setPageIndex( to );\n  },\n\n  first: function()\n  {\n    this.setPageIndex( 0 );\n  },\n\n  last: function()\n  {\n    this.setPageIndex( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n    \n    if ( apply )\n    {\n      this.update(); \n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );","\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype =\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, data, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetOffline, [model] );\n    }\n    else\n    {  \n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n    }\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else \n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(data, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 ) \n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online) \n      {\n        Neuro.once( 'online', this.handleOnline, this );\n        \n        model.$trigger( NeuroModel.Events.RemoteRemoveOffline, [model] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(data, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model] );\n    }\n    else if ( status !== 0 )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n    }\n    else\n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online)\n      {\n        Neuro.once( 'online', this.handleOnline, this );\n\n        model.$trigger( NeuroModel.Events.RemoteSaveOffline, [model] );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave );\n\n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});\n","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuroRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.pendingLoads = [];\n    this.pendingRemoteDatas = [];\n    this.pendingInitials = [];\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n\n    var pending = this.pendingLoads;\n    var initials = this.pendingInitials;\n    var remotes = this.pendingRemoteDatas;\n\n    for (var i = 0; i < pending.length; i++)\n    {\n      this.handleLoad( pending[ i ], initials[ i ], remotes[ i ] );\n    }\n\n    pending.length = 0;\n    initials.length = 0;\n    remotes.length = 0;\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Neuro.Model} model [description]\n   */\n  load: function(model, initialValue, remoteData)\n  {\n    if ( !this.initialized )\n    {\n      this.pendingLoads.push( model );\n      this.pendingInitials.push( initialValue );\n      this.pendingRemoteDatas.push( remoteData );\n    }\n    else\n    {\n      this.handleLoad( model, initialValue, remoteData );\n    }\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n\n  },\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};\n","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple, \n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n  \n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n      \n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n        \n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      { \n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      { \n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n    \n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n    \n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.resort( this.comparator );\n     \n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults = \n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote, \n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n   \n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  handleLoad: function(model, remoteData)\n  {\n    var relator = this;\n    var initial = model[ this.name ];\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  },\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    { \n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || NeuroDatabase.Defaults.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db );\n\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( NeuroModel.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, NeuroDatabase.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    transfer( methods, model.prototype );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.search = function(options)\n  {\n    return new NeuroSearch( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.searchPaged = function(options)\n  {\n    return new NeuroSearchPaged( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || NeuroDatabase.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || NeuroDatabase.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           // \n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     // \n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     // \n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation  \n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Transaction = NeuroTransaction;\n  global.Neuro.Search = NeuroSearch;\n  global.Neuro.SearchPaged = NeuroSearchPaged;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Relationships */\n  global.Neuro.HasOne = NeuroHasOne;\n  global.Neuro.BelongsTo = NeuroBelongsTo;\n  global.Neuro.HasMany = NeuroHasMany;\n  global.Neuro.HasManyThrough = NeuroHasManyThrough;\n  global.Neuro.HasRemote = NeuroHasRemote;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n\n  global.Neuro.eventize = eventize;\n\n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n\n  global.Neuro.transfer = transfer;\n  global.Neuro.collapse = collapse;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}