{"version":3,"sources":["header.js","functions.js","eventize.js","Neuro.js","dynamic.js","events.js","files.js","NeuroGate.js","NeuroDatabase.js","NeuroModel.js","NeuroMap.js","NeuroRequest.js","NeuroCollection.js","NeuroFilteredCollection.js","NeuroModelCollection.js","NeuroRelationCollection.js","NeuroDiscriminateCollection.js","NeuroQuery.js","NeuroRemoteQuery.js","NeuroSearch.js","NeuroSearchPaged.js","NeuroTransaction.js","NeuroPage.js","NeuroOperation.js","NeuroGetLocal.js","NeuroGetRemote.js","NeuroRemoveCache.js","NeuroRemoveLocal.js","NeuroRemoveNow.js","NeuroRemoveRemote.js","NeuroSaveLocal.js","NeuroSaveNow.js","NeuroSaveRemote.js","NeuroRelation.js","NeuroRelationSingle.js","NeuroRelationMultiple.js","NeuroBelongsTo.js","NeuroHasOne.js","NeuroHasMany.js","NeuroHasManyThrough.js","NeuroHasRemote.js","NeuroShard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","find.js","get.js","grab.js","grabAll.js","methods.js","query.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","where.js","Neuro.debug.js","Neuro.rest.js","Neuro.store.js","Neuro.live.js","Neuro.offline.js","NeuroPolymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isNeuro","Database","prototype","NeuroModel","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","equals","equality","Neuro","testProp","expectedProp","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","secret","defaultValue","option","valued","copy","$options","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","NeuroCollection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","collapse","clean","cleanFunctions","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","value","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","Events","Options","database","NeuroDatabase","Function","className","Model","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","input","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","forSaving","cached","save","store","fileProperties","RemoteSave","$addOperation","NeuroSaveLocal","Cascade","Local","NeuroGate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","NeuroModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","createRest","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","NeuroRelation","relationMap","relationOptions","relation","init","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","NeuroMap","indices","NeuroRequest","failure","callCanceled","addAll","NeuroFilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","NeuroRelationCollection","relator","NeuroDiscriminateCollection","collection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","NeuroQuery","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","NeuroRemoteQuery","query","status","Status","Success","request","handleSuccess","handleFailure","NeuroSearch","NeuroSearchPaged","NeuroTransaction","cascade","operation","completed","operations","NeuroPage","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","NeuroOperation","NeuroGetLocal","reset","NeuroGetRemote","NeuroRemoveCache","NeuroRemoveLocal","NeuroRemoveNow","NeuroRemoveRemote","NeuroSaveNow","NeuroSaveRemote","NeuroRelationSingle","NeuroRelationMultiple","NeuroBelongsTo","NeuroHasOne","NeuroHasMany","NeuroHasManyThrough","NeuroHasRemote","NeuroShard","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkNeuro","Online","Offline","None","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","files","fieldOption","type","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","methods","text","dataURL","base64","resource","capacity","size","types","fileToValue","find","firstWhere","grabModel","grabAll","ready","q","sync","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","encoded","update","remove","put","record","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","resolveModel","resolveModels","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","overwrite","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","transactNone","transact","txn","$remove","$exists","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","onSuccess","handleCall","onFailure","currentCall","cancel","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","disconnect","setFilter","onClear","updates","inputs","rebuild","callRemove","avoidSave","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","error","$method","$results","$request","$handleSuccess","$handleFailure","$run","$encode","$ready","$success","$failure","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","page_size","$setPageSize","$getPageSize","page_index","$getPageOffset","$setTotal","$getTotal","transaction","RemoteSuccess","LocalSuccess","Any","handled","already","offs","createHandler","offline","isFinished","finish","then","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","changes","end","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","NeuroPolymorphic","setReferences","onInitialized","setModelReference","neuro","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","Relation","Operation","Transaction","Search","SearchPaged","Map","Collection","FilteredCollection","ModelCollection","Query","RemoteQuery","Page","HasOne","BelongsTo","HasMany","HasManyThrough","HasRemote"],"mappings":"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","file":"neurosync.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Neuro.createWhere\n * @see Neuro.saveWhere\n */\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Neuro.equals\n * @see Neuro.equalsStrict\n * @see Neuro.equalsCompare\n */\n\n/**\n * A function for comparing two values to determine if one is greater or lesser\n * than the other or if they're equal.\n *\n * ```javascript\n * comparisonCallback( a, b ) < 0 // a < b\n * comparisonCallback( a, b ) > 0 // a > b\n * comparisonCallback( a, b ) == 0 // a == b\n * ```\n *\n * @callback comparisonCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Number} -\n *    0 if the two values are considered equal, a negative value if `a` is\n *    considered less than `b`, and a positive value if `a` is considered\n *    greater than `b`.\n * @see Neuro.compare\n * @see Neuro.compareNumbers\n */\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Neuro.createPropertyResolver\n */\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n var AP = Array.prototype;\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Neuro.isDefined(); // false\n * Neuro.isDefined(0); // true\n * Neuro.isDefined(true); // true\n * Neuro.isDefined(void 0); // false\n * Neuro.isDefined(undefined); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Neuro.isFunction(); // false\n * Neuro.isFunction(parseInt); // true\n * Neuro.isFunction(2); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Neuro object. A Neuro object is a\n * constructor for a model and also has a Database variable. A Neuro object is\n * strictly created by the Neuro function.\n *\n * ```javascript\n * var Task = Neuro({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Neuro.isNeuro( Task ); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Neuro object, otherwise false.\n */\nfunction isNeuro(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof NeuroModel);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Neuro.isString(); // false\n * Neuro.isString('x'): // true\n * Neuro.isString(1); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Neuro.isNumber(); // false\n * Neuro.isNumber('x'): // false\n * Neuro.isNumber(1); // true\n * Neuro.isNumber(NaN); // false\n * Neuro.isNumber(Infinity); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Neuro.isBoolean(); // false\n * Neuro.isBoolean('x'): // false\n * Neuro.isBoolean(1); // false\n * Neuro.isBoolean(true); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Neuro.isDate(); // false\n * Neuro.isDate('x'): // false\n * Neuro.isDate(1); // false\n * Neuro.isDate(true); // false\n * Neuro.isDate(new Date()); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Neuro.isRegExp(); // false\n * Neuro.isRegExp('x'): // false\n * Neuro.isRegExp(1); // false\n * Neuro.isRegExp(true); // false\n * Neuro.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Neuro.isArray(); // false\n * Neuro.isArray('x'): // false\n * Neuro.isArray(1); // false\n * Neuro.isArray([]); // true\n * Neuro.isArray(Neuro.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Neuro.isObject(); // false\n * Neuro.isObject('x'): // false\n * Neuro.isObject(1); // false\n * Neuro.isObject([]); // true\n * Neuro.isObject({}); // true\n * Neuro.isObject(null); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Neuro.toArray([1, 2, 3]); // [1, 2, 3]\n * Neuro.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Neuro\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Neuro.isValue(); // false\n * Neuro.isValue('x'): // true\n * Neuro.isValue(1); // true\n * Neuro.isValue([]); // true\n * Neuro.isValue({}); // true\n * Neuro.isValue(null); // false\n * Neuro.isValue(void 0); // false\n * Neuro.isValue(undefined); // false\n * ```\n *\n * @memberof Neuro\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Neuro.indexOf([1, 2, 3], 1); // 0\n * Neuro.indexOf([1, 2, 3], 4); // false\n * Neuro.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Neuro\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Neuro\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Neuro.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Neuro\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Neuro\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Neuro\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Neuro.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      target[ prop ] = options[ prop ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\n/**\n * Returns an instance of {@link Neuro.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Neuro.collect(1, 2, 3, 4);\n * Neuro.collect([1, 2, 3, 4]); // same as above\n * Neuro.collect();\n * Neuro.collect([]); // same as above\n * ```\n *\n * @memberof Neuro\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Neuro.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new NeuroCollection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isNeuro( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nNeuro.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Neuro.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Neuro\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Neuro.Comparators )\n    {\n      return Neuro.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nNeuro.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Neuro.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in Neuro.NumberResolvers )\n  {\n    return Neuro.NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nNeuro.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Neuro.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Neuro\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.PropertyResolvers )\n    {\n      return Neuro.PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model[ properties ];\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nNeuro.Wheres = {};\n\n/**\n * Saves a function created with {@link Neuro.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Neuro.saveWhere('whereName', 'field', true);\n * Neuro.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Neuro\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Neuro.createWhere}\n * @param {Any} [value] -\n *    See {@link Neuro.createWhere}\n * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n *    See {@link Neuro.createWhere}\n * @see Neuro.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Neuro.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Neuro.createWhere('field', true);  // when an object has property where field=true\n * Neuro.createWhere('field'); // when an object has the property named field\n * Neuro.createWhere(function(){}); // a function can be given which is immediately returned\n * Neuro.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Neuro.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Neuro.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Neuro.createWhere(); // always returns true\n * ```\n *\n * @memberof Neuro\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Neuro.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Neuro.Wheres )\n    {\n      return Neuro.Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nNeuro.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Neuro.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Neuro.Havings )\n    {\n      return Neuro.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger`\n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   *\n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   *\n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};\n","\n/**\n * Creates a Neuro object given a set of options. A Neuro object is also the\n * constructor for creating instances of the Neuro object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Neuro(options)\n{\n  if ( options.name in Neuro.cache )\n  {\n    return Neuro.cache[ options.name ];\n  }\n\n  Neuro.trigger( Neuro.Events.Options, [options] );\n\n  var database = new NeuroDatabase( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new NeuroModel( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Neuro.trigger( Neuro.Events.Plugins, [model, database, options] );\n\n  Neuro.cache[ database.name ] = model;\n  Neuro.cache[ database.className ] = model;\n\n  if ( Neuro.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Neuro.unloaded.push( database );\n  }\n\n  Neuro.trigger( Neuro.Events.Initialized, [model] );\n\n  Neuro.debug( Neuro.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nNeuro.autoload = false;\n\nNeuro.unloaded = [];\n\nNeuro.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Neuro.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Neuro.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nNeuro.cache = {};\n\nNeuro.get = function(name, callback, context)\n{\n  var cached = Neuro.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkNeuro()\n      {\n        var cached = Neuro.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Neuro.on( Neuro.Events.Initialized, checkNeuro );\n    }\n  }\n\n  return cached;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Neuro instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Neuro instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Neuro|Neuro.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\neventize( Neuro );\n\nNeuro.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nNeuro.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nNeuro.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nNeuro.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nNeuro.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, NeuroDatabase.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( NeuroModel.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, NeuroDatabase.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = NeuroDatabase.Events[ eventName ];\n      var modelEventString = NeuroModel.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || NeuroDatabase.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Neuro.trigger( Neuro.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nNeuro.fileProcessors = {};\n\nNeuro.Events.FilesNotSupported = 'files-not-supported';\nNeuro.Events.FileTooLarge = 'file-too-large';\nNeuro.Events.FileWrongType = 'file-wrong-type';\nNeuro.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nNeuro.addFileProcessor = function(name, methods)\n{\n  Neuro.fileProcessors[ name ] = methods;\n};\n\nNeuro.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Neuro.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Neuro.trigger( Neuro.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Neuro.trigger( Neuro.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Neuro.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Neuro.trigger( Neuro.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Neuro.trigger( Neuro.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Neuro.trigger( Neuro.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Neuro.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( NeuroModel.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( NeuroSaveLocal, Neuro.Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","\nfunction NeuroGate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\nfunction NeuroDatabase(options)\n{\n  var defaults = NeuroDatabase.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new NeuroModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Neuro.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Neuro.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof NeuroRelation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Neuro.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Neuro.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Neuro.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nNeuroDatabase.Events =\n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nNeuroDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Neuro.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nNeuroDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( NeuroDatabase.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( NeuroModel.Events.RemoteGets, function()\n          {\n            if ( !grabbed )\n            {\n              grabbed = true;\n\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              callback.call( callbackContext, result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          grabbed = true;\n          callback.call( callbackContext, result );\n        }\n      }\n\n      return grabbed ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Neuro )\n  // parseModel( Neuro.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isNeuro( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( NeuroDatabase.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Neuro.debug( Neuro.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( NeuroModel.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( NeuroModel.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( NeuroSaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( NeuroDatabase.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Neuro.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( NeuroSaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( NeuroModel.Events.Detach );\n\n        model.$addOperation( NeuroSaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( NeuroRemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n\n      model.$trigger( NeuroModel.Events.RemoteAndRemove );\n\n      Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Neuro.debug( Neuro.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Neuro.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === NeuroModel.Status.RemovePending )\n      {\n        Neuro.debug( Neuro.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( NeuroRemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === NeuroModel.Status.SavePending )\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( NeuroSaveRemote );\n        }\n        else\n        {\n          Neuro.debug( Neuro.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Neuro.debug( Neuro.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== NeuroModel.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Neuro.after( Neuro.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Neuro.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( NeuroDatabase.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Neuro.debug( Neuro.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Neuro.debug( Neuro.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( NeuroDatabase.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Neuro.debug( Neuro.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Neuro.checkNetworkStatus();\n\n        if ( !Neuro.online )\n        {\n          db.pendingRefresh = true;\n\n          Neuro.once( Neuro.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Neuro.debug( Neuro.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( NeuroDatabase.Events.NoLoad, [db, response] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Neuro.debug( Neuro.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Neuro.debug( Neuro.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Neuro.debug( Neuro.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( NeuroDatabase.Events.ModelUpdated, [model] );\n\n      model.$trigger( NeuroModel.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( NeuroDatabase.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.CreateAndSave );\n    }\n\n    model.$addOperation( NeuroSaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    model.$addOperation( NeuroRemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( NeuroDatabase.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( NeuroModel.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( NeuroGetLocal, cascade );\n  }\n\n};\n\neventize( NeuroDatabase.prototype );\naddEventFunction( NeuroDatabase.prototype, 'change', NeuroDatabase.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Neuro\n * @alias Model\n * @param {Neuro.Database} db\n *        The database instance used in model instances.\n */\nfunction NeuroModel(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {NeuroDatabase} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nNeuroModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nNeuroModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nNeuroModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nNeuroModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = NeuroModel.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( NeuroModel.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( NeuroModel.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( NeuroModel.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Neuro.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Neuro.transactNone( cascade, this, 'save' );\n    }\n\n    return Neuro.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( NeuroModel.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Neuro.transactNone( cascade, this, 'remove' );\n    }\n\n    return Neuro.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( NeuroModel.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( NeuroModel.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( NeuroModel.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === NeuroModel.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === NeuroModel.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= NeuroModel.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( NeuroModel.prototype, true );\naddEventFunction( NeuroModel.prototype, '$change', NeuroModel.Events.Changes, true );\n","\n/**\n * A NeuroMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Neuro\n * @alias Map\n */\nfunction NeuroMap()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nNeuroMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Neuro.Map} [dest]     [description]\n   * @return {Neuro.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new NeuroMap();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Neuro.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {NeuroMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Neuro.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};\n","\nfunction NeuroRequest(context, success, failure)\n{\n  this.context = context;\n  this.success = success;\n  this.failure = failure;\n  this.call = 0;\n  this.callCanceled = 0;\n}\n\nNeuroRequest.prototype =\n{\n\n  onSuccess: function()\n  {\n    return this.handleCall( this, ++this.call, this.success );\n  },\n\n  onFailure: function()\n  {\n    return this.handleCall( this, this.call, this.failure );\n  },\n\n  handleCall: function(request, currentCall, callback)\n  {\n    return function onHandleCall()\n    {\n      if ( request.call === currentCall &&\n           currentCall > request.callCanceled &&\n           isFunction( callback ) )\n      {\n        callback.apply( request.context, arguments );\n      }\n    };\n  },\n\n  cancel: function()\n  {\n    this.callCanceled = this.call;\n  }\n\n};\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Neurosync.\n *\n * A collection of any type can be created via {@link Neuro.collect}.\n *\n * ```\n * var nc = new Neuro.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Neuro\n * @alias Collection\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Neuro.collect\n */\nfunction NeuroCollection(values)\n{\n  this.addAll( values );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Neuro.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Neuro.Collection#event:add Add}\n * {@link Neuro.Collection#event:adds Adds}\n * {@link Neuro.Collection#event:sort Sort}\n * {@link Neuro.Collection#event:remove Remove}\n * {@link Neuro.Collection#event:removes Removes}\n * {@link Neuro.Collection#event:updates Updates}\n * {@link Neuro.Collection#event:reset Reset}\n * {@link Neuro.Collection#event:cleared Cleared}\n * {@link Neuro.Collection#event:changes Changes}\n *\n * @static\n */\nNeuroCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Neuro.Collection#add\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Neuro.Collection#add\n   * @see Neuro.Collection#insertAt\n   * @see Neuro.ModelCollection#add\n   * @see Neuro.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Neuro.Collection#adds\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Neuro.Collection#addAll\n   * @see Neuro.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Neuro.Collection#sort\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Neuro.Collection#sort\n   * @see Neuro.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Neuro.Collection#remove\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Neuro.Collection#remove\n   * @see Neuro.Collection#removeAt\n   * @see Neuro.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Neuro.Collection#removes\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Neuro.Collection#removeAll\n   * @see Neuro.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Neuro.Collection#updates\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Neuro.ModelCollection#update\n   * @see Neuro.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Neuro.Collection#reset\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Neuro.FilteredCollection#sync\n   * @see Neuro.ModelCollection#reset\n   * @see Neuro.Query#sync\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Neuro.Collection#cleared\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Neuro.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Neuro.Collection#changes\n   * @argument {Neuro.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, NeuroCollection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   * @return {Neuro.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Neuro.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createComparator\n   */\n  sort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Neuro.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new NeuroPage( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Neuro.createWhere}.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Neuro.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Neuro.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Neuro.createWhere}\n   * @return {Neuro.Collection} -\n   *    The newly created live filtered view of this collection.\n   * @see Neuro.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new NeuroFilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Neuro.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Neuro.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Neuro.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Neuro.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Neuro.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Neuro.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Neuro.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * var b = Neuro.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * var b = Neuro.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * var b = Neuro.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( NeuroCollection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#add\n   * @emits Neuro.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Neuro.Collection#add\n   * @emits Neuro.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Neuro.Collection#adds\n   * @emits Neuro.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Neuro.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#adds\n   * @emits Neuro.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( NeuroCollection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#add\n   * @emits Neuro.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( NeuroCollection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Neuro.Collection#remove\n   * @emits Neuro.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( NeuroCollection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Neuro.Collection#remove\n   * @emits Neuro.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( NeuroCollection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Neuro.Collection#remove\n   * @emits Neuro.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Neuro.Collection#remove\n   * @emits Neuro.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Neuro.Collection#removes\n   * @emits Neuro.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Neuro.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Neuro.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Neuro.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Neuro.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.Collection#sort sort}.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#removes\n   * @emits Neuro.Collection#sort\n   * @see Neuro.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Neuro.Collection#removes\n   * @emits Neuro.Collection#adds\n   * @emits Neuro.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.splice.call( arguments, 0, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( NeuroCollection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      var n = this.length;\n      var half = Math.floor( n / 2 );\n\n      for (var i = 0; i < half; i++)\n      {\n        var k = n - i - 1;\n        var a = this[ i ];\n        this[ i ] = this[ k ];\n        this[ k ] = a;\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Neuro.equals\n   * @see Neuro.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Neuro.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Neuro.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Neuro.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Neuro.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Neuro.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Neuro.createPropertyResolver\n   * @see Neuro.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Neuro.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Neuro.createPropertyResolver\n   * @see Neuro.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Neuro.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Neuro.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Neuro.createPropertyResolver\n   * @see Neuro.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Neuro.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Neuro.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Neuro.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Neuro.createPropertyResolver\n    * @see Neuro.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Neuro.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Neuro.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Neuro.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Neuro.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Neuro.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Neuro.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Neuro.createWhere}.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Neuro.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Neuro.createPropertyResolver\n   * @see Neuro.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Neuro.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Neuro.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Neuro.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Neuro.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Neuro.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Neuro.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Neuro.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Neuro.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Neuro.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Neuro.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\neventize( NeuroCollection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Neuro.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Neuro.Collection#event:changes\n */\naddEventFunction( NeuroCollection.prototype, 'change', NeuroCollection.Events.Changes );\n","\n/**\n * An extension of the {@link Neuro.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Neuro.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Neuro\n * @alias FilteredCollection\n * @extends Neuro.Collection\n * @param {Neuro.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Neuro.Collection#filtered\n */\nfunction NeuroFilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Neuro.FilteredCollection#\n * @member {Neuro.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Neuro.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( NeuroCollection, NeuroFilteredCollection,\n{\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Neuro.FilteredCollection#\n   * @param {Neuro.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Neuro.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Neuro.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Neuro.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Neuro.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Neuro.createWhere}\n   * @return {Neuro.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Neuro.createWhere\n   * @emits Neuro.Collection#reset\n   */\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Neuro.FilteredCollection#\n   * @return {Neuro.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: function()\n  {\n    this.base.on( NeuroCollection.Events.Add, this.onAdd );\n    this.base.on( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.on( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.on( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.on( NeuroCollection.Events.Reset, this.onReset );\n    this.base.on( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.on( NeuroCollection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Neuro.FilteredCollection#\n   * @return {Neuro.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: function()\n  {\n    this.base.off( NeuroCollection.Events.Add, this.onAdd );\n    this.base.off( NeuroCollection.Events.Adds, this.onAdds );\n    this.base.off( NeuroCollection.Events.Remove, this.onRemove );\n    this.base.off( NeuroCollection.Events.Removes, this.onRemoves );\n    this.base.off( NeuroCollection.Events.Reset, this.onReset );\n    this.base.off( NeuroCollection.Events.Updates, this.onUpdates );\n    this.base.off( NeuroCollection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Neuro.FilteredCollection#\n   * @return {Neuro.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Neuro.Collection#reset\n   */\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n\n    return this;\n  },\n\n  /**\n   * Responds to the {@link Neuro.Collection#event:add} event.\n   */\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  /**\n   * Responds to the {@link Neuro.Collection#event:adds} event.\n   */\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  /**\n   * Responds to the {@link Neuro.Collection#event:remove} event.\n   */\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  /**\n   * Responds to the {@link Neuro.Collection#event:removes} event.\n   */\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  /**\n   * Responds to the {@link Neuro.Collection#event:reset} event.\n   */\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  /**\n   * Responds to the {@link Neuro.Collection#event:updates} event.\n   */\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  /**\n   * Responds to the {@link Neuro.Collection#event:cleared} event.\n   */\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.FilteredCollection#\n   * @return {Neuro.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @return {Neuro.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n});\n","\n/**\n * An extension of the {@link Neuro.Collection} class for {@link Neuro.Model}\n * instances.\n *\n * @constructor\n * @memberof Neuro\n * @alias ModelCollection\n * @extends Neuro.Collection\n * @param {Neuro.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Neuro.Models.boot\n * @see Neuro.Models.collect\n */\nfunction NeuroModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Neuro.ModelCollection#\n * @member {Neuro.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Neuro.ModelCollection#\n * @member {Neuro.Database} database\n */\n\nextendArray( NeuroCollection, NeuroModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {Neuro.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Neuro.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Neuro.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new NeuroMap();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in NeuroCollection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( NeuroCollection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Neuro.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Documented in NeuroCollection.js\n   *\n   * @see Neuro.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof NeuroModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in NeuroCollection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in NeuroCollection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in NeuroCollection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Neuro.ModelCollection} -\n   *    The reference to this collection.\n   * @see Neuro.ModelCollection#parseModel\n   * @emits Neuro.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n    this.sort();\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Neuro.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Neuro.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.ModelCollection#sort sort}.\n   * @return {Neuro.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Neuro.ModelCollection#add\n   * @emits Neuro.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.ModelCollection#sort sort}.\n   * @return {Neuro.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Neuro.ModelCollection#add\n   * @emits Neuro.ModelCollection#sort\n   */\n  add: function(input, delaySort)\n  {\n    var model = this.parseModel( input );\n\n    this.map.put( model.$key(), model );\n    this.trigger( NeuroCollection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Neuro.ModelCollection#add\n   * @emits Neuro.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( NeuroCollection.Events.Adds, [this, values] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @see Neuro.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Neuro.ModelCollection#adds\n   * @emits Neuro.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.ModelCollection#sort sort}.\n   * @return {Neuro.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Neuro.ModelCollection#adds\n   * @emits Neuro.ModelCollection#sort\n   */\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ] );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( NeuroCollection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @see Neuro.ModelCollection#add\n   * @return {Neuro.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Neuro.ModelCollection#add\n   * @emits Neuro.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.ModelCollection#sort sort}.\n   * @return {Neuro.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Neuro.ModelCollection#remove\n   * @emits Neuro.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( NeuroCollection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Neuro.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.ModelCollection#sort sort}.\n   * @return {Neuro.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Neuro.ModelCollection#remove\n   * @emits Neuro.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( NeuroCollection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.ModelCollection#sort sort}.\n   * @return {Neuro.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Neuro.ModelCollection#remove\n   * @emits Neuro.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Neuro.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Neuro.Model} -\n   *    The element removed from this collection.\n   * @emits Neuro.ModelCollection#remove\n   * @emits Neuro.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( NeuroCollection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Neuro.ModelCollection#sort sort}.\n   * @return {Neuro.Model[]} -\n   *    The models removed from this collection.\n   * @emits Neuro.ModelCollection#removes\n   * @emits Neuro.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @return {Neuro.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @return {Neuro.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Neuro.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( NeuroCollection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Neuro.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Neuro.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Neuro.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Neuro.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Neuro.createWhere}\n   * @return {Neuro.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Neuro.ModelCollection#removes\n   * @emits Neuro.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Removes, [this, removed] );\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Neuro.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Neuro.Model#$save}, otherwise false.\n   * @return {Neuro.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Neuro.ModelCollection#updates\n   * @emits Neuro.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Neuro.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Neuro.Model#$save}, otherwise false.\n   * @return {Neuro.Model[]} -\n   *    An array of models updated.\n   * @emits Neuro.ModelCollection#updates\n   * @emits Neuro.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !autoSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @return {Neuro.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new NeuroModelCollection( this.database, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @return {Neuro.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new NeuroModelCollection( this.database );\n  }\n\n});\n","\nfunction NeuroRelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\nextendArray( NeuroModelCollection, NeuroRelationCollection,\n{\n\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n  },\n\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n  },\n\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n  },\n\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.RelationCollection#\n   * @return {Neuro.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new NeuroRelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.ModelCollection#\n   * @return {Neuro.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new NeuroRelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Neuro.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Neuro instances.\n * @return {Neuro.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction NeuroDiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  /**\n   * Builds a key from input. Discriminated collections only accept objects as\n   * input - otherwise there's no way to determine the discriminator. If the\n   * discriminator on the input doesn't map to a Neuro instance OR the input\n   * is not an object the input will be returned instead of a model instance.\n   *\n   * @param {modelInput} input -\n   *    The input to create a key for.\n   * @return {Any} -\n   *    The built key or the given input if a key could not be built.\n   */\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n\n    return input;\n  };\n\n  /**\n   * Takes input and returns a model instance. The input is expected to be an\n   * object, any other type will return null.\n   *\n   * @param {modelInput} input -\n   *    The input to parse to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    Whether or not the input is coming from a remote source.\n   * @return {Neuro.Model} -\n   *    The model instance parsed or null if none was found.\n   */\n  collection.parseModel = function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n\n    var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Neuro.Collection} -\n   *    The reference to a clone collection.\n   */\n  collection.clone = function()\n  {\n    return NeuroDiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n  };\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Neuro.Collection#\n   * @return {Neuro.Collection} -\n   *    The reference to a clone collection.\n   */\n  collection.cloneEmpty = function()\n  {\n    return NeuroDiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n  };\n\n  return collection;\n}\n","function NeuroQuery(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( NeuroModelCollection, NeuroQuery,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.on( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( NeuroDatabase.Events.ModelAdded, this.onModelAdd );\n    this.database.off( NeuroDatabase.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( NeuroDatabase.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( NeuroCollection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});","function NeuroRemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = NeuroRemoteQuery.Status.Success;\n  this.request = new NeuroRequest( this, this.handleSuccess, this.handleFailure );\n}\n\nNeuroRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroRemoteQuery.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( NeuroQuery, NeuroRemoteQuery,\n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = NeuroRemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.request.onSuccess(), this.request.onFailure() );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( NeuroRemoteQuery.Events.Ready );\n    this.off( NeuroRemoteQuery.Events.Success );\n    this.off( NeuroRemoteQuery.Events.Failure );\n\n    this.request.cancel();\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === NeuroRemoteQuery.Status.Pending )\n    {\n      this.once( NeuroRemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === NeuroRemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  parse: function(models)\n  {\n    return models;\n  },\n\n  handleSuccess: function(response)\n  {\n    var models = this.parse.apply( this, arguments );\n\n    this.status = NeuroRemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( NeuroRemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this, response] );\n    this.trigger( NeuroRemoteQuery.Events.Success, [this, response] );\n  },\n\n  handleFailure: function(response, error)\n  {\n    this.status = NeuroRemoteQuery.Status.Failure;\n    this.off( NeuroRemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( NeuroRemoteQuery.Events.Ready, [this, response] );\n    this.trigger( NeuroRemoteQuery.Events.Failure, [this, response] );\n  }\n\n});\n","\nfunction NeuroSearch(database, options)\n{\n  this.$init( database, options );\n}\n\nNeuroSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nNeuroSearch.Defaults =\n{\n  $method:     'create'\n};\n\nNeuroSearch.prototype =\n{\n\n  $init: function(database, options)\n  {\n    applyOptions( this, options, NeuroSearch.Defaults, true );\n\n    this.$db = database;\n    this.$results = new NeuroModelCollection( database );\n    this.$status = NeuroSearch.Status.Success;\n    this.$request = new NeuroRequest( this, this.$handleSuccess, this.$handleFailure );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n\n    this.$status = NeuroSearch.Status.Pending;\n\n    var success = this.$request.onSuccess();\n    var failure = this.$request.onFailure();\n\n    switch (this.$method) {\n      case 'create':\n        this.$db.rest.create( this, encoded, success, failure );\n        break;\n      case 'update':\n        this.$db.rest.update( this, encoded, success, failure );\n        break;\n      case 'query':\n        this.$db.rest.query( encoded, success, failure );\n        break;\n      default:\n        throw 'Invalid search method: ' + this.$method;\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$off( NeuroSearch.Events.Ready );\n    this.$off( NeuroSearch.Events.Success );\n    this.$off( NeuroSearch.Events.Failure );\n\n    this.$request.cancel();\n\n    return this;\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Success, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === NeuroSearch.Status.Pending )\n    {\n      this.$once( NeuroSearch.Events.Failure, callback, context );\n    }\n    else if ( this.$status === NeuroSearch.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(response)\n  {\n    var models = this.$decode.apply( this, arguments );\n\n    this.$status = NeuroSearch.Status.Success;\n    this.$results.reset( models, true );\n    this.$trigger( NeuroSearch.Events.Ready, [this, response] );\n    this.$trigger( NeuroSearch.Events.Success, [this, response] );\n  },\n\n  $handleFailure: function(response)\n  {\n    this.$status = NeuroSearch.Status.Failure;\n    this.$trigger( NeuroSearch.Events.Ready, [this, response] );\n    this.$trigger( NeuroSearch.Events.Failure, [this, response] );\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n};\n\neventize( NeuroSearch.prototype, true );\n","\nfunction NeuroSearchPaged(database, options)\n{\n  this.$init( database, options );\n}\n\nextend( NeuroSearch, NeuroSearchPaged,\n{\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nNeuro.transaction = null;\n\nNeuro.transact = function(cascade, model, operation, func)\n{\n  var transaction = Neuro.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Neuro.transaction = new NeuroTransaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Neuro.transaction = null;\n\n    return transaction;\n  }\n};\n\nNeuro.transactNone = function(cascade, model, operation)\n{\n  return new NeuroTransaction( cascade, model, operation );\n};\n\nfunction NeuroTransaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nNeuroTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\nNeuroTransaction.prototype =\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Neuro.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( NeuroModel.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Neuro.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( NeuroModel.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( NeuroModel.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = NeuroTransaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = NeuroTransaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Neuro.Cascade.Rest )\n      {\n        this.status = NeuroTransaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Neuro.Cascade.Local )\n      {\n        this.status = NeuroTransaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = NeuroTransaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( NeuroTransaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n};\n\neventize( NeuroTransaction.prototype );\n","function NeuroPage(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nNeuroPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, NeuroPage,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( NeuroCollection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( NeuroPage.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( NeuroPage.prototype );\naddEventFunction( NeuroPage.prototype, 'change', NeuroPage.Events.Changes );\n","\nfunction NeuroOperation()\n{\n}\n\nNeuroOperation.prototype =\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Neuro.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'NeuroOperation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function NeuroGetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroGetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Neuro.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n      this.insertNext( NeuroGetRemote ); \n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( NeuroModel.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Neuro.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( NeuroGetRemote );\n    }\n  }\n\n});\n","function NeuroGetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroGetRemote,\n{\n\n  cascading: Neuro.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'NeuroGetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( NeuroModel.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( NeuroModel.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function NeuroRemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveCache,\n{\n\n  cascading: Neuro.Cascade.None,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Neuro.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});","function NeuroRemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveLocal, \n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = NeuroModel.Status.RemovePending;\n\n    if ( db.cache === Neuro.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n      this.insertNext( NeuroRemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( NeuroModel.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( NeuroModel.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Neuro.Cascade.Remote ) )\n    {\n      model.$addOperation( NeuroRemoveRemote, this.cascade );\n    }\n  }\n\n});","function NeuroRemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = NeuroModel.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = NeuroModel.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});","function NeuroRemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroRemoveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'NeuroRemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 )\n    {\n      Neuro.debug( Neuro.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Neuro.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Neuro.online)\n      {\n        Neuro.once( Neuro.Events.Online, this.handleOnline, this );\n\n        model.$trigger( NeuroModel.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( NeuroModel.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Neuro.debug( Neuro.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Neuro.debug( Neuro.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = NeuroModel.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( NeuroModel.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( NeuroRemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Neuro.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Neuro.debug( Neuro.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( NeuroRemoveRemote );\n  }\n\n});\n","function NeuroSaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveLocal,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_LOCAL_DELETED, model );\n    \n      model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Neuro.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Neuro.Cascade.Remote ) )\n      {\n        if ( this.tryNext( NeuroSaveRemote ) )\n        {\n          this.markSaving( db, model );  \n        }\n      }\n\n      model.$trigger( NeuroModel.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n      \n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = NeuroModel.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    model.$local.$status = model.$status;\n    \n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( NeuroSaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( NeuroModel.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( NeuroSaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n    \n    model.$trigger( NeuroModel.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function NeuroSaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveNow,\n{\n\n  cascading: Neuro.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'NeuroSaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Neuro.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});","function NeuroSaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( NeuroOperation, NeuroSaveRemote,\n{\n\n  cascading: Neuro.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'NeuroSaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Neuro.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, NeuroModel.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = NeuroModel.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Neuro.debug( Neuro.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( NeuroRemoveNow );\n\n      model.$trigger( NeuroModel.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Neuro.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Neuro.online)\n      {\n        Neuro.once( Neuro.Events.Online, this.handleOnline, this );\n\n        model.$trigger( NeuroModel.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, NeuroModel.Events.RemoteSaveFailure, response );\n      }\n\n      Neuro.debug( Neuro.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = NeuroModel.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Neuro.debug( Neuro.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Neuro.debug( Neuro.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, NeuroModel.Events.RemoteSave, null );\n\n    if ( db.cache === Neuro.Cache.Pending )\n    {\n      this.insertNext( NeuroRemoveCache );\n    }\n    else\n    {\n      this.insertNext( NeuroSaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Neuro.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Neuro.debug( Neuro.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === NeuroModel.Status.SavePending )\n    {\n      model.$addOperation( NeuroSaveRemote, this.cascade );\n\n      Neuro.debug( Neuro.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( NeuroSaveRemote, this.cascade );\n  }\n\n});\n","\nfunction NeuroRelation()\n{\n\n}\n\nNeuro.Relations = {};\n\nNeuroRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nNeuroRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroRelation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Neuro.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      transfer( NeuroPolymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isNeuro( this.model ) )\n    {\n      Neuro.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(neuro)\n    {\n      this.model = neuro;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Neuro.Model} model [description]\n   */\n\n  load: NeuroGate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Neuro.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new NeuroRelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new NeuroModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Neuro.Save.Model:\n        return related.$toJSON( true );\n\n      case Neuro.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Neuro.Save.Key:\n      case Neuro.Store.Key:\n        return related.$key();\n\n      case Neuro.Save.Keys:\n      case Neuro.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};\n","function NeuroRelationSingle()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Neuro.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( NeuroModel.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( NeuroModel.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( NeuroModel.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Neuro.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Neuro.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Neuro.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Neuro.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function NeuroRelationMultiple()\n{\n}\n\n\nextend( NeuroRelation, NeuroRelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Neuro.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Neuro.Store.Model || this.save === Neuro.Save.Model )\n      {\n        Neuro.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Neuro.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Neuro.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( NeuroModel.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function NeuroBelongsTo()\n{\n}\n\nNeuro.Relations.belongsTo = NeuroBelongsTo;\n\nNeuroBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroBelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Neuro.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Neuro.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Neuro.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Neuro.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroBelongsTo.Defaults;\n  },\n\n  load: NeuroGate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n    model.$on( NeuroModel.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Neuro.debug( Neuro.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function NeuroHasOne()\n{\n}\n\nNeuro.Relations.hasOne = NeuroHasOne;\n\nNeuroHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Neuro.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationSingle, NeuroHasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Neuro.Debugs.HASONE_INIT,\n  debugClearModel:    Neuro.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Neuro.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Neuro.Debugs.HASONE_LOADED,\n  debugClearKey:      Neuro.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Neuro.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Neuro.Debugs.HASONE_QUERY,\n  debugQueryResults:  Neuro.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasOne.Defaults;\n  },\n\n  load: NeuroGate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( NeuroModel.Events.PreSave, this.preSave, this );\n    model.$on( NeuroModel.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Neuro.debug( Neuro.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Neuro.debug( this.debugClearModel, this, relation );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function NeuroHasMany()\n{\n}\n\nNeuro.Relations.hasMany = NeuroHasMany;\n\nNeuroHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.Local,\n  cascadeSave:          Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Neuro.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANY_SORT,\n  debugQuery:           Neuro.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Neuro.debug( Neuro.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: NeuroGate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function NeuroHasManyThrough()\n{\n}\n\nNeuro.Relations.hasManyThrough = NeuroHasManyThrough;\n\nNeuroHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Neuro.Cascade.NoRest,\n  cascadeSave:          Neuro.Cascade.All,\n  cascadeSaveRelated:   Neuro.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( NeuroRelationMultiple, NeuroHasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Neuro.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Neuro.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Neuro.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Neuro.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isNeuro( options.through ) )\n    {\n      Neuro.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Neuro.debug( Neuro.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: NeuroGate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new NeuroMap(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( NeuroModel.Events.PostSave, this.postSave, this );\n    model.$on( NeuroModel.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( NeuroDatabase.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Neuro.debug( Neuro.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Neuro.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( NeuroModel.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function NeuroHasRemote()\n{\n}\n\nNeuro.Relations.hasRemote = NeuroHasRemote;\n\nNeuroHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Neuro.Store.None,\n  save:                 Neuro.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // NeuroModel.Events.RemoteGets\n};\n\nextend( NeuroRelationMultiple, NeuroHasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Neuro.Debugs.HASREMOTE_SORT,\n  debugQuery:           Neuro.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Neuro.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return NeuroHasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Neuro.debug( Neuro.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: NeuroGate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Neuro.debug( Neuro.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$on( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Neuro.debug( Neuro.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( NeuroModel.Events.Removed, relation.onRemoved );\n      related.$off( NeuroModel.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nNeuro.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new NeuroShard( database );\n\n    transfer( methods, shard );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction NeuroShard(database)\n{\n  this.database = database;\n}\n\nNeuroShard.prototype =\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( query, success, failure )\n  {\n    var shards = this.getShardsForQuery( query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n};\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new NeuroModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new NeuroModelCollection( db, models );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ? \n      db.createModel( props ) : \n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || NeuroDatabase.Defaults.extend;\n\n  if ( !isNeuro( extend ) )\n  {\n    return;\n  }\n\n  var defaults = NeuroDatabase.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Neuro.rest( db );\n  db.store  = Neuro.store( db );\n  db.live   = Neuro.live( db );\n\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( NeuroModel.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, NeuroDatabase.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    transfer( methods, model.prototype );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new NeuroRemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();      \n    }\n\n    return q;\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.search = function(options)\n  {\n    return new NeuroSearch( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.searchPaged = function(options)\n  {\n    return new NeuroSearchPaged( db, options );\n  };\n});\n","Neuro.on( Neuro.Events.Options, function(options)\n{\n  var shard = options.shard || NeuroDatabase.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Neuro.shard( shard );\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || NeuroDatabase.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || NeuroDatabase.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","Neuro.on( Neuro.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new NeuroQuery( db, whereProperties, whereValue, whereEquals );\n  };\n});","\nNeuro.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nNeuro.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, NeuroModel\n  REMOTE_CREATE: 3,           // encoded, NeuroModel\n  REMOTE_REMOVE: 4,           // NeuroModel\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // NeuroModel\n  LOCAL_RESUME_SAVE: 11,      // NeuroModel\n  LOCAL_LOAD_SAVED: 12,       // NeuroModel\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, NeuroModel\n  SAVE_PUBLISH: 16,           // encoded, NeuroModel\n  SAVE_CONFLICT: 17,          // encoded, NeuroModel\n  SAVE_UPDATE_FAIL: 18,       // NeuroModel\n  SAVE_ERROR: 19,             // NeuroModel, status\n  SAVE_OFFLINE: 20,           // NeuroModel\n  SAVE_RESUME: 21,            // NeuroModel\n  SAVE_REMOTE: 25,            // NeuroModel\n  SAVE_DELETED: 40,           // NeuroModel\n\n  SAVE_OLD_REVISION: 48,      // NeuroModel, encoded\n\n  SAVE_LOCAL: 23,             // NeuroModel\n  SAVE_LOCAL_ERROR: 24,       // NeuroModel, error\n  SAVE_LOCAL_DELETED: 38,     // NeuroModel\n  SAVE_LOCAL_BLOCKED: 39,     // NeuroModel\n\n  SAVE_REMOTE_DELETED: 41,    // NeuroModel, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // NeuroModel\n\n  REMOVE_PUBLISH: 26,         // key, NeuroModel\n  REMOVE_LOCAL: 27,           // key, NeuroModel\n  REMOVE_MISSING: 28,         // key, NeuroModel\n  REMOVE_ERROR: 29,           // status, key, NeuroModel\n  REMOVE_OFFLINE: 30,         // NeuroModel\n  REMOVE_RESUME: 31,          // NeuroModel\n  REMOVE_REMOTE: 32,          // NeuroModel\n  REMOVE_CANCEL_SAVE: 47,     // NeuroModel\n\n  REMOVE_LOCAL: 33,           // NeuroModel\n  REMOVE_LOCAL_ERROR: 34,     // NeuroModel, error\n  REMOVE_LOCAL_BLOCKED: 44,   // NeuroModel\n  REMOVE_LOCAL_NONE: 45,      // NeuroModel\n  REMOVE_LOCAL_UNSAVED: 46,   // NeuroModel\n\n  REMOVE_REMOTE_BLOCKED: 43,  // NeuroModel\n\n  GET_LOCAL_SKIPPED: 104,     // NeuroModel\n  GET_LOCAL: 105,             // NeuroModel, encoded\n  GET_LOCAL_ERROR: 106,       // NeuroModel, e\n  GET_REMOTE: 107,            // NeuroModel, data\n  GET_REMOTE_ERROR: 108,      // NeuroModel, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // NeuroHasOne\n  HASONE_NINJA_REMOVE: 49,    // NeuroModel, relation\n  HASONE_INITIAL_PULLED: 51,  // NeuroModel, initial\n  HASONE_INITIAL: 52,         // NeuroModel, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // NeuroModel, relation\n  HASONE_POSTREMOVE: 57,      // NeuroModel, relation\n  HASONE_CLEAR_KEY: 58,       // NeuroModel, local\n  HASONE_UPDATE_KEY: 59,      // NeuroModel, local, NeuroModel, foreign\n  HASONE_LOADED: 60,          // NeuroModel, relation, [NeuroModel]\n  HASONE_QUERY: 111,          // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // NeuroModel, NeuroRemoteQuery\n\n  BELONGSTO_INIT: 61,          // NeuroHasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // NeuroModel, relation\n  BELONGSTO_NINJA_SAVE: 63,    // NeuroModel, relation\n  BELONGSTO_INITIAL_PULLED: 64,// NeuroModel, initial\n  BELONGSTO_INITIAL: 65,       // NeuroModel, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // NeuroModel, relation\n  BELONGSTO_CLEAR_KEY: 70,     // NeuroModel, local\n  BELONGSTO_UPDATE_KEY: 71,    // NeuroModel, local, NeuroModel, foreign\n  BELONGSTO_LOADED: 72,        // NeuroModel, relation, [NeuroModel]\n  BELONGSTO_QUERY: 113,        // NeuroModel, NeuroRemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// NeuroModel, NeuroRemoteQuery\n\n  HASMANY_INIT: 74,             // NeuroHasMany\n  HASMANY_NINJA_REMOVE: 75,     // NeuroModel, NeuroModel, relation\n  HASMANY_NINJA_SAVE: 76,       // NeuroModel, NeuroModel, relation\n  HASMANY_INITIAL: 77,          // NeuroModel, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // NeuroModel, relation\n  HASMANY_REMOVE: 79,           // relation, NeuroModel\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, NeuroModel\n  HASMANY_LAZY_LOAD: 82,        // relation, NeuroModel[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, NeuroModel\n  HASMANY_NINJA_ADD: 84,        // relation, NeuroModel\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // NeuroModel, relation\n  HASMANY_POSTSAVE: 87,         // NeuroModel, relation\n  HASMANY_QUERY: 115,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // NeuroModel, NeuroRemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // NeuroHasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // NeuroModel, NeuroModel, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// NeuroModel, NeuroModel, relation\n  HASMANYTHRU_INITIAL: 92,          // NeuroModel, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // NeuroModel, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, NeuroModel\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, NeuroModel\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, NeuroModel[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, NeuroModel\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, NeuroModel\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // NeuroModel, relation\n  HASMANYTHRU_POSTSAVE: 102,        // NeuroModel, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, NeuroModel\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, NeuroModel, NeuroModel\n  HASMANYTHRU_QUERY: 117,           // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // NeuroModel, NeuroRemoteQuery\n\n  HASREMOTE_INIT: 50,               // NeuroHasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // NeuroModel, NeuroModel, relation\n  HASREMOVE_NINJA_SAVE: 110,        // NeuroModel, NeuroModel, relation\n  HASREMOVE_QUERY: 119,             // NeuroModel, NeuroRemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // NeuroModel, NeuroRemoteQuery\n};\n","\n// Neuro.rest = function(options, success(data), failure(data, status))\n\nNeuro.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {NeuroDatabase} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nNeuro.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the NeuroDatabase and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {NeuroDatabase} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nNeuro.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};","\n// Initial online\nNeuro.online = window.navigator.onLine !== false;\n\nNeuro.forceOffline = false;\n\n// Set network status to online and notify all listeners\nNeuro.setOnline = function()\n{\n  Neuro.online = true;\n  Neuro.debug( Neuro.Debugs.ONLINE );\n  Neuro.trigger( Neuro.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nNeuro.setOffline = function()\n{\n  Neuro.online = false;\n  Neuro.debug( Neuro.Debugs.OFFLINE );\n  Neuro.trigger( Neuro.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nNeuro.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Neuro.Events.Online, Neuro.setOnline, false );\n    window.addEventListener( Neuro.Events.Offline, Neuro.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Neuro.setOnline;\n    document.body.onoffline = Neuro.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nNeuro.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Neuro.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Neuro.online === false) \n  {\n    Neuro.setOnline();\n  }\n\n  else if (online === false && Neuro.online === true) \n  {\n    Neuro.setOffline();\n  }\n};","\nvar NeuroPolymorphic = \n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Neuro.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(neuro)\n    {\n      this.discriminators[ neuro.Database.name ] = discriminator;\n      this.discriminators[ neuro.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = neuro;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return NeuroDiscriminateCollection( new NeuroRelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return NeuroDiscriminateCollection( new NeuroModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );  \n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( NeuroDatabase.Events.ModelAdded, callback, this );  \n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new NeuroRemoteQuery( model.$db, query );\n\n    NeuroDiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof NeuroModel )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n    \n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source ); \n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( NeuroModel.Events.KeyUpdate, [target, source, targetFields, sourceFields] );      \n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];   \n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof NeuroModel )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );    \n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};","\n  /* Top-Level Function */\n  global.Neuro = Neuro;\n\n  /* Classes */\n  global.Neuro.Model = NeuroModel;\n  global.Neuro.Database = NeuroDatabase;\n  global.Neuro.Relation = NeuroRelation;\n  global.Neuro.Operation = NeuroOperation;\n  global.Neuro.Transaction = NeuroTransaction;\n  global.Neuro.Search = NeuroSearch;\n  global.Neuro.SearchPaged = NeuroSearchPaged;\n\n  /* Collections */\n  global.Neuro.Map = NeuroMap;\n  global.Neuro.Collection = NeuroCollection;\n  global.Neuro.FilteredCollection = NeuroFilteredCollection;\n  global.Neuro.ModelCollection = NeuroModelCollection;\n  global.Neuro.Query = NeuroQuery;\n  global.Neuro.RemoteQuery = NeuroRemoteQuery;\n  global.Neuro.Page = NeuroPage;\n\n  /* Relationships */\n  global.Neuro.HasOne = NeuroHasOne;\n  global.Neuro.BelongsTo = NeuroBelongsTo;\n  global.Neuro.HasMany = NeuroHasMany;\n  global.Neuro.HasManyThrough = NeuroHasManyThrough;\n  global.Neuro.HasRemote = NeuroHasRemote;\n\n  /* Utility Functions */\n  global.Neuro.isNeuro = isNeuro;\n  global.Neuro.isDefined = isDefined;\n  global.Neuro.isFunction = isFunction;\n  global.Neuro.isString = isString;\n  global.Neuro.isNumber = isNumber;\n  global.Neuro.isBoolean = isBoolean;\n  global.Neuro.isDate = isDate;\n  global.Neuro.isRegExp = isRegExp;\n  global.Neuro.isArray = isArray;\n  global.Neuro.isObject = isObject;\n  global.Neuro.isValue = isValue;\n\n  global.Neuro.uuid = uuid;\n  global.Neuro.indexOf = indexOf;\n  global.Neuro.propsMatch = propsMatch;\n  global.Neuro.hasFields = hasFields;\n  global.Neuro.toArray = toArray;\n\n  global.Neuro.eventize = eventize;\n\n  global.Neuro.extend = extend;\n  global.Neuro.extendArray = extendArray;\n  global.Neuro.copyConstructor = copyConstructor;\n  global.Neuro.factory = factory;\n\n  global.Neuro.transfer = transfer;\n  global.Neuro.collapse = collapse;\n  global.Neuro.swap = swap;\n  global.Neuro.grab = grab;\n  global.Neuro.pull = pull;\n  global.Neuro.copy = copy;\n  global.Neuro.noop = noop;\n  global.Neuro.bind = bind;\n  global.Neuro.diff = diff;\n  global.Neuro.sizeof = sizeof;\n  global.Neuro.isEmpty = isEmpty;\n  global.Neuro.collect = collect;\n  global.Neuro.applyOptions = applyOptions;\n  global.Neuro.toCamelCase = toCamelCase;\n  global.Neuro.evaluate = evaluate;\n\n  global.Neuro.clean = clean;\n  global.Neuro.cleanFunctions = cleanFunctions;\n\n  global.Neuro.compare = compare;\n  global.Neuro.equals = equals;\n  global.Neuro.equalsStrict = equalsStrict;\n  global.Neuro.equalsCompare = equalsCompare;\n\n  global.Neuro.isSorted = isSorted;\n  global.Neuro.saveComparator = saveComparator;\n  global.Neuro.createComparator = createComparator;\n  global.Neuro.addComparator = addComparator;\n\n  global.Neuro.saveWhere = saveWhere;\n  global.Neuro.createWhere = createWhere;\n\n  global.Neuro.savePropertyResolver = savePropertyResolver;\n  global.Neuro.createPropertyResolver = createPropertyResolver;\n\n  global.Neuro.saveNumberResolver = saveNumberResolver;\n  global.Neuro.createNumberResolver = createNumberResolver;\n\n  global.Neuro.saveHaving = saveHaving;\n  global.Neuro.createHaving = createHaving;\n\n  global.Neuro.parse = parse;\n  global.Neuro.format = format;\n  global.Neuro.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}