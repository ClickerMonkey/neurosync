{"version":3,"sources":["neurosync-angular.js"],"names":["app","undefined","NeuroFactory","$http","Neuro","rest","database","execute","method","data","url","success","failure","offlineValue","onRestSuccess","response","onRestError","status","debug","Debugs","REST","this","forceOffline","options","then","all","api","create","model","encoded","update","$key","remove","Neuro_debug","NeuroSettings","apply","arguments","ScopeEval","listenToNetworkStatus","NeuroBindFactory","$log","NeuroBind","scope","target","callback","notify","newNotification","release","newRelease","on","Events","Database","Model","Scope","prototype","$on","off","$off","binder","$evalAsync","constant","factory","angular","module"],"mappings":"CAAA,SAAAA,EAAAC,GAaA,QAAAC,GAAAC,GAGAC,MAAAC,KAAA,SAAAC,GAGA,QAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAUA,QAAAC,GAAAC,GAEAJ,EAAAI,EAAAN,MAGA,QAAAO,GAAAD,GAEAH,EAAAG,EAAAN,KAAAM,EAAAE,QAbA,GAFAb,MAAAc,MAAAd,MAAAe,OAAAC,KAAAC,KAAAb,EAAAE,EAAAD,GAEAL,MAAAkB,aAEAV,EAAAC,EAAA,OAGA,CAWA,GAAAU,IAEAf,OAAAA,EACAC,KAAAA,EACAC,IAAAA,EAGAP,GAAAoB,GAAAC,KAAAV,EAAAE,IAIA,OACAS,IAAA,SAAAd,EAAAC,GAEAL,EAAA,MAAAN,EAAAK,EAAAoB,IAAAf,EAAAC,OAEAe,OAAA,SAAAC,EAAAC,EAAAlB,EAAAC,GAEAL,EAAA,OAAAsB,EAAAvB,EAAAoB,IAAAf,EAAAC,OAEAkB,OAAA,SAAAF,EAAAC,EAAAlB,EAAAC,GAEAL,EAAA,MAAAsB,EAAAvB,EAAAoB,IAAAE,EAAAG,OAAApB,EAAAC,OAEAoB,OAAA,SAAAJ,EAAAjB,EAAAC,GAEAL,EAAA,SAAAN,EAAAK,EAAAoB,IAAAE,EAAAG,OAAApB,EAAAC,QAMA,IAAAqB,GAAA7B,MAAAc,KAcA,OAZAd,OAAAc,MAAA,WAEAgB,EAAAhB,OAEAe,EAAAE,MAAAd,KAAAe,YAIAhC,MAAAe,OAAAkB,UAAA,IAEAjC,MAAAkC,wBAEAlC,MAGA,QAAAmC,GAAAC,GAEA,QAAAC,GAAAC,EAAAC,EAAAC,GAEA,MAAAvB,gBAAAoB,IAEApB,KAAAqB,MAAAA,EACArB,KAAAsB,OAAAA,EACAtB,KAAAuB,SAAAA,EAEAvB,KAAAwB,OAAAxB,KAAAyB,kBACAzB,KAAA0B,QAAA1B,KAAA2B,iBAEA3B,MAAA4B,MATA,GAAAR,GAAAC,EAAAC,EAAAC,GAgFA,MApEAH,GAAAS,QACAC,SAAA,UACAC,MAAA,8CACAC,MAAA,YAGAZ,EAAAa,WAEAL,GAAA,WAEA5B,KAAAsB,OAAAQ,UAAA9B,KAAAsB,OAAAS,QAEA/B,KAAAsB,OAAAtB,KAAAsB,OAAAQ,UAGA9B,KAAAsB,iBAAAvC,OAAA+C,SAEA9B,KAAAsB,OAAAM,GAAAR,EAAAS,OAAAC,SAAA9B,KAAAwB,QAEAxB,KAAAsB,iBAAAvC,OAAAgD,OAEA/B,KAAAsB,OAAAY,IAAAd,EAAAS,OAAAE,MAAA/B,KAAAwB,QAGAxB,KAAAqB,MAAAa,IAAAd,EAAAS,OAAAG,MAAAhC,KAAA0B,UAEAS,IAAA,WAEAnC,KAAAsB,iBAAAvC,OAAA+C,SAEA9B,KAAAsB,OAAAa,IAAAf,EAAAS,OAAAC,SAAA9B,KAAAwB,QAEAxB,KAAAsB,iBAAAvC,OAAAgD,OAEA/B,KAAAsB,OAAAc,KAAAhB,EAAAS,OAAAE,MAAA/B,KAAAwB,SAGAG,WAAA,WAEA,GAAAU,GAAArC,IAEA,OAAA,YAEAqC,EAAAF,QAGAV,gBAAA,WAEA,GAAAY,GAAArC,IAEA,OAAA,YAEAqC,EAAAhB,MAAAiB,WAAA,WAEAD,EAAAd,UAEAc,EAAAd,SAAAT,MAAAuB,EAAAf,QAGAT,EAAAhB,OAEAd,MAAAc,MAAA,qBAAAwC,EAAAhB,YAOAD,EAzKA,GAAAP,IACAhB,OAAA,EAGAlB,GACA4D,SAAA,gBAAA1B,GACA2B,QAAA,SAAA,QAAA3D,IACA2D,QAAA,aAAA,OAAAtB,KAqKAuB,QAAAC,OAAA","file":"neurosync-angular.min.js","sourcesContent":["(function (app, undefined)\n{\n\n  var NeuroSettings = {\n    debug: false\n  };\n\n  app\n    .constant( 'NeuroSettings', NeuroSettings )\n    .factory( 'Neuro', ['$http', NeuroFactory] )\n    .factory( 'NeuroBind', ['$log', NeuroBindFactory] )\n  ;\n\n  function NeuroFactory($http)\n  {\n\n    Neuro.rest = function(database)\n    {\n\n      function execute( method, data, url, success, failure, offlineValue )\n      {\n        Neuro.debug( Neuro.Debugs.REST, this, method, url, data );\n\n        if ( Neuro.forceOffline )\n        {\n          failure( offlineValue, 0 );\n        }\n        else\n        {\n          function onRestSuccess(response) \n          {\n            success( response.data );\n          }\n\n          function onRestError(response) \n          {\n            failure( response.data, response.status );\n          }\n\n          var options = \n          {\n            method: method,\n            data: data,\n            url: url\n          };\n\n          $http( options ).then( onRestSuccess, onRestError );\n        }\n      }\n      \n      return {\n        all: function( success, failure )\n        {\n          execute( 'GET', undefined, database.api, success, failure, [] );\n        },\n        create: function( model, encoded, success, failure )\n        {\n          execute( 'POST', encoded, database.api, success, failure, {} );\n        },\n        update: function( model, encoded, success, failure )\n        {\n          execute( 'PUT', encoded, database.api + model.$key(), success, failure, {} );\n        },\n        remove: function( model, success, failure )\n        {\n          execute( 'DELETE', undefined, database.api + model.$key(), success, failure, {} );\n        }\n      };\n\n    };\n\n    var Neuro_debug = Neuro.debug;\n\n    Neuro.debug = function()\n    {\n      if ( NeuroSettings.debug )\n      {\n        Neuro_debug.apply( this, arguments );\n      }\n    };\n\n    Neuro.Debugs.ScopeEval = 100000;\n\n    Neuro.listenToNetworkStatus();\n\n    return Neuro;\n  }\n\n  function NeuroBindFactory($log)\n  {\n    function NeuroBind( scope, target, callback )\n    {\n      if ( !(this instanceof NeuroBind) ) return new NeuroBind( scope, target, callback );\n\n      this.scope = scope;\n      this.target = target;\n      this.callback = callback;\n\n      this.notify = this.newNotification();\n      this.release = this.newRelease();\n      \n      this.on();\n    }\n\n    NeuroBind.Events = {\n      Database: 'updated',\n      Model: 'saved removed remote-update relation-update',\n      Scope: '$destroy'\n    };\n\n    NeuroBind.prototype = \n    {\n      on: function()\n      {\n        if ( this.target.Database && this.target.Model )\n        {\n          this.target = this.target.Database;\n        }\n\n        if ( this.target instanceof Neuro.Database )\n        {\n          this.target.on( NeuroBind.Events.Database, this.notify  );\n        }\n        else if ( this.target instanceof Neuro.Model )\n        {\n          this.target.$on( NeuroBind.Events.Model, this.notify );\n        }\n\n        this.scope.$on( NeuroBind.Events.Scope, this.release );\n      },\n      off: function()\n      {\n        if ( this.target instanceof Neuro.Database )\n        {\n          this.target.off( NeuroBind.Events.Database, this.notify );\n        }\n        else if ( this.target instanceof Neuro.Model )\n        {\n          this.target.$off( NeuroBind.Events.Model, this.notify );\n        }\n      },\n      newRelease: function()\n      {\n        var binder = this;\n\n        return function()\n        {\n          binder.off();\n        };\n      },\n      newNotification: function()\n      {\n        var binder = this;\n\n        return function()\n        {\n          binder.scope.$evalAsync(function()\n          {\n            if ( binder.callback )\n            {\n              binder.callback.apply( binder.target );\n            }\n\n            if ( NeuroSettings.debug )\n            {\n              Neuro.debug( '[Scope:$evalAsync]', binder.scope );\n            }\n          });\n        };\n      }\n    };\n\n    return NeuroBind;\n  }\n\n})( angular.module('neurosync', []) );"],"sourceRoot":"/source/"}