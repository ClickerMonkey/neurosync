{"version":3,"sources":["neurosync-angular.js"],"names":["app","NeuroFactory","$http","Neuro","rest","database","method","model","data","success","failure","onRestSuccess","response","onRestError","status","options","url","api","$key","debug","Events","REST","this","forceOffline","then","Neuro_debug","NeuroSettings","apply","arguments","ScopeEval","listenToNetworkStatus","NeuroBindFactory","$log","NeuroBind","scope","target","callback","notify","newNotification","release","newRelease","on","prototype","Database","Model","$on","off","$off","binder","$evalAsync","constant","factory","angular","module"],"mappings":"CAAA,SAAAA,GAaA,QAAAC,GAAAC,GAEAC,MAAAC,KAAA,SAAAC,GAEA,MAAA,UAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAgBA,QAAAC,GAAAC,GAEAH,EAAAG,EAAAJ,MAGA,QAAAK,GAAAD,GAEAF,EAAAE,EAAAJ,KAAAI,EAAAE,QArBA,GAAAC,IACAT,OAAAA,EACAE,KAAAA,EACAQ,IAAAT,GAAA,SAAAD,EAAAD,EAAAY,IAAAV,EAAAW,OAAAb,EAAAY,IAGAd,OAAAgB,MAAAhB,MAAAiB,OAAAC,KAAAC,KAAAP,EAAAT,OAAAS,EAAAC,IAAAD,EAAAP,MAEAL,MAAAoB,aAEAb,KAAA,GAcAR,EAAAa,GAAAS,KAAAb,EAAAE,IAKA,IAAAY,GAAAtB,MAAAgB,KAcA,OAZAhB,OAAAgB,MAAA,WAEAO,EAAAP,OAEAM,EAAAE,MAAAL,KAAAM,YAIAzB,MAAAiB,OAAAS,UAAA,IAEA1B,MAAA2B,wBAEA3B,MAGA,QAAA4B,GAAAC,GAEA,QAAAC,GAAAC,EAAAC,EAAAC,GAEA,MAAAd,gBAAAW,IAEAX,KAAAY,MAAAA,EACAZ,KAAAa,OAAAA,EACAb,KAAAc,SAAAA,EACAd,KAAAe,OAAAf,KAAAgB,kBACAhB,KAAAiB,QAAAjB,KAAAkB,iBACAlB,MAAAmB,MAPA,GAAAR,GAAAC,EAAAC,EAAAC,GAwEA,MA9DAH,GAAAS,WAEAD,GAAA,WAEAnB,KAAAa,OAAAQ,UAAArB,KAAAa,OAAAS,QAEAtB,KAAAa,OAAAb,KAAAa,OAAAQ,UAGArB,KAAAa,iBAAAhC,OAAAwC,SAEArB,KAAAa,OAAAM,GAAA,UAAAnB,KAAAe,QAEAf,KAAAa,iBAAAhC,OAAAyC,OAEAtB,KAAAa,OAAAU,IAAA,8BAAAvB,KAAAe,QAGAf,KAAAY,MAAAW,IAAA,WAAAvB,KAAAiB,UAEAO,IAAA,WAEAxB,KAAAa,iBAAAhC,OAAAwC,SAEArB,KAAAa,OAAAW,IAAA,UAAAxB,KAAAe,QAEAf,KAAAa,iBAAAhC,OAAAyC,OAEAtB,KAAAa,OAAAY,KAAA,8BAAAzB,KAAAe,SAGAG,WAAA,WAEA,GAAAQ,GAAA1B,IAEA,OAAA,YAEA0B,EAAAF,QAGAR,gBAAA,WAEA,GAAAU,GAAA1B,IAEA,OAAA,YAEA0B,EAAAd,MAAAe,WAAA,WAEAD,EAAAZ,UAEAY,EAAAZ,SAAAT,MAAAqB,EAAAb,QAGAT,EAAAP,OAEAhB,MAAAgB,MAAA,qBAAA6B,EAAAd,YAOAD,EA1IA,GAAAP,IACAP,OAAA,EAGAnB,GACAkD,SAAA,gBAAAxB,GACAyB,QAAA,SAAA,QAAAlD,IACAkD,QAAA,aAAA,OAAApB,KAsIAqB,QAAAC,OAAA","file":"neurosync-angular.min.js","sourcesContent":["(function (app)\n{\n\n  var NeuroSettings = {\n    debug: false\n  };\n\n  app\n    .constant( 'NeuroSettings', NeuroSettings )\n    .factory( 'Neuro', ['$http', NeuroFactory] )\n    .factory( 'NeuroBind', ['$log', NeuroBindFactory] )\n  ;\n\n  function NeuroFactory($http)\n  {\n    Neuro.rest = function(database)\n    {\n      return function(method, model, data, success, failure) \n      {\n        var options = {\n          method: method,\n          data: data,\n          url: (!model || method === 'POST') ? database.api : database.api + model.$key()\n        };\n\n        Neuro.debug( Neuro.Events.REST, this, options.method, options.url, options.data );\n\n        if ( Neuro.forceOffline )\n        {\n          failure( {}, 0 );\n        } \n        else \n        {\n          function onRestSuccess(response) \n          {\n            success( response.data );\n          }\n\n          function onRestError(response) \n          {\n            failure( response.data, response.status );\n          }\n\n          $http( options ).then( onRestSuccess, onRestError );\n        }            \n      };\n    };\n\n    var Neuro_debug = Neuro.debug;\n\n    Neuro.debug = function()\n    {\n      if ( NeuroSettings.debug )\n      {\n        Neuro_debug.apply( this, arguments );\n      }\n    };\n\n    Neuro.Events.ScopeEval = 100000;\n\n    Neuro.listenToNetworkStatus();\n\n    return Neuro;\n  }\n\n  function NeuroBindFactory($log)\n  {\n    function NeuroBind( scope, target, callback )\n    {\n      if ( !(this instanceof NeuroBind) ) return new NeuroBind( scope, target, callback );\n\n      this.scope = scope;\n      this.target = target;\n      this.callback = callback;\n      this.notify = this.newNotification();\n      this.release = this.newRelease();\n      this.on();\n    }\n\n    NeuroBind.prototype = \n    {\n      on: function()\n      {\n        if ( this.target.Database && this.target.Model )\n        {\n          this.target = this.target.Database;\n        }\n\n        if ( this.target instanceof Neuro.Database )\n        {\n          this.target.on( 'updated', this.notify  );\n        }\n        else if ( this.target instanceof Neuro.Model )\n        {\n          this.target.$on( 'saved removed remote-update', this.notify );\n        }\n\n        this.scope.$on( '$destroy', this.release );\n      },\n      off: function()\n      {\n        if ( this.target instanceof Neuro.Database )\n        {\n          this.target.off( 'updated', this.notify );\n        }\n        else if ( this.target instanceof Neuro.Model )\n        {\n          this.target.$off( 'saved removed remote-update', this.notify );\n        }\n      },\n      newRelease: function()\n      {\n        var binder = this;\n\n        return function()\n        {\n          binder.off();\n        };\n      },\n      newNotification: function()\n      {\n        var binder = this;\n\n        return function()\n        {\n          binder.scope.$evalAsync(function()\n          {\n            if ( binder.callback )\n            {\n              binder.callback.apply( binder.target );\n            }\n\n            if ( NeuroSettings.debug )\n            {\n              Neuro.debug( '[Scope:$evalAsync]', binder.scope );\n            }\n          });\n        };\n      }\n    };\n\n    return NeuroBind;\n  }\n\n})( angular.module('neurosync', []) );"],"sourceRoot":"/source/"}