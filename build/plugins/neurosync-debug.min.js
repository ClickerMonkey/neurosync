!function(e){function o(o){return o instanceof e.Model?"["+o.$db.className+":"+o.$db.toString(o)+"] ":o instanceof e.Database?"["+o.className+"] ":o instanceof e.Relation?"["+o.database.className+":"+o.type+":"+o.model.Database.className+"] ":o instanceof e.Operation?"["+o.type+"] ":!1}function l(e,l){for(var d=0;d<l.length;d++){var a=o(l[d]);if(a!==!1)return a}var a=o(e);return a!==!1?a:"[Neuro] "}if(window.console){var d={0:"Created",1:"REST",2:"Remote data received, existing model updated",3:"Remote data received, new model created",4:"Model remotely removed, removed locally",5:"Models loaded remotely",6:"Offline, failed loading models remotely",7:"Error loading remote models",8:"Saved model removed locally because it does not exist remotely",9:"Models loaded locally",10:"Model deleted locally, resuming remote deletion",11:"Model loaded but not saved, resuming save",12:"Model loaded",13:"Real-time save",14:"Real-time removal",15:"Model saved values",16:"Model save published",17:"Model save failure, conflicted",18:"Model update failure, does not exist remotely",19:"Model save error for",20:"Model save failure, offline!",21:"Model save resume",22:"Models loading remotely resumed",23:"Model saved locally",24:"Model failed to save locally, will still try to save it remotely",25:"Model saved remotely",26:"Model remove published",27:"Model removed locally",28:"Model remove failure, does not exist remotely",29:"Model remove error",30:"Model remove failure, offline!",31:"Model remove resume",32:"Model removed remotely",33:"Model removed locally",34:"Model failed to remove locally, will still try to remove it remotely",35:"Application Online",36:"Application Offline",37:"LIVE",38:"Model local save ineffective, model is deleted",39:"Model local save blocked, waiting until previous operation finishes",40:"Model save ineffective, model is deleted",41:"Model remote save ineffective, model is deleted",42:"Model remove save blocked, waiting until previous operation finishes",43:"Model remote remove blocked, waiting until previous operation finishes",44:"Model local remove blocked, waiting until previous operation finishes",45:"Model local remove ineffective, no local model to remove",46:"Model local remove effective, unsaved model removed",47:"Model had a pending save that was canceled by remove",48:"Model update blocked with older revision",49:"Model ninja removed",50:"Model ninja saved",51:"Initial pulled from model",52:"Initial value loaded",53:"Initialized",54:"Relation cleared",55:"Relation set",56:"Pre-save",57:"Post-remove",58:"Clear key",59:"Set key",60:"Loaded",61:"Initialized",62:"Model ninja removed",63:"Model ninja saved"};e.debugExclude=[],e.debugInclude=!1,e.debugNoData=[],e.debugWithData=!1,e.debugTrace=!1,e.debugStyle="color:blue; font-weight:bold",e.debug=function(o,a){if(e.debugInclude!==!1){if(e.indexOf(e.debugInclude,o)===!1)return}else if(e.indexOf(e.debugExclude,o)!==!1)return;if(o in d){var t=Array.prototype.slice.call(arguments,2);e.debugWithData!==!1?e.indexOf(e.debugWithData,o)===!1&&(t=[]):e.indexOf(e.debugNoData,o)!==!1&&(t=[]);var i=l(a,t),r=d[o];if(e.debugTrace&&t.push(new Error),t.length&&console.groupCollapsed){console.groupCollapsed("%c"+i+r,e.debugStyle);for(var n=0;n<t.length;n++)console.log(t[n]);console.groupEnd()}else console.log("%c"+i+r,e.debugStyle)}else if(arguments.length>1&&console.groupCollapsed){console.groupCollapsed("%c"+arguments[0],e.debugStyle);for(var n=1;n<arguments.length;n++)console.log(arguments[n]);console.groupEnd()}else console.log.apply(console,arguments)}}}(Neuro);
//# sourceMappingURL=neurosync-debug.min.js.map
